// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_HH_
#define _max_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct max : public sc_module {
    // Port declarations 15
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > din_0_read;
    sc_in< sc_lv<32> > din_1_read;
    sc_in< sc_lv<32> > din_2_read;
    sc_in< sc_lv<32> > din_3_read;
    sc_in< sc_lv<32> > din_4_read;
    sc_in< sc_lv<32> > din_5_read;
    sc_in< sc_lv<32> > din_6_read;
    sc_in< sc_lv<32> > din_7_read;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    max(sc_module_name name);
    SC_HAS_PROCESS(max);

    ~max();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > m0_1_fu_100_p3;
    sc_signal< sc_lv<32> > m0_1_reg_160;
    sc_signal< sc_lv<32> > m1_2_fu_142_p3;
    sc_signal< sc_lv<32> > m1_2_reg_166;
    sc_signal< sc_lv<1> > icmp_ln8_fu_66_p2;
    sc_signal< sc_lv<1> > icmp_ln8_1_fu_80_p2;
    sc_signal< sc_lv<32> > m0_fu_72_p3;
    sc_signal< sc_lv<32> > m1_fu_86_p3;
    sc_signal< sc_lv<1> > icmp_ln8_2_fu_94_p2;
    sc_signal< sc_lv<1> > icmp_ln8_3_fu_108_p2;
    sc_signal< sc_lv<1> > icmp_ln8_4_fu_122_p2;
    sc_signal< sc_lv<32> > m0_2_fu_114_p3;
    sc_signal< sc_lv<32> > m1_1_fu_128_p3;
    sc_signal< sc_lv<1> > icmp_ln8_5_fu_136_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln8_6_fu_150_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_icmp_ln8_1_fu_80_p2();
    void thread_icmp_ln8_2_fu_94_p2();
    void thread_icmp_ln8_3_fu_108_p2();
    void thread_icmp_ln8_4_fu_122_p2();
    void thread_icmp_ln8_5_fu_136_p2();
    void thread_icmp_ln8_6_fu_150_p2();
    void thread_icmp_ln8_fu_66_p2();
    void thread_m0_1_fu_100_p3();
    void thread_m0_2_fu_114_p3();
    void thread_m0_fu_72_p3();
    void thread_m1_1_fu_128_p3();
    void thread_m1_2_fu_142_p3();
    void thread_m1_fu_86_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
