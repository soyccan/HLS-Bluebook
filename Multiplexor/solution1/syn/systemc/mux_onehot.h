// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mux_onehot_HH_
#define _mux_onehot_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct mux_onehot : public sc_module {
    // Port declarations 11
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > din_0_V_read;
    sc_in< sc_lv<8> > din_1_V_read;
    sc_in< sc_lv<8> > din_2_V_read;
    sc_in< sc_lv<8> > din_3_V_read;
    sc_in< sc_lv<8> > din_4_V_read;
    sc_in< sc_lv<8> > din_5_V_read;
    sc_in< sc_lv<8> > din_6_V_read;
    sc_in< sc_lv<8> > din_7_V_read;
    sc_in< sc_lv<8> > sel_V;
    sc_out< sc_lv<8> > ap_return;


    // Module declarations
    mux_onehot(sc_module_name name);
    SC_HAS_PROCESS(mux_onehot);

    ~mux_onehot();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > icmp_ln7_7_fu_134_p2;
    sc_signal< sc_lv<1> > icmp_ln7_6_fu_128_p2;
    sc_signal< sc_lv<1> > icmp_ln7_5_fu_122_p2;
    sc_signal< sc_lv<1> > icmp_ln7_4_fu_116_p2;
    sc_signal< sc_lv<1> > icmp_ln7_3_fu_110_p2;
    sc_signal< sc_lv<1> > icmp_ln7_2_fu_104_p2;
    sc_signal< sc_lv<1> > icmp_ln7_1_fu_98_p2;
    sc_signal< sc_lv<1> > icmp_ln7_fu_92_p2;
    sc_signal< sc_lv<1> > or_ln7_fu_148_p2;
    sc_signal< sc_lv<8> > select_ln7_fu_140_p3;
    sc_signal< sc_lv<8> > select_ln7_1_fu_154_p3;
    sc_signal< sc_lv<1> > or_ln7_1_fu_162_p2;
    sc_signal< sc_lv<1> > or_ln7_2_fu_176_p2;
    sc_signal< sc_lv<8> > select_ln7_2_fu_168_p3;
    sc_signal< sc_lv<8> > select_ln7_3_fu_182_p3;
    sc_signal< sc_lv<1> > or_ln7_3_fu_190_p2;
    sc_signal< sc_lv<1> > or_ln7_4_fu_204_p2;
    sc_signal< sc_lv<8> > select_ln7_4_fu_196_p3;
    sc_signal< sc_lv<8> > select_ln7_5_fu_210_p3;
    sc_signal< sc_lv<1> > or_ln7_5_fu_218_p2;
    sc_signal< sc_lv<1> > or_ln7_6_fu_232_p2;
    sc_signal< sc_lv<8> > select_ln7_6_fu_224_p3;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<8> ap_const_lv8_80;
    static const sc_lv<8> ap_const_lv8_40;
    static const sc_lv<8> ap_const_lv8_20;
    static const sc_lv<8> ap_const_lv8_10;
    static const sc_lv<8> ap_const_lv8_8;
    static const sc_lv<8> ap_const_lv8_4;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_ready();
    void thread_ap_return();
    void thread_icmp_ln7_1_fu_98_p2();
    void thread_icmp_ln7_2_fu_104_p2();
    void thread_icmp_ln7_3_fu_110_p2();
    void thread_icmp_ln7_4_fu_116_p2();
    void thread_icmp_ln7_5_fu_122_p2();
    void thread_icmp_ln7_6_fu_128_p2();
    void thread_icmp_ln7_7_fu_134_p2();
    void thread_icmp_ln7_fu_92_p2();
    void thread_or_ln7_1_fu_162_p2();
    void thread_or_ln7_2_fu_176_p2();
    void thread_or_ln7_3_fu_190_p2();
    void thread_or_ln7_4_fu_204_p2();
    void thread_or_ln7_5_fu_218_p2();
    void thread_or_ln7_6_fu_232_p2();
    void thread_or_ln7_fu_148_p2();
    void thread_select_ln7_1_fu_154_p3();
    void thread_select_ln7_2_fu_168_p3();
    void thread_select_ln7_3_fu_182_p3();
    void thread_select_ln7_4_fu_196_p3();
    void thread_select_ln7_5_fu_210_p3();
    void thread_select_ln7_6_fu_224_p3();
    void thread_select_ln7_fu_140_p3();
};

}

using namespace ap_rtl;

#endif
