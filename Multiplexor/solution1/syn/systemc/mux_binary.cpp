// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mux_binary.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mux_binary::ap_const_logic_1 = sc_dt::Log_1;
const bool mux_binary::ap_const_boolean_1 = true;
const sc_logic mux_binary::ap_const_logic_0 = sc_dt::Log_0;

mux_binary::mux_binary(sc_module_name name) : sc_module(name), mVcdFile(0) {
    top_mux_83_8_1_1_U53 = new top_mux_83_8_1_1<1,1,8,8,8,8,8,8,8,8,3,8>("top_mux_83_8_1_1_U53");
    top_mux_83_8_1_1_U53->din0(din_0_V_read);
    top_mux_83_8_1_1_U53->din1(din_1_V_read);
    top_mux_83_8_1_1_U53->din2(din_2_V_read);
    top_mux_83_8_1_1_U53->din3(din_3_V_read);
    top_mux_83_8_1_1_U53->din4(din_4_V_read);
    top_mux_83_8_1_1_U53->din5(din_5_V_read);
    top_mux_83_8_1_1_U53->din6(din_6_V_read);
    top_mux_83_8_1_1_U53->din7(din_7_V_read);
    top_mux_83_8_1_1_U53->din8(sel_V);
    top_mux_83_8_1_1_U53->dout(tmp_fu_78_p10);

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp_fu_78_p10 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mux_binary_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, din_0_V_read, "(port)din_0_V_read");
    sc_trace(mVcdFile, din_1_V_read, "(port)din_1_V_read");
    sc_trace(mVcdFile, din_2_V_read, "(port)din_2_V_read");
    sc_trace(mVcdFile, din_3_V_read, "(port)din_3_V_read");
    sc_trace(mVcdFile, din_4_V_read, "(port)din_4_V_read");
    sc_trace(mVcdFile, din_5_V_read, "(port)din_5_V_read");
    sc_trace(mVcdFile, din_6_V_read, "(port)din_6_V_read");
    sc_trace(mVcdFile, din_7_V_read, "(port)din_7_V_read");
    sc_trace(mVcdFile, sel_V, "(port)sel_V");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_fu_78_p10, "tmp_fu_78_p10");
#endif

    }
}

mux_binary::~mux_binary() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete top_mux_83_8_1_1_U53;
}

void mux_binary::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void mux_binary::thread_ap_return() {
    ap_return = tmp_fu_78_p10.read();
}

}

