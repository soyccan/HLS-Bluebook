// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _top_HH_
#define _top_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "max_algorithmic.h"
#include "max.h"
#include "mux_onehot_if.h"
#include "leading_ones_templat.h"
#include "mux_onehot.h"
#include "leading_ones_brutefo.h"
#include "leading_ones_log2.h"
#include "mux_binary2onehot_op.h"
#include "leading_ones.h"
#include "mux_binary_opt.h"
#include "mux_binary.h"
#include "mux_2to1.h"

namespace ap_rtl {

struct top : public sc_module {
    // Port declarations 36
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > leadone_in_V;
    sc_out< sc_lv<5> > leadone_out_V;
    sc_out< sc_logic > leadone_out_V_ap_vld;
    sc_out< sc_logic > leadone_ret;
    sc_out< sc_logic > leadone_ret_ap_vld;
    sc_in< sc_lv<8> > mux_in_0_V;
    sc_in< sc_lv<8> > mux_in_1_V;
    sc_in< sc_lv<8> > mux_in_2_V;
    sc_in< sc_lv<8> > mux_in_3_V;
    sc_in< sc_lv<8> > mux_in_4_V;
    sc_in< sc_lv<8> > mux_in_5_V;
    sc_in< sc_lv<8> > mux_in_6_V;
    sc_in< sc_lv<8> > mux_in_7_V;
    sc_in< sc_lv<8> > mux_sel_onehot_V;
    sc_in< sc_lv<3> > mux_sel0_V;
    sc_in< sc_lv<3> > mux_sel1_V;
    sc_in< sc_logic > mux_s;
    sc_out< sc_lv<8> > mux_ret_V;
    sc_out< sc_logic > mux_ret_V_ap_vld;
    sc_in< sc_lv<32> > max_in_0;
    sc_in< sc_lv<32> > max_in_1;
    sc_in< sc_lv<32> > max_in_2;
    sc_in< sc_lv<32> > max_in_3;
    sc_in< sc_lv<32> > max_in_4;
    sc_in< sc_lv<32> > max_in_5;
    sc_in< sc_lv<32> > max_in_6;
    sc_in< sc_lv<32> > max_in_7;
    sc_out< sc_lv<32> > max_out;
    sc_out< sc_logic > max_out_ap_vld;
    sc_in< sc_lv<32> > mode;


    // Module declarations
    top(sc_module_name name);
    SC_HAS_PROCESS(top);

    ~top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    max_algorithmic* grp_max_algorithmic_fu_284;
    max* grp_max_fu_305;
    mux_onehot_if* grp_mux_onehot_if_fu_326;
    leading_ones_templat* call_ret7_leading_ones_templat_fu_349;
    mux_onehot* op2_V_assign_2_s_mux_onehot_fu_355;
    leading_ones_brutefo* grp_leading_ones_brutefo_fu_378;
    leading_ones_log2* grp_leading_ones_log2_fu_384;
    mux_binary2onehot_op* op2_V_assign_4_s_mux_binary2onehot_op_fu_390;
    leading_ones* grp_leading_ones_fu_417;
    mux_binary_opt* op2_V_assign_5_s_mux_binary_opt_fu_423;
    mux_binary* op2_V_assign_1_s_mux_binary_fu_450;
    mux_2to1* op2_V_assign_s_mux_2to1_fu_473;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > reg_484;
    sc_signal< sc_lv<32> > reg_490;
    sc_signal< sc_lv<32> > reg_496;
    sc_signal< sc_lv<32> > reg_502;
    sc_signal< sc_lv<32> > reg_508;
    sc_signal< sc_lv<32> > reg_514;
    sc_signal< sc_lv<32> > reg_520;
    sc_signal< sc_lv<32> > reg_526;
    sc_signal< sc_lv<8> > mux_in_0_V_read_3_reg_588;
    sc_signal< sc_lv<8> > mux_in_1_V_read_3_reg_593;
    sc_signal< sc_lv<8> > mux_in_2_V_read_2_reg_598;
    sc_signal< sc_lv<8> > mux_in_3_V_read_2_reg_603;
    sc_signal< sc_lv<8> > mux_in_4_V_read_2_reg_608;
    sc_signal< sc_lv<8> > mux_in_5_V_read_2_reg_613;
    sc_signal< sc_lv<8> > mux_in_6_V_read_2_reg_618;
    sc_signal< sc_lv<8> > mux_in_7_V_read_2_reg_623;
    sc_signal< sc_logic > grp_max_algorithmic_fu_284_ap_start;
    sc_signal< sc_logic > grp_max_algorithmic_fu_284_ap_done;
    sc_signal< sc_logic > grp_max_algorithmic_fu_284_ap_idle;
    sc_signal< sc_logic > grp_max_algorithmic_fu_284_ap_ready;
    sc_signal< sc_lv<32> > grp_max_algorithmic_fu_284_ap_return;
    sc_signal< sc_logic > grp_max_fu_305_ap_start;
    sc_signal< sc_logic > grp_max_fu_305_ap_done;
    sc_signal< sc_logic > grp_max_fu_305_ap_idle;
    sc_signal< sc_logic > grp_max_fu_305_ap_ready;
    sc_signal< sc_lv<32> > grp_max_fu_305_ap_return;
    sc_signal< sc_logic > grp_mux_onehot_if_fu_326_ap_start;
    sc_signal< sc_logic > grp_mux_onehot_if_fu_326_ap_done;
    sc_signal< sc_logic > grp_mux_onehot_if_fu_326_ap_idle;
    sc_signal< sc_logic > grp_mux_onehot_if_fu_326_ap_ready;
    sc_signal< sc_lv<8> > grp_mux_onehot_if_fu_326_ap_return;
    sc_signal< sc_logic > call_ret7_leading_ones_templat_fu_349_ap_ready;
    sc_signal< sc_lv<1> > call_ret7_leading_ones_templat_fu_349_ap_return_0;
    sc_signal< sc_lv<5> > call_ret7_leading_ones_templat_fu_349_ap_return_1;
    sc_signal< sc_logic > op2_V_assign_2_s_mux_onehot_fu_355_ap_ready;
    sc_signal< sc_lv<8> > op2_V_assign_2_s_mux_onehot_fu_355_ap_return;
    sc_signal< sc_logic > grp_leading_ones_brutefo_fu_378_ap_start;
    sc_signal< sc_logic > grp_leading_ones_brutefo_fu_378_ap_done;
    sc_signal< sc_logic > grp_leading_ones_brutefo_fu_378_ap_idle;
    sc_signal< sc_logic > grp_leading_ones_brutefo_fu_378_ap_ready;
    sc_signal< sc_lv<1> > grp_leading_ones_brutefo_fu_378_ap_return_0;
    sc_signal< sc_lv<5> > grp_leading_ones_brutefo_fu_378_ap_return_1;
    sc_signal< sc_logic > grp_leading_ones_log2_fu_384_ap_start;
    sc_signal< sc_logic > grp_leading_ones_log2_fu_384_ap_done;
    sc_signal< sc_logic > grp_leading_ones_log2_fu_384_ap_idle;
    sc_signal< sc_logic > grp_leading_ones_log2_fu_384_ap_ready;
    sc_signal< sc_lv<1> > grp_leading_ones_log2_fu_384_ap_return_0;
    sc_signal< sc_lv<5> > grp_leading_ones_log2_fu_384_ap_return_1;
    sc_signal< sc_logic > op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_ready;
    sc_signal< sc_lv<8> > op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return;
    sc_signal< sc_logic > grp_leading_ones_fu_417_ap_start;
    sc_signal< sc_logic > grp_leading_ones_fu_417_ap_done;
    sc_signal< sc_logic > grp_leading_ones_fu_417_ap_idle;
    sc_signal< sc_logic > grp_leading_ones_fu_417_ap_ready;
    sc_signal< sc_lv<1> > grp_leading_ones_fu_417_ap_return_0;
    sc_signal< sc_lv<5> > grp_leading_ones_fu_417_ap_return_1;
    sc_signal< sc_logic > op2_V_assign_5_s_mux_binary_opt_fu_423_ap_ready;
    sc_signal< sc_lv<8> > op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return;
    sc_signal< sc_logic > op2_V_assign_1_s_mux_binary_fu_450_ap_ready;
    sc_signal< sc_lv<8> > op2_V_assign_1_s_mux_binary_fu_450_ap_return;
    sc_signal< sc_logic > op2_V_assign_s_mux_2to1_fu_473_ap_ready;
    sc_signal< sc_lv<8> > op2_V_assign_s_mux_2to1_fu_473_ap_return;
    sc_signal< sc_logic > grp_max_algorithmic_fu_284_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > grp_max_fu_305_ap_start_reg;
    sc_signal< sc_logic > grp_mux_onehot_if_fu_326_ap_start_reg;
    sc_signal< sc_logic > grp_leading_ones_brutefo_fu_378_ap_start_reg;
    sc_signal< sc_logic > grp_leading_ones_log2_fu_384_ap_start_reg;
    sc_signal< sc_logic > grp_leading_ones_fu_417_ap_start_reg;
    sc_signal< bool > ap_predicate_op146_call_state2;
    sc_signal< bool > ap_block_state2_on_subcall_done;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< bool > ap_condition_99;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const bool ap_const_boolean_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state2_on_subcall_done();
    void thread_ap_condition_99();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op146_call_state2();
    void thread_ap_ready();
    void thread_grp_leading_ones_brutefo_fu_378_ap_start();
    void thread_grp_leading_ones_fu_417_ap_start();
    void thread_grp_leading_ones_log2_fu_384_ap_start();
    void thread_grp_max_algorithmic_fu_284_ap_start();
    void thread_grp_max_fu_305_ap_start();
    void thread_grp_mux_onehot_if_fu_326_ap_start();
    void thread_leadone_out_V();
    void thread_leadone_out_V_ap_vld();
    void thread_leadone_ret();
    void thread_leadone_ret_ap_vld();
    void thread_max_out();
    void thread_max_out_ap_vld();
    void thread_mux_ret_V();
    void thread_mux_ret_V_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
