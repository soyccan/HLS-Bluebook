// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mux_2to1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mux_2to1::ap_const_logic_1 = sc_dt::Log_1;
const bool mux_2to1::ap_const_boolean_1 = true;
const sc_logic mux_2to1::ap_const_logic_0 = sc_dt::Log_0;

mux_2to1::mux_2to1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( din_0_V_read );
    sensitive << ( din_1_V_read );
    sensitive << ( select_ln6_fu_28_p0 );

    SC_METHOD(thread_select_ln6_fu_28_p0);
    sensitive << ( sel );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mux_2to1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, din_0_V_read, "(port)din_0_V_read");
    sc_trace(mVcdFile, din_1_V_read, "(port)din_1_V_read");
    sc_trace(mVcdFile, sel, "(port)sel");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, select_ln6_fu_28_p0, "select_ln6_fu_28_p0");
#endif

    }
}

mux_2to1::~mux_2to1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void mux_2to1::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void mux_2to1::thread_ap_return() {
    ap_return = (!select_ln6_fu_28_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln6_fu_28_p0.read()[0].to_bool())? din_1_V_read.read(): din_0_V_read.read());
}

void mux_2to1::thread_select_ln6_fu_28_p0() {
    select_ln6_fu_28_p0 =  (sc_lv<1>) (sel.read());
}

}

