-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity leading_ones_log2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    din_V : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of leading_ones_log2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal flag_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal flag_reg_281 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_reg_286 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_1_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln883_1_reg_292 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln25_1_fu_128_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln25_1_reg_297 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1503_1_reg_302 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln_fu_72_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1355_fu_82_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln25_fu_92_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_fu_104_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln25_fu_100_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln25_2_fu_120_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln25_1_fu_142_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln26_fu_149_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln883_2_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_3_fu_156_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln25_fu_174_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln25_4_fu_168_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1503_2_fu_188_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln25_5_fu_180_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln883_3_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_1_fu_204_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_218_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_226_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_6_fu_210_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln25_2_fu_242_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_7_fu_234_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_252_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln25_2_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ssdm_int_V_write_ass_fu_262_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                flag_reg_281 <= flag_fu_66_p2;
                icmp_ln883_1_reg_292 <= icmp_ln883_1_fu_114_p2;
                icmp_ln883_reg_286 <= icmp_ln883_fu_86_p2;
                trunc_ln1503_1_reg_302 <= select_ln25_2_fu_120_p3(7 downto 4);
                trunc_ln25_1_reg_297 <= trunc_ln25_1_fu_128_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= flag_reg_281;
    ap_return_1 <= ssdm_int_V_write_ass_fu_262_p3;
    flag_fu_66_p2 <= "0" when (din_V = ap_const_lv32_0) else "1";
    icmp_ln883_1_fu_114_p2 <= "1" when (trunc_ln2_fu_104_p4 = ap_const_lv8_0) else "0";
    icmp_ln883_2_fu_163_p2 <= "1" when (trunc_ln1503_1_reg_302 = ap_const_lv4_0) else "0";
    icmp_ln883_3_fu_198_p2 <= "1" when (trunc_ln1503_2_fu_188_p4 = ap_const_lv2_0) else "0";
    icmp_ln883_fu_86_p2 <= "1" when (trunc_ln_fu_72_p4 = ap_const_lv16_0) else "0";
    or_ln25_1_fu_204_p2 <= (select_ln25_5_fu_180_p3 or ap_const_lv5_2);
    or_ln25_2_fu_246_p2 <= (trunc_ln25_2_fu_242_p1 or select_ln25_7_fu_234_p3);
    or_ln25_fu_174_p2 <= (select_ln25_3_fu_156_p3 or ap_const_lv5_4);
    select_ln25_1_fu_142_p3 <= 
        ap_const_lv5_0 when (icmp_ln883_reg_286(0) = '1') else 
        ap_const_lv5_10;
    select_ln25_2_fu_120_p3 <= 
        trunc_ln25_fu_100_p1 when (icmp_ln883_1_fu_114_p2(0) = '1') else 
        trunc_ln2_fu_104_p4;
    select_ln25_3_fu_156_p3 <= 
        select_ln25_1_fu_142_p3 when (icmp_ln883_1_reg_292(0) = '1') else 
        select_ln26_fu_149_p3;
    select_ln25_4_fu_168_p3 <= 
        trunc_ln25_1_reg_297 when (icmp_ln883_2_fu_163_p2(0) = '1') else 
        trunc_ln1503_1_reg_302;
    select_ln25_5_fu_180_p3 <= 
        select_ln25_3_fu_156_p3 when (icmp_ln883_2_fu_163_p2(0) = '1') else 
        or_ln25_fu_174_p2;
    select_ln25_6_fu_210_p3 <= 
        select_ln25_5_fu_180_p3 when (icmp_ln883_3_fu_198_p2(0) = '1') else 
        or_ln25_1_fu_204_p2;
    select_ln25_7_fu_234_p3 <= 
        tmp_fu_218_p3 when (icmp_ln883_3_fu_198_p2(0) = '1') else 
        tmp_1_fu_226_p3;
    select_ln25_fu_92_p3 <= 
        trunc_ln1355_fu_82_p1 when (icmp_ln883_fu_86_p2(0) = '1') else 
        trunc_ln_fu_72_p4;
    select_ln26_fu_149_p3 <= 
        ap_const_lv5_8 when (icmp_ln883_reg_286(0) = '1') else 
        ap_const_lv5_18;
    ssdm_int_V_write_ass_fu_262_p3 <= (tmp_2_fu_252_p4 & or_ln25_2_fu_246_p2);
    tmp_1_fu_226_p3 <= select_ln25_4_fu_168_p3(3 downto 3);
    tmp_2_fu_252_p4 <= select_ln25_6_fu_210_p3(4 downto 1);
    tmp_fu_218_p3 <= select_ln25_4_fu_168_p3(1 downto 1);
    trunc_ln1355_fu_82_p1 <= din_V(16 - 1 downto 0);
    trunc_ln1503_2_fu_188_p4 <= select_ln25_4_fu_168_p3(3 downto 2);
    trunc_ln25_1_fu_128_p1 <= select_ln25_2_fu_120_p3(4 - 1 downto 0);
    trunc_ln25_2_fu_242_p1 <= select_ln25_6_fu_210_p3(1 - 1 downto 0);
    trunc_ln25_fu_100_p1 <= select_ln25_fu_92_p3(8 - 1 downto 0);
    trunc_ln2_fu_104_p4 <= select_ln25_fu_92_p3(15 downto 8);
    trunc_ln_fu_72_p4 <= din_V(31 downto 16);
end behav;
