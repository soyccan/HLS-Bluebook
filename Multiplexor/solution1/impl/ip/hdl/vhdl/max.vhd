-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    din_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
    din_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
    din_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
    din_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
    din_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
    din_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
    din_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
    din_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m0_1_fu_100_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m0_1_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_2_fu_142_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_2_reg_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln8_fu_66_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_1_fu_80_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m0_fu_72_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_fu_86_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln8_2_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_3_fu_108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_4_fu_122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m0_2_fu_114_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m1_1_fu_128_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln8_5_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln8_6_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                m0_1_reg_160 <= m0_1_fu_100_p3;
                m1_2_reg_166 <= m1_2_fu_142_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        m0_1_reg_160 when (icmp_ln8_6_fu_150_p2(0) = '1') else 
        m1_2_reg_166;
    icmp_ln8_1_fu_80_p2 <= "1" when (signed(din_2_read) > signed(din_3_read)) else "0";
    icmp_ln8_2_fu_94_p2 <= "1" when (signed(m0_fu_72_p3) > signed(m1_fu_86_p3)) else "0";
    icmp_ln8_3_fu_108_p2 <= "1" when (signed(din_4_read) > signed(din_5_read)) else "0";
    icmp_ln8_4_fu_122_p2 <= "1" when (signed(din_6_read) > signed(din_7_read)) else "0";
    icmp_ln8_5_fu_136_p2 <= "1" when (signed(m0_2_fu_114_p3) > signed(m1_1_fu_128_p3)) else "0";
    icmp_ln8_6_fu_150_p2 <= "1" when (signed(m0_1_reg_160) > signed(m1_2_reg_166)) else "0";
    icmp_ln8_fu_66_p2 <= "1" when (signed(din_0_read) > signed(din_1_read)) else "0";
    m0_1_fu_100_p3 <= 
        m0_fu_72_p3 when (icmp_ln8_2_fu_94_p2(0) = '1') else 
        m1_fu_86_p3;
    m0_2_fu_114_p3 <= 
        din_4_read when (icmp_ln8_3_fu_108_p2(0) = '1') else 
        din_5_read;
    m0_fu_72_p3 <= 
        din_0_read when (icmp_ln8_fu_66_p2(0) = '1') else 
        din_1_read;
    m1_1_fu_128_p3 <= 
        din_6_read when (icmp_ln8_4_fu_122_p2(0) = '1') else 
        din_7_read;
    m1_2_fu_142_p3 <= 
        m0_2_fu_114_p3 when (icmp_ln8_5_fu_136_p2(0) = '1') else 
        m1_1_fu_128_p3;
    m1_fu_86_p3 <= 
        din_2_read when (icmp_ln8_1_fu_80_p2(0) = '1') else 
        din_3_read;
end behav;
