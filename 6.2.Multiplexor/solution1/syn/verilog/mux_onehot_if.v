// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mux_onehot_if (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din_0_V_read,
        din_1_V_read,
        din_2_V_read,
        din_3_V_read,
        din_4_V_read,
        din_5_V_read,
        din_6_V_read,
        din_7_V_read,
        sel_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] din_0_V_read;
input  [7:0] din_1_V_read;
input  [7:0] din_2_V_read;
input  [7:0] din_3_V_read;
input  [7:0] din_4_V_read;
input  [7:0] din_5_V_read;
input  [7:0] din_6_V_read;
input  [7:0] din_7_V_read;
input  [7:0] sel_V;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln879_fu_94_p2;
reg   [0:0] icmp_ln879_reg_338;
wire   [0:0] icmp_ln879_1_fu_100_p2;
reg   [0:0] icmp_ln879_1_reg_345;
wire   [0:0] icmp_ln879_7_fu_136_p2;
reg   [0:0] icmp_ln879_7_reg_350;
wire   [0:0] and_ln879_1_fu_154_p2;
reg   [0:0] and_ln879_1_reg_355;
wire   [0:0] and_ln879_3_fu_190_p2;
reg   [0:0] and_ln879_3_reg_361;
wire   [0:0] and_ln879_5_fu_226_p2;
reg   [0:0] and_ln879_5_reg_366;
wire   [0:0] or_ln879_5_fu_232_p2;
reg   [0:0] or_ln879_5_reg_371;
wire   [0:0] or_ln879_9_fu_244_p2;
reg   [0:0] or_ln879_9_reg_376;
wire    ap_CS_fsm_state2;
wire   [0:0] or_ln879_fu_142_p2;
wire   [0:0] icmp_ln879_2_fu_106_p2;
wire   [0:0] xor_ln879_1_fu_148_p2;
wire   [0:0] or_ln879_1_fu_160_p2;
wire   [0:0] icmp_ln879_3_fu_112_p2;
wire   [0:0] xor_ln879_2_fu_166_p2;
wire   [0:0] or_ln879_2_fu_178_p2;
wire   [0:0] icmp_ln879_4_fu_118_p2;
wire   [0:0] xor_ln879_3_fu_184_p2;
wire   [0:0] or_ln879_3_fu_196_p2;
wire   [0:0] icmp_ln879_5_fu_124_p2;
wire   [0:0] xor_ln879_4_fu_202_p2;
wire   [0:0] or_ln879_4_fu_214_p2;
wire   [0:0] icmp_ln879_6_fu_130_p2;
wire   [0:0] xor_ln879_5_fu_220_p2;
wire   [0:0] and_ln879_4_fu_208_p2;
wire   [0:0] and_ln879_2_fu_172_p2;
wire   [0:0] or_ln879_6_fu_238_p2;
wire   [0:0] xor_ln879_fu_250_p2;
wire   [0:0] and_ln879_fu_255_p2;
wire   [7:0] select_ln879_fu_260_p3;
wire   [7:0] select_ln879_1_fu_267_p3;
wire   [0:0] or_ln879_7_fu_281_p2;
wire   [7:0] select_ln879_2_fu_274_p3;
wire   [7:0] select_ln879_3_fu_286_p3;
wire   [0:0] or_ln879_8_fu_293_p2;
wire   [7:0] select_ln879_4_fu_297_p3;
wire   [7:0] select_ln879_5_fu_304_p3;
wire   [0:0] or_ln879_10_fu_312_p2;
wire   [0:0] or_ln879_11_fu_325_p2;
wire   [7:0] select_ln879_6_fu_318_p3;
wire   [7:0] select_ln879_7_fu_330_p3;
reg   [7:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= select_ln879_7_fu_330_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        and_ln879_1_reg_355 <= and_ln879_1_fu_154_p2;
        and_ln879_3_reg_361 <= and_ln879_3_fu_190_p2;
        and_ln879_5_reg_366 <= and_ln879_5_fu_226_p2;
        icmp_ln879_1_reg_345 <= icmp_ln879_1_fu_100_p2;
        icmp_ln879_7_reg_350 <= icmp_ln879_7_fu_136_p2;
        icmp_ln879_reg_338 <= icmp_ln879_fu_94_p2;
        or_ln879_5_reg_371 <= or_ln879_5_fu_232_p2;
        or_ln879_9_reg_376 <= or_ln879_9_fu_244_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = select_ln879_7_fu_330_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln879_1_fu_154_p2 = (xor_ln879_1_fu_148_p2 & icmp_ln879_2_fu_106_p2);

assign and_ln879_2_fu_172_p2 = (xor_ln879_2_fu_166_p2 & icmp_ln879_3_fu_112_p2);

assign and_ln879_3_fu_190_p2 = (xor_ln879_3_fu_184_p2 & icmp_ln879_4_fu_118_p2);

assign and_ln879_4_fu_208_p2 = (xor_ln879_4_fu_202_p2 & icmp_ln879_5_fu_124_p2);

assign and_ln879_5_fu_226_p2 = (xor_ln879_5_fu_220_p2 & icmp_ln879_6_fu_130_p2);

assign and_ln879_fu_255_p2 = (xor_ln879_fu_250_p2 & icmp_ln879_1_reg_345);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign icmp_ln879_1_fu_100_p2 = ((sel_V == 8'd2) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_106_p2 = ((sel_V == 8'd4) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_112_p2 = ((sel_V == 8'd8) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_118_p2 = ((sel_V == 8'd16) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_124_p2 = ((sel_V == 8'd32) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_130_p2 = ((sel_V == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln879_7_fu_136_p2 = ((sel_V == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_94_p2 = ((sel_V == 8'd1) ? 1'b1 : 1'b0);

assign or_ln879_10_fu_312_p2 = (or_ln879_8_fu_293_p2 | or_ln879_7_fu_281_p2);

assign or_ln879_11_fu_325_p2 = (or_ln879_9_reg_376 | or_ln879_10_fu_312_p2);

assign or_ln879_1_fu_160_p2 = (or_ln879_fu_142_p2 | icmp_ln879_2_fu_106_p2);

assign or_ln879_2_fu_178_p2 = (or_ln879_1_fu_160_p2 | icmp_ln879_3_fu_112_p2);

assign or_ln879_3_fu_196_p2 = (or_ln879_2_fu_178_p2 | icmp_ln879_4_fu_118_p2);

assign or_ln879_4_fu_214_p2 = (or_ln879_3_fu_196_p2 | icmp_ln879_5_fu_124_p2);

assign or_ln879_5_fu_232_p2 = (and_ln879_5_fu_226_p2 | and_ln879_4_fu_208_p2);

assign or_ln879_6_fu_238_p2 = (and_ln879_3_fu_190_p2 | and_ln879_2_fu_172_p2);

assign or_ln879_7_fu_281_p2 = (and_ln879_fu_255_p2 | and_ln879_1_reg_355);

assign or_ln879_8_fu_293_p2 = (icmp_ln879_reg_338 | icmp_ln879_7_reg_350);

assign or_ln879_9_fu_244_p2 = (or_ln879_6_fu_238_p2 | or_ln879_5_fu_232_p2);

assign or_ln879_fu_142_p2 = (icmp_ln879_fu_94_p2 | icmp_ln879_1_fu_100_p2);

assign select_ln879_1_fu_267_p3 = ((and_ln879_3_reg_361[0:0] === 1'b1) ? din_4_V_read : din_3_V_read);

assign select_ln879_2_fu_274_p3 = ((and_ln879_1_reg_355[0:0] === 1'b1) ? din_2_V_read : din_1_V_read);

assign select_ln879_3_fu_286_p3 = ((icmp_ln879_reg_338[0:0] === 1'b1) ? din_0_V_read : din_7_V_read);

assign select_ln879_4_fu_297_p3 = ((or_ln879_5_reg_371[0:0] === 1'b1) ? select_ln879_fu_260_p3 : select_ln879_1_fu_267_p3);

assign select_ln879_5_fu_304_p3 = ((or_ln879_7_fu_281_p2[0:0] === 1'b1) ? select_ln879_2_fu_274_p3 : select_ln879_3_fu_286_p3);

assign select_ln879_6_fu_318_p3 = ((or_ln879_9_reg_376[0:0] === 1'b1) ? select_ln879_4_fu_297_p3 : select_ln879_5_fu_304_p3);

assign select_ln879_7_fu_330_p3 = ((or_ln879_11_fu_325_p2[0:0] === 1'b1) ? select_ln879_6_fu_318_p3 : 8'd0);

assign select_ln879_fu_260_p3 = ((and_ln879_5_reg_366[0:0] === 1'b1) ? din_6_V_read : din_5_V_read);

assign xor_ln879_1_fu_148_p2 = (or_ln879_fu_142_p2 ^ 1'd1);

assign xor_ln879_2_fu_166_p2 = (or_ln879_1_fu_160_p2 ^ 1'd1);

assign xor_ln879_3_fu_184_p2 = (or_ln879_2_fu_178_p2 ^ 1'd1);

assign xor_ln879_4_fu_202_p2 = (or_ln879_3_fu_196_p2 ^ 1'd1);

assign xor_ln879_5_fu_220_p2 = (or_ln879_4_fu_214_p2 ^ 1'd1);

assign xor_ln879_fu_250_p2 = (icmp_ln879_reg_338 ^ 1'd1);

endmodule //mux_onehot_if
