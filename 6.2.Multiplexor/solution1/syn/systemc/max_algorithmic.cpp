// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "max_algorithmic.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic max_algorithmic::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic max_algorithmic::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> max_algorithmic::ap_ST_fsm_state1 = "1";
const sc_lv<5> max_algorithmic::ap_ST_fsm_state2 = "10";
const sc_lv<5> max_algorithmic::ap_ST_fsm_state3 = "100";
const sc_lv<5> max_algorithmic::ap_ST_fsm_state4 = "1000";
const sc_lv<5> max_algorithmic::ap_ST_fsm_state5 = "10000";
const sc_lv<32> max_algorithmic::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> max_algorithmic::ap_const_lv32_1 = "1";
const sc_lv<32> max_algorithmic::ap_const_lv32_2 = "10";
const sc_lv<32> max_algorithmic::ap_const_lv32_3 = "11";
const sc_lv<32> max_algorithmic::ap_const_lv32_4 = "100";
const sc_lv<2> max_algorithmic::ap_const_lv2_2 = "10";
const sc_lv<2> max_algorithmic::ap_const_lv2_3 = "11";
const sc_lv<3> max_algorithmic::ap_const_lv3_4 = "100";
const sc_lv<3> max_algorithmic::ap_const_lv3_5 = "101";
const sc_lv<3> max_algorithmic::ap_const_lv3_6 = "110";
const sc_lv<3> max_algorithmic::ap_const_lv3_7 = "111";
const bool max_algorithmic::ap_const_boolean_1 = true;

max_algorithmic::max_algorithmic(sc_module_name name) : sc_module(name), mVcdFile(0) {
    top_mux_83_32_1_1_U71 = new top_mux_83_32_1_1<1,1,32,32,32,32,32,32,32,32,3,32>("top_mux_83_32_1_1_U71");
    top_mux_83_32_1_1_U71->din0(din_0_read);
    top_mux_83_32_1_1_U71->din1(din_1_read);
    top_mux_83_32_1_1_U71->din2(din_2_read);
    top_mux_83_32_1_1_U71->din3(din_2_read);
    top_mux_83_32_1_1_U71->din4(din_2_read);
    top_mux_83_32_1_1_U71->din5(din_2_read);
    top_mux_83_32_1_1_U71->din6(din_2_read);
    top_mux_83_32_1_1_U71->din7(din_2_read);
    top_mux_83_32_1_1_U71->din8(phi_ln15_1_fu_115_p9);
    top_mux_83_32_1_1_U71->dout(phi_ln15_1_fu_115_p10);
    top_mux_83_32_1_1_U72 = new top_mux_83_32_1_1<1,1,32,32,32,32,32,32,32,32,3,32>("top_mux_83_32_1_1_U72");
    top_mux_83_32_1_1_U72->din0(din_0_read);
    top_mux_83_32_1_1_U72->din1(din_1_read);
    top_mux_83_32_1_1_U72->din2(din_2_read);
    top_mux_83_32_1_1_U72->din3(din_3_read);
    top_mux_83_32_1_1_U72->din4(din_3_read);
    top_mux_83_32_1_1_U72->din5(din_3_read);
    top_mux_83_32_1_1_U72->din6(din_3_read);
    top_mux_83_32_1_1_U72->din7(din_3_read);
    top_mux_83_32_1_1_U72->din8(phi_ln15_2_fu_146_p9);
    top_mux_83_32_1_1_U72->dout(phi_ln15_2_fu_146_p10);
    top_mux_83_32_1_1_U73 = new top_mux_83_32_1_1<1,1,32,32,32,32,32,32,32,32,3,32>("top_mux_83_32_1_1_U73");
    top_mux_83_32_1_1_U73->din0(din_0_read);
    top_mux_83_32_1_1_U73->din1(din_1_read);
    top_mux_83_32_1_1_U73->din2(din_2_read);
    top_mux_83_32_1_1_U73->din3(din_3_read);
    top_mux_83_32_1_1_U73->din4(din_4_read);
    top_mux_83_32_1_1_U73->din5(din_4_read);
    top_mux_83_32_1_1_U73->din6(din_4_read);
    top_mux_83_32_1_1_U73->din7(din_4_read);
    top_mux_83_32_1_1_U73->din8(phi_ln15_3_fu_177_p9);
    top_mux_83_32_1_1_U73->dout(phi_ln15_3_fu_177_p10);
    top_mux_83_32_1_1_U74 = new top_mux_83_32_1_1<1,1,32,32,32,32,32,32,32,32,3,32>("top_mux_83_32_1_1_U74");
    top_mux_83_32_1_1_U74->din0(din_0_read);
    top_mux_83_32_1_1_U74->din1(din_1_read);
    top_mux_83_32_1_1_U74->din2(din_2_read);
    top_mux_83_32_1_1_U74->din3(din_3_read);
    top_mux_83_32_1_1_U74->din4(din_4_read);
    top_mux_83_32_1_1_U74->din5(din_5_read);
    top_mux_83_32_1_1_U74->din6(din_5_read);
    top_mux_83_32_1_1_U74->din7(din_5_read);
    top_mux_83_32_1_1_U74->din8(select_ln14_2_fu_201_p3);
    top_mux_83_32_1_1_U74->dout(phi_ln15_4_fu_207_p10);
    top_mux_83_32_1_1_U75 = new top_mux_83_32_1_1<1,1,32,32,32,32,32,32,32,32,3,32>("top_mux_83_32_1_1_U75");
    top_mux_83_32_1_1_U75->din0(din_0_read);
    top_mux_83_32_1_1_U75->din1(din_1_read);
    top_mux_83_32_1_1_U75->din2(din_2_read);
    top_mux_83_32_1_1_U75->din3(din_3_read);
    top_mux_83_32_1_1_U75->din4(din_4_read);
    top_mux_83_32_1_1_U75->din5(din_5_read);
    top_mux_83_32_1_1_U75->din6(din_6_read);
    top_mux_83_32_1_1_U75->din7(din_6_read);
    top_mux_83_32_1_1_U75->din8(select_ln15_3_reg_368);
    top_mux_83_32_1_1_U75->dout(phi_ln15_5_fu_235_p10);
    top_mux_83_32_1_1_U76 = new top_mux_83_32_1_1<1,1,32,32,32,32,32,32,32,32,3,32>("top_mux_83_32_1_1_U76");
    top_mux_83_32_1_1_U76->din0(din_0_read);
    top_mux_83_32_1_1_U76->din1(din_1_read);
    top_mux_83_32_1_1_U76->din2(din_2_read);
    top_mux_83_32_1_1_U76->din3(din_3_read);
    top_mux_83_32_1_1_U76->din4(din_4_read);
    top_mux_83_32_1_1_U76->din5(din_5_read);
    top_mux_83_32_1_1_U76->din6(din_6_read);
    top_mux_83_32_1_1_U76->din7(din_7_read);
    top_mux_83_32_1_1_U76->din8(tmp_fu_261_p9);
    top_mux_83_32_1_1_U76->dout(tmp_fu_261_p10);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_fu_261_p10 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_icmp_ln15_1_fu_94_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( din_2_read );
    sensitive << ( select_ln15_fu_86_p3 );

    SC_METHOD(thread_icmp_ln15_2_fu_129_p2);
    sensitive << ( din_3_read );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( phi_ln15_1_fu_115_p10 );

    SC_METHOD(thread_icmp_ln15_3_fu_165_p2);
    sensitive << ( din_4_read );
    sensitive << ( phi_ln15_2_reg_330 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln15_4_fu_195_p2);
    sensitive << ( din_5_read );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( phi_ln15_3_fu_177_p10 );

    SC_METHOD(thread_icmp_ln15_5_fu_221_p2);
    sensitive << ( din_6_read );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( phi_ln15_4_fu_207_p10 );

    SC_METHOD(thread_icmp_ln15_6_fu_248_p2);
    sensitive << ( din_7_read );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( phi_ln15_5_fu_235_p10 );

    SC_METHOD(thread_icmp_ln15_fu_80_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( din_0_read );
    sensitive << ( din_1_read );

    SC_METHOD(thread_phi_ln15_1_fu_115_p9);
    sensitive << ( select_ln15_1_reg_311 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_phi_ln15_2_fu_146_p9);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( select_ln15_2_fu_135_p3 );

    SC_METHOD(thread_phi_ln15_3_fu_177_p9);
    sensitive << ( zext_ln15_2_reg_325 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln15_3_fu_165_p2 );

    SC_METHOD(thread_select_ln14_1_fu_170_p3);
    sensitive << ( zext_ln15_2_reg_325 );
    sensitive << ( icmp_ln15_3_fu_165_p2 );

    SC_METHOD(thread_select_ln14_2_fu_201_p3);
    sensitive << ( select_ln14_1_reg_351 );
    sensitive << ( icmp_ln15_4_reg_356 );

    SC_METHOD(thread_select_ln15_1_fu_104_p3);
    sensitive << ( icmp_ln15_1_fu_94_p2 );
    sensitive << ( zext_ln15_fu_100_p1 );

    SC_METHOD(thread_select_ln15_2_fu_135_p3);
    sensitive << ( select_ln15_1_reg_311 );
    sensitive << ( icmp_ln15_2_fu_129_p2 );

    SC_METHOD(thread_select_ln15_3_fu_227_p3);
    sensitive << ( select_ln14_2_fu_201_p3 );
    sensitive << ( icmp_ln15_5_fu_221_p2 );

    SC_METHOD(thread_select_ln15_fu_86_p3);
    sensitive << ( din_0_read );
    sensitive << ( din_1_read );
    sensitive << ( icmp_ln15_fu_80_p2 );

    SC_METHOD(thread_tmp_fu_261_p9);
    sensitive << ( select_ln15_3_reg_368 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln15_6_fu_248_p2 );

    SC_METHOD(thread_zext_ln15_2_fu_142_p1);
    sensitive << ( select_ln15_2_fu_135_p3 );

    SC_METHOD(thread_zext_ln15_fu_100_p1);
    sensitive << ( icmp_ln15_fu_80_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "00001";
    ap_return_preg = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "max_algorithmic_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, din_0_read, "(port)din_0_read");
    sc_trace(mVcdFile, din_1_read, "(port)din_1_read");
    sc_trace(mVcdFile, din_2_read, "(port)din_2_read");
    sc_trace(mVcdFile, din_3_read, "(port)din_3_read");
    sc_trace(mVcdFile, din_4_read, "(port)din_4_read");
    sc_trace(mVcdFile, din_5_read, "(port)din_5_read");
    sc_trace(mVcdFile, din_6_read, "(port)din_6_read");
    sc_trace(mVcdFile, din_7_read, "(port)din_7_read");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, select_ln15_1_fu_104_p3, "select_ln15_1_fu_104_p3");
    sc_trace(mVcdFile, select_ln15_1_reg_311, "select_ln15_1_reg_311");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln15_2_fu_142_p1, "zext_ln15_2_fu_142_p1");
    sc_trace(mVcdFile, zext_ln15_2_reg_325, "zext_ln15_2_reg_325");
    sc_trace(mVcdFile, phi_ln15_2_fu_146_p10, "phi_ln15_2_fu_146_p10");
    sc_trace(mVcdFile, phi_ln15_2_reg_330, "phi_ln15_2_reg_330");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, select_ln14_1_fu_170_p3, "select_ln14_1_fu_170_p3");
    sc_trace(mVcdFile, select_ln14_1_reg_351, "select_ln14_1_reg_351");
    sc_trace(mVcdFile, icmp_ln15_4_fu_195_p2, "icmp_ln15_4_fu_195_p2");
    sc_trace(mVcdFile, icmp_ln15_4_reg_356, "icmp_ln15_4_reg_356");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, select_ln15_3_fu_227_p3, "select_ln15_3_fu_227_p3");
    sc_trace(mVcdFile, select_ln15_3_reg_368, "select_ln15_3_reg_368");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln15_fu_80_p2, "icmp_ln15_fu_80_p2");
    sc_trace(mVcdFile, select_ln15_fu_86_p3, "select_ln15_fu_86_p3");
    sc_trace(mVcdFile, icmp_ln15_1_fu_94_p2, "icmp_ln15_1_fu_94_p2");
    sc_trace(mVcdFile, zext_ln15_fu_100_p1, "zext_ln15_fu_100_p1");
    sc_trace(mVcdFile, phi_ln15_1_fu_115_p9, "phi_ln15_1_fu_115_p9");
    sc_trace(mVcdFile, phi_ln15_1_fu_115_p10, "phi_ln15_1_fu_115_p10");
    sc_trace(mVcdFile, icmp_ln15_2_fu_129_p2, "icmp_ln15_2_fu_129_p2");
    sc_trace(mVcdFile, select_ln15_2_fu_135_p3, "select_ln15_2_fu_135_p3");
    sc_trace(mVcdFile, phi_ln15_2_fu_146_p9, "phi_ln15_2_fu_146_p9");
    sc_trace(mVcdFile, icmp_ln15_3_fu_165_p2, "icmp_ln15_3_fu_165_p2");
    sc_trace(mVcdFile, phi_ln15_3_fu_177_p9, "phi_ln15_3_fu_177_p9");
    sc_trace(mVcdFile, phi_ln15_3_fu_177_p10, "phi_ln15_3_fu_177_p10");
    sc_trace(mVcdFile, select_ln14_2_fu_201_p3, "select_ln14_2_fu_201_p3");
    sc_trace(mVcdFile, phi_ln15_4_fu_207_p10, "phi_ln15_4_fu_207_p10");
    sc_trace(mVcdFile, icmp_ln15_5_fu_221_p2, "icmp_ln15_5_fu_221_p2");
    sc_trace(mVcdFile, phi_ln15_5_fu_235_p10, "phi_ln15_5_fu_235_p10");
    sc_trace(mVcdFile, icmp_ln15_6_fu_248_p2, "icmp_ln15_6_fu_248_p2");
    sc_trace(mVcdFile, tmp_fu_261_p9, "tmp_fu_261_p9");
    sc_trace(mVcdFile, tmp_fu_261_p10, "tmp_fu_261_p10");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

max_algorithmic::~max_algorithmic() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete top_mux_83_32_1_1_U71;
    delete top_mux_83_32_1_1_U72;
    delete top_mux_83_32_1_1_U73;
    delete top_mux_83_32_1_1_U74;
    delete top_mux_83_32_1_1_U75;
    delete top_mux_83_32_1_1_U76;
}

void max_algorithmic::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_return_preg = tmp_fu_261_p10.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        icmp_ln15_4_reg_356 = icmp_ln15_4_fu_195_p2.read();
        select_ln14_1_reg_351 = select_ln14_1_fu_170_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        phi_ln15_2_reg_330 = phi_ln15_2_fu_146_p10.read();
        zext_ln15_2_reg_325 = zext_ln15_2_fu_142_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        select_ln15_1_reg_311 = select_ln15_1_fu_104_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        select_ln15_3_reg_368 = select_ln15_3_fu_227_p3.read();
    }
}

void max_algorithmic::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void max_algorithmic::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void max_algorithmic::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void max_algorithmic::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void max_algorithmic::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void max_algorithmic::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void max_algorithmic::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void max_algorithmic::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void max_algorithmic::thread_ap_return() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_return = tmp_fu_261_p10.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void max_algorithmic::thread_icmp_ln15_1_fu_94_p2() {
    icmp_ln15_1_fu_94_p2 = (!select_ln15_fu_86_p3.read().is_01() || !din_2_read.read().is_01())? sc_lv<1>(): (sc_bigint<32>(select_ln15_fu_86_p3.read()) < sc_bigint<32>(din_2_read.read()));
}

void max_algorithmic::thread_icmp_ln15_2_fu_129_p2() {
    icmp_ln15_2_fu_129_p2 = (!phi_ln15_1_fu_115_p10.read().is_01() || !din_3_read.read().is_01())? sc_lv<1>(): (sc_bigint<32>(phi_ln15_1_fu_115_p10.read()) < sc_bigint<32>(din_3_read.read()));
}

void max_algorithmic::thread_icmp_ln15_3_fu_165_p2() {
    icmp_ln15_3_fu_165_p2 = (!phi_ln15_2_reg_330.read().is_01() || !din_4_read.read().is_01())? sc_lv<1>(): (sc_bigint<32>(phi_ln15_2_reg_330.read()) < sc_bigint<32>(din_4_read.read()));
}

void max_algorithmic::thread_icmp_ln15_4_fu_195_p2() {
    icmp_ln15_4_fu_195_p2 = (!phi_ln15_3_fu_177_p10.read().is_01() || !din_5_read.read().is_01())? sc_lv<1>(): (sc_bigint<32>(phi_ln15_3_fu_177_p10.read()) < sc_bigint<32>(din_5_read.read()));
}

void max_algorithmic::thread_icmp_ln15_5_fu_221_p2() {
    icmp_ln15_5_fu_221_p2 = (!phi_ln15_4_fu_207_p10.read().is_01() || !din_6_read.read().is_01())? sc_lv<1>(): (sc_bigint<32>(phi_ln15_4_fu_207_p10.read()) < sc_bigint<32>(din_6_read.read()));
}

void max_algorithmic::thread_icmp_ln15_6_fu_248_p2() {
    icmp_ln15_6_fu_248_p2 = (!phi_ln15_5_fu_235_p10.read().is_01() || !din_7_read.read().is_01())? sc_lv<1>(): (sc_bigint<32>(phi_ln15_5_fu_235_p10.read()) < sc_bigint<32>(din_7_read.read()));
}

void max_algorithmic::thread_icmp_ln15_fu_80_p2() {
    icmp_ln15_fu_80_p2 = (!din_1_read.read().is_01() || !din_0_read.read().is_01())? sc_lv<1>(): (sc_bigint<32>(din_1_read.read()) > sc_bigint<32>(din_0_read.read()));
}

void max_algorithmic::thread_phi_ln15_1_fu_115_p9() {
    phi_ln15_1_fu_115_p9 = esl_zext<3,2>(select_ln15_1_reg_311.read());
}

void max_algorithmic::thread_phi_ln15_2_fu_146_p9() {
    phi_ln15_2_fu_146_p9 = esl_zext<3,2>(select_ln15_2_fu_135_p3.read());
}

void max_algorithmic::thread_phi_ln15_3_fu_177_p9() {
    phi_ln15_3_fu_177_p9 = (!icmp_ln15_3_fu_165_p2.read()[0].is_01())? sc_lv<3>(): ((icmp_ln15_3_fu_165_p2.read()[0].to_bool())? ap_const_lv3_4: zext_ln15_2_reg_325.read());
}

void max_algorithmic::thread_select_ln14_1_fu_170_p3() {
    select_ln14_1_fu_170_p3 = (!icmp_ln15_3_fu_165_p2.read()[0].is_01())? sc_lv<3>(): ((icmp_ln15_3_fu_165_p2.read()[0].to_bool())? ap_const_lv3_4: zext_ln15_2_reg_325.read());
}

void max_algorithmic::thread_select_ln14_2_fu_201_p3() {
    select_ln14_2_fu_201_p3 = (!icmp_ln15_4_reg_356.read()[0].is_01())? sc_lv<3>(): ((icmp_ln15_4_reg_356.read()[0].to_bool())? ap_const_lv3_5: select_ln14_1_reg_351.read());
}

void max_algorithmic::thread_select_ln15_1_fu_104_p3() {
    select_ln15_1_fu_104_p3 = (!icmp_ln15_1_fu_94_p2.read()[0].is_01())? sc_lv<2>(): ((icmp_ln15_1_fu_94_p2.read()[0].to_bool())? ap_const_lv2_2: zext_ln15_fu_100_p1.read());
}

void max_algorithmic::thread_select_ln15_2_fu_135_p3() {
    select_ln15_2_fu_135_p3 = (!icmp_ln15_2_fu_129_p2.read()[0].is_01())? sc_lv<2>(): ((icmp_ln15_2_fu_129_p2.read()[0].to_bool())? ap_const_lv2_3: select_ln15_1_reg_311.read());
}

void max_algorithmic::thread_select_ln15_3_fu_227_p3() {
    select_ln15_3_fu_227_p3 = (!icmp_ln15_5_fu_221_p2.read()[0].is_01())? sc_lv<3>(): ((icmp_ln15_5_fu_221_p2.read()[0].to_bool())? ap_const_lv3_6: select_ln14_2_fu_201_p3.read());
}

void max_algorithmic::thread_select_ln15_fu_86_p3() {
    select_ln15_fu_86_p3 = (!icmp_ln15_fu_80_p2.read()[0].is_01())? sc_lv<32>(): ((icmp_ln15_fu_80_p2.read()[0].to_bool())? din_1_read.read(): din_0_read.read());
}

void max_algorithmic::thread_tmp_fu_261_p9() {
    tmp_fu_261_p9 = (!icmp_ln15_6_fu_248_p2.read()[0].is_01())? sc_lv<3>(): ((icmp_ln15_6_fu_248_p2.read()[0].to_bool())? ap_const_lv3_7: select_ln15_3_reg_368.read());
}

void max_algorithmic::thread_zext_ln15_2_fu_142_p1() {
    zext_ln15_2_fu_142_p1 = esl_zext<3,2>(select_ln15_2_fu_135_p3.read());
}

void max_algorithmic::thread_zext_ln15_fu_100_p1() {
    zext_ln15_fu_100_p1 = esl_zext<2,1>(icmp_ln15_fu_80_p2.read());
}

void max_algorithmic::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

