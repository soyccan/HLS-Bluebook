// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mux_binary2onehot_op.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mux_binary2onehot_op::ap_const_logic_1 = sc_dt::Log_1;
const bool mux_binary2onehot_op::ap_const_boolean_1 = true;
const sc_logic mux_binary2onehot_op::ap_const_logic_0 = sc_dt::Log_0;

mux_binary2onehot_op::mux_binary2onehot_op(sc_module_name name) : sc_module(name), mVcdFile(0) {
    top_mux_83_8_1_1_U22 = new top_mux_83_8_1_1<1,1,8,8,8,8,8,8,8,8,3,8>("top_mux_83_8_1_1_U22");
    top_mux_83_8_1_1_U22->din0(din_0_V_read);
    top_mux_83_8_1_1_U22->din1(din_1_V_read);
    top_mux_83_8_1_1_U22->din2(din_2_V_read);
    top_mux_83_8_1_1_U22->din3(din_3_V_read);
    top_mux_83_8_1_1_U22->din4(din_4_V_read);
    top_mux_83_8_1_1_U22->din5(din_5_V_read);
    top_mux_83_8_1_1_U22->din6(din_6_V_read);
    top_mux_83_8_1_1_U22->din7(din_7_V_read);
    top_mux_83_8_1_1_U22->din8(sel0_V);
    top_mux_83_8_1_1_U22->dout(tmp_fu_96_p10);
    top_mux_83_8_1_1_U23 = new top_mux_83_8_1_1<1,1,8,8,8,8,8,8,8,8,3,8>("top_mux_83_8_1_1_U23");
    top_mux_83_8_1_1_U23->din0(din_0_V_read);
    top_mux_83_8_1_1_U23->din1(din_1_V_read);
    top_mux_83_8_1_1_U23->din2(din_2_V_read);
    top_mux_83_8_1_1_U23->din3(din_3_V_read);
    top_mux_83_8_1_1_U23->din4(din_4_V_read);
    top_mux_83_8_1_1_U23->din5(din_5_V_read);
    top_mux_83_8_1_1_U23->din6(din_6_V_read);
    top_mux_83_8_1_1_U23->din7(din_7_V_read);
    top_mux_83_8_1_1_U23->din8(sel1_V);
    top_mux_83_8_1_1_U23->dout(tmp_1_fu_118_p10);

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( tmp_V_fu_140_p0 );
    sensitive << ( tmp_fu_96_p10 );
    sensitive << ( tmp_1_fu_118_p10 );

    SC_METHOD(thread_tmp_V_fu_140_p0);
    sensitive << ( s );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mux_binary2onehot_op_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, din_0_V_read, "(port)din_0_V_read");
    sc_trace(mVcdFile, din_1_V_read, "(port)din_1_V_read");
    sc_trace(mVcdFile, din_2_V_read, "(port)din_2_V_read");
    sc_trace(mVcdFile, din_3_V_read, "(port)din_3_V_read");
    sc_trace(mVcdFile, din_4_V_read, "(port)din_4_V_read");
    sc_trace(mVcdFile, din_5_V_read, "(port)din_5_V_read");
    sc_trace(mVcdFile, din_6_V_read, "(port)din_6_V_read");
    sc_trace(mVcdFile, din_7_V_read, "(port)din_7_V_read");
    sc_trace(mVcdFile, sel0_V, "(port)sel0_V");
    sc_trace(mVcdFile, sel1_V, "(port)sel1_V");
    sc_trace(mVcdFile, s, "(port)s");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_V_fu_140_p0, "tmp_V_fu_140_p0");
    sc_trace(mVcdFile, tmp_fu_96_p10, "tmp_fu_96_p10");
    sc_trace(mVcdFile, tmp_1_fu_118_p10, "tmp_1_fu_118_p10");
#endif

    }
}

mux_binary2onehot_op::~mux_binary2onehot_op() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete top_mux_83_8_1_1_U22;
    delete top_mux_83_8_1_1_U23;
}

void mux_binary2onehot_op::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void mux_binary2onehot_op::thread_ap_return() {
    ap_return = (!tmp_V_fu_140_p0.read()[0].is_01())? sc_lv<8>(): ((tmp_V_fu_140_p0.read()[0].to_bool())? tmp_fu_96_p10.read(): tmp_1_fu_118_p10.read());
}

void mux_binary2onehot_op::thread_tmp_V_fu_140_p0() {
    tmp_V_fu_140_p0 =  (sc_lv<1>) (s.read());
}

}

