// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "top.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic top::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic top::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> top::ap_ST_fsm_state1 = "1";
const sc_lv<2> top::ap_ST_fsm_state2 = "10";
const sc_lv<32> top::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool top::ap_const_boolean_1 = true;
const sc_lv<32> top::ap_const_lv32_A = "1010";
const sc_lv<32> top::ap_const_lv32_1 = "1";
const sc_lv<32> top::ap_const_lv32_2 = "10";
const sc_lv<32> top::ap_const_lv32_3 = "11";
const sc_lv<32> top::ap_const_lv32_4 = "100";
const sc_lv<32> top::ap_const_lv32_5 = "101";
const sc_lv<32> top::ap_const_lv32_6 = "110";
const sc_lv<32> top::ap_const_lv32_7 = "111";
const sc_lv<32> top::ap_const_lv32_8 = "1000";
const sc_lv<32> top::ap_const_lv32_9 = "1001";
const bool top::ap_const_boolean_0 = false;

top::top(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_max_algorithmic_fu_284 = new max_algorithmic("grp_max_algorithmic_fu_284");
    grp_max_algorithmic_fu_284->ap_clk(ap_clk);
    grp_max_algorithmic_fu_284->ap_rst(ap_rst);
    grp_max_algorithmic_fu_284->ap_start(grp_max_algorithmic_fu_284_ap_start);
    grp_max_algorithmic_fu_284->ap_done(grp_max_algorithmic_fu_284_ap_done);
    grp_max_algorithmic_fu_284->ap_idle(grp_max_algorithmic_fu_284_ap_idle);
    grp_max_algorithmic_fu_284->ap_ready(grp_max_algorithmic_fu_284_ap_ready);
    grp_max_algorithmic_fu_284->din_0_read(reg_484);
    grp_max_algorithmic_fu_284->din_1_read(reg_490);
    grp_max_algorithmic_fu_284->din_2_read(reg_496);
    grp_max_algorithmic_fu_284->din_3_read(reg_502);
    grp_max_algorithmic_fu_284->din_4_read(reg_508);
    grp_max_algorithmic_fu_284->din_5_read(reg_514);
    grp_max_algorithmic_fu_284->din_6_read(reg_520);
    grp_max_algorithmic_fu_284->din_7_read(reg_526);
    grp_max_algorithmic_fu_284->ap_return(grp_max_algorithmic_fu_284_ap_return);
    grp_max_fu_305 = new max("grp_max_fu_305");
    grp_max_fu_305->ap_clk(ap_clk);
    grp_max_fu_305->ap_rst(ap_rst);
    grp_max_fu_305->ap_start(grp_max_fu_305_ap_start);
    grp_max_fu_305->ap_done(grp_max_fu_305_ap_done);
    grp_max_fu_305->ap_idle(grp_max_fu_305_ap_idle);
    grp_max_fu_305->ap_ready(grp_max_fu_305_ap_ready);
    grp_max_fu_305->din_0_read(reg_484);
    grp_max_fu_305->din_1_read(reg_490);
    grp_max_fu_305->din_2_read(reg_496);
    grp_max_fu_305->din_3_read(reg_502);
    grp_max_fu_305->din_4_read(reg_508);
    grp_max_fu_305->din_5_read(reg_514);
    grp_max_fu_305->din_6_read(reg_520);
    grp_max_fu_305->din_7_read(reg_526);
    grp_max_fu_305->ap_return(grp_max_fu_305_ap_return);
    grp_mux_onehot_if_fu_326 = new mux_onehot_if("grp_mux_onehot_if_fu_326");
    grp_mux_onehot_if_fu_326->ap_clk(ap_clk);
    grp_mux_onehot_if_fu_326->ap_rst(ap_rst);
    grp_mux_onehot_if_fu_326->ap_start(grp_mux_onehot_if_fu_326_ap_start);
    grp_mux_onehot_if_fu_326->ap_done(grp_mux_onehot_if_fu_326_ap_done);
    grp_mux_onehot_if_fu_326->ap_idle(grp_mux_onehot_if_fu_326_ap_idle);
    grp_mux_onehot_if_fu_326->ap_ready(grp_mux_onehot_if_fu_326_ap_ready);
    grp_mux_onehot_if_fu_326->din_0_V_read(mux_in_0_V_read_3_reg_588);
    grp_mux_onehot_if_fu_326->din_1_V_read(mux_in_1_V_read_3_reg_593);
    grp_mux_onehot_if_fu_326->din_2_V_read(mux_in_2_V_read_2_reg_598);
    grp_mux_onehot_if_fu_326->din_3_V_read(mux_in_3_V_read_2_reg_603);
    grp_mux_onehot_if_fu_326->din_4_V_read(mux_in_4_V_read_2_reg_608);
    grp_mux_onehot_if_fu_326->din_5_V_read(mux_in_5_V_read_2_reg_613);
    grp_mux_onehot_if_fu_326->din_6_V_read(mux_in_6_V_read_2_reg_618);
    grp_mux_onehot_if_fu_326->din_7_V_read(mux_in_7_V_read_2_reg_623);
    grp_mux_onehot_if_fu_326->sel_V(mux_sel_onehot_V);
    grp_mux_onehot_if_fu_326->ap_return(grp_mux_onehot_if_fu_326_ap_return);
    call_ret7_leading_ones_templat_fu_349 = new leading_ones_templat("call_ret7_leading_ones_templat_fu_349");
    call_ret7_leading_ones_templat_fu_349->ap_ready(call_ret7_leading_ones_templat_fu_349_ap_ready);
    call_ret7_leading_ones_templat_fu_349->din_V_read(leadone_in_V);
    call_ret7_leading_ones_templat_fu_349->ap_return_0(call_ret7_leading_ones_templat_fu_349_ap_return_0);
    call_ret7_leading_ones_templat_fu_349->ap_return_1(call_ret7_leading_ones_templat_fu_349_ap_return_1);
    op2_V_assign_2_s_mux_onehot_fu_355 = new mux_onehot("op2_V_assign_2_s_mux_onehot_fu_355");
    op2_V_assign_2_s_mux_onehot_fu_355->ap_ready(op2_V_assign_2_s_mux_onehot_fu_355_ap_ready);
    op2_V_assign_2_s_mux_onehot_fu_355->din_0_V_read(mux_in_0_V);
    op2_V_assign_2_s_mux_onehot_fu_355->din_1_V_read(mux_in_1_V);
    op2_V_assign_2_s_mux_onehot_fu_355->din_2_V_read(mux_in_2_V);
    op2_V_assign_2_s_mux_onehot_fu_355->din_3_V_read(mux_in_3_V);
    op2_V_assign_2_s_mux_onehot_fu_355->din_4_V_read(mux_in_4_V);
    op2_V_assign_2_s_mux_onehot_fu_355->din_5_V_read(mux_in_5_V);
    op2_V_assign_2_s_mux_onehot_fu_355->din_6_V_read(mux_in_6_V);
    op2_V_assign_2_s_mux_onehot_fu_355->din_7_V_read(mux_in_7_V);
    op2_V_assign_2_s_mux_onehot_fu_355->sel_V(mux_sel_onehot_V);
    op2_V_assign_2_s_mux_onehot_fu_355->ap_return(op2_V_assign_2_s_mux_onehot_fu_355_ap_return);
    grp_leading_ones_brutefo_fu_378 = new leading_ones_brutefo("grp_leading_ones_brutefo_fu_378");
    grp_leading_ones_brutefo_fu_378->ap_clk(ap_clk);
    grp_leading_ones_brutefo_fu_378->ap_rst(ap_rst);
    grp_leading_ones_brutefo_fu_378->ap_start(grp_leading_ones_brutefo_fu_378_ap_start);
    grp_leading_ones_brutefo_fu_378->ap_done(grp_leading_ones_brutefo_fu_378_ap_done);
    grp_leading_ones_brutefo_fu_378->ap_idle(grp_leading_ones_brutefo_fu_378_ap_idle);
    grp_leading_ones_brutefo_fu_378->ap_ready(grp_leading_ones_brutefo_fu_378_ap_ready);
    grp_leading_ones_brutefo_fu_378->din_V(leadone_in_V);
    grp_leading_ones_brutefo_fu_378->ap_return_0(grp_leading_ones_brutefo_fu_378_ap_return_0);
    grp_leading_ones_brutefo_fu_378->ap_return_1(grp_leading_ones_brutefo_fu_378_ap_return_1);
    grp_leading_ones_log2_fu_384 = new leading_ones_log2("grp_leading_ones_log2_fu_384");
    grp_leading_ones_log2_fu_384->ap_clk(ap_clk);
    grp_leading_ones_log2_fu_384->ap_rst(ap_rst);
    grp_leading_ones_log2_fu_384->ap_start(grp_leading_ones_log2_fu_384_ap_start);
    grp_leading_ones_log2_fu_384->ap_done(grp_leading_ones_log2_fu_384_ap_done);
    grp_leading_ones_log2_fu_384->ap_idle(grp_leading_ones_log2_fu_384_ap_idle);
    grp_leading_ones_log2_fu_384->ap_ready(grp_leading_ones_log2_fu_384_ap_ready);
    grp_leading_ones_log2_fu_384->din_V(leadone_in_V);
    grp_leading_ones_log2_fu_384->ap_return_0(grp_leading_ones_log2_fu_384_ap_return_0);
    grp_leading_ones_log2_fu_384->ap_return_1(grp_leading_ones_log2_fu_384_ap_return_1);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390 = new mux_binary2onehot_op("op2_V_assign_4_s_mux_binary2onehot_op_fu_390");
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->ap_ready(op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_ready);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->din_0_V_read(mux_in_0_V);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->din_1_V_read(mux_in_1_V);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->din_2_V_read(mux_in_2_V);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->din_3_V_read(mux_in_3_V);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->din_4_V_read(mux_in_4_V);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->din_5_V_read(mux_in_5_V);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->din_6_V_read(mux_in_6_V);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->din_7_V_read(mux_in_7_V);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->sel0_V(mux_sel0_V);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->sel1_V(mux_sel1_V);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->s(mux_s);
    op2_V_assign_4_s_mux_binary2onehot_op_fu_390->ap_return(op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return);
    grp_leading_ones_fu_417 = new leading_ones("grp_leading_ones_fu_417");
    grp_leading_ones_fu_417->ap_clk(ap_clk);
    grp_leading_ones_fu_417->ap_rst(ap_rst);
    grp_leading_ones_fu_417->ap_start(grp_leading_ones_fu_417_ap_start);
    grp_leading_ones_fu_417->ap_done(grp_leading_ones_fu_417_ap_done);
    grp_leading_ones_fu_417->ap_idle(grp_leading_ones_fu_417_ap_idle);
    grp_leading_ones_fu_417->ap_ready(grp_leading_ones_fu_417_ap_ready);
    grp_leading_ones_fu_417->din_V(leadone_in_V);
    grp_leading_ones_fu_417->ap_return_0(grp_leading_ones_fu_417_ap_return_0);
    grp_leading_ones_fu_417->ap_return_1(grp_leading_ones_fu_417_ap_return_1);
    op2_V_assign_5_s_mux_binary_opt_fu_423 = new mux_binary_opt("op2_V_assign_5_s_mux_binary_opt_fu_423");
    op2_V_assign_5_s_mux_binary_opt_fu_423->ap_ready(op2_V_assign_5_s_mux_binary_opt_fu_423_ap_ready);
    op2_V_assign_5_s_mux_binary_opt_fu_423->din_0_V_read(mux_in_0_V);
    op2_V_assign_5_s_mux_binary_opt_fu_423->din_1_V_read(mux_in_1_V);
    op2_V_assign_5_s_mux_binary_opt_fu_423->din_2_V_read(mux_in_2_V);
    op2_V_assign_5_s_mux_binary_opt_fu_423->din_3_V_read(mux_in_3_V);
    op2_V_assign_5_s_mux_binary_opt_fu_423->din_4_V_read(mux_in_4_V);
    op2_V_assign_5_s_mux_binary_opt_fu_423->din_5_V_read(mux_in_5_V);
    op2_V_assign_5_s_mux_binary_opt_fu_423->din_6_V_read(mux_in_6_V);
    op2_V_assign_5_s_mux_binary_opt_fu_423->din_7_V_read(mux_in_7_V);
    op2_V_assign_5_s_mux_binary_opt_fu_423->sel0_V(mux_sel0_V);
    op2_V_assign_5_s_mux_binary_opt_fu_423->sel1_V(mux_sel1_V);
    op2_V_assign_5_s_mux_binary_opt_fu_423->s(mux_s);
    op2_V_assign_5_s_mux_binary_opt_fu_423->ap_return(op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return);
    op2_V_assign_1_s_mux_binary_fu_450 = new mux_binary("op2_V_assign_1_s_mux_binary_fu_450");
    op2_V_assign_1_s_mux_binary_fu_450->ap_ready(op2_V_assign_1_s_mux_binary_fu_450_ap_ready);
    op2_V_assign_1_s_mux_binary_fu_450->din_0_V_read(mux_in_0_V);
    op2_V_assign_1_s_mux_binary_fu_450->din_1_V_read(mux_in_1_V);
    op2_V_assign_1_s_mux_binary_fu_450->din_2_V_read(mux_in_2_V);
    op2_V_assign_1_s_mux_binary_fu_450->din_3_V_read(mux_in_3_V);
    op2_V_assign_1_s_mux_binary_fu_450->din_4_V_read(mux_in_4_V);
    op2_V_assign_1_s_mux_binary_fu_450->din_5_V_read(mux_in_5_V);
    op2_V_assign_1_s_mux_binary_fu_450->din_6_V_read(mux_in_6_V);
    op2_V_assign_1_s_mux_binary_fu_450->din_7_V_read(mux_in_7_V);
    op2_V_assign_1_s_mux_binary_fu_450->sel_V(mux_sel0_V);
    op2_V_assign_1_s_mux_binary_fu_450->ap_return(op2_V_assign_1_s_mux_binary_fu_450_ap_return);
    op2_V_assign_s_mux_2to1_fu_473 = new mux_2to1("op2_V_assign_s_mux_2to1_fu_473");
    op2_V_assign_s_mux_2to1_fu_473->ap_ready(op2_V_assign_s_mux_2to1_fu_473_ap_ready);
    op2_V_assign_s_mux_2to1_fu_473->din_0_V_read(mux_in_0_V);
    op2_V_assign_s_mux_2to1_fu_473->din_1_V_read(mux_in_1_V);
    op2_V_assign_s_mux_2to1_fu_473->sel(mux_s);
    op2_V_assign_s_mux_2to1_fu_473->ap_return(op2_V_assign_s_mux_2to1_fu_473_ap_return);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2_on_subcall_done);
    sensitive << ( mode );
    sensitive << ( grp_max_algorithmic_fu_284_ap_done );
    sensitive << ( grp_max_fu_305_ap_done );
    sensitive << ( grp_mux_onehot_if_fu_326_ap_done );
    sensitive << ( grp_leading_ones_brutefo_fu_378_ap_done );
    sensitive << ( grp_leading_ones_log2_fu_384_ap_done );
    sensitive << ( grp_leading_ones_fu_417_ap_done );
    sensitive << ( ap_predicate_op146_call_state2 );

    SC_METHOD(thread_ap_condition_99);
    sensitive << ( mode );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op146_call_state2);
    sensitive << ( mode );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_grp_leading_ones_brutefo_fu_378_ap_start);
    sensitive << ( grp_leading_ones_brutefo_fu_378_ap_start_reg );

    SC_METHOD(thread_grp_leading_ones_fu_417_ap_start);
    sensitive << ( grp_leading_ones_fu_417_ap_start_reg );

    SC_METHOD(thread_grp_leading_ones_log2_fu_384_ap_start);
    sensitive << ( grp_leading_ones_log2_fu_384_ap_start_reg );

    SC_METHOD(thread_grp_max_algorithmic_fu_284_ap_start);
    sensitive << ( grp_max_algorithmic_fu_284_ap_start_reg );

    SC_METHOD(thread_grp_max_fu_305_ap_start);
    sensitive << ( grp_max_fu_305_ap_start_reg );

    SC_METHOD(thread_grp_mux_onehot_if_fu_326_ap_start);
    sensitive << ( grp_mux_onehot_if_fu_326_ap_start_reg );

    SC_METHOD(thread_leadone_out_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mode );
    sensitive << ( call_ret7_leading_ones_templat_fu_349_ap_return_1 );
    sensitive << ( grp_leading_ones_brutefo_fu_378_ap_return_1 );
    sensitive << ( grp_leading_ones_log2_fu_384_ap_return_1 );
    sensitive << ( grp_leading_ones_fu_417_ap_return_1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_leadone_out_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mode );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_leadone_ret);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mode );
    sensitive << ( call_ret7_leading_ones_templat_fu_349_ap_return_0 );
    sensitive << ( grp_leading_ones_brutefo_fu_378_ap_return_0 );
    sensitive << ( grp_leading_ones_log2_fu_384_ap_return_0 );
    sensitive << ( grp_leading_ones_fu_417_ap_return_0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_leadone_ret_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mode );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_max_out);
    sensitive << ( mode );
    sensitive << ( grp_max_algorithmic_fu_284_ap_return );
    sensitive << ( grp_max_fu_305_ap_return );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );
    sensitive << ( ap_condition_99 );

    SC_METHOD(thread_max_out_ap_vld);
    sensitive << ( mode );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_mux_ret_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mode );
    sensitive << ( grp_mux_onehot_if_fu_326_ap_return );
    sensitive << ( op2_V_assign_2_s_mux_onehot_fu_355_ap_return );
    sensitive << ( op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return );
    sensitive << ( op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return );
    sensitive << ( op2_V_assign_1_s_mux_binary_fu_450_ap_return );
    sensitive << ( op2_V_assign_s_mux_2to1_fu_473_ap_return );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_mux_ret_V_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( mode );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    grp_max_algorithmic_fu_284_ap_start_reg = SC_LOGIC_0;
    grp_max_fu_305_ap_start_reg = SC_LOGIC_0;
    grp_mux_onehot_if_fu_326_ap_start_reg = SC_LOGIC_0;
    grp_leading_ones_brutefo_fu_378_ap_start_reg = SC_LOGIC_0;
    grp_leading_ones_log2_fu_384_ap_start_reg = SC_LOGIC_0;
    grp_leading_ones_fu_417_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "top_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, leadone_in_V, "(port)leadone_in_V");
    sc_trace(mVcdFile, leadone_out_V, "(port)leadone_out_V");
    sc_trace(mVcdFile, leadone_out_V_ap_vld, "(port)leadone_out_V_ap_vld");
    sc_trace(mVcdFile, leadone_ret, "(port)leadone_ret");
    sc_trace(mVcdFile, leadone_ret_ap_vld, "(port)leadone_ret_ap_vld");
    sc_trace(mVcdFile, mux_in_0_V, "(port)mux_in_0_V");
    sc_trace(mVcdFile, mux_in_1_V, "(port)mux_in_1_V");
    sc_trace(mVcdFile, mux_in_2_V, "(port)mux_in_2_V");
    sc_trace(mVcdFile, mux_in_3_V, "(port)mux_in_3_V");
    sc_trace(mVcdFile, mux_in_4_V, "(port)mux_in_4_V");
    sc_trace(mVcdFile, mux_in_5_V, "(port)mux_in_5_V");
    sc_trace(mVcdFile, mux_in_6_V, "(port)mux_in_6_V");
    sc_trace(mVcdFile, mux_in_7_V, "(port)mux_in_7_V");
    sc_trace(mVcdFile, mux_sel_onehot_V, "(port)mux_sel_onehot_V");
    sc_trace(mVcdFile, mux_sel0_V, "(port)mux_sel0_V");
    sc_trace(mVcdFile, mux_sel1_V, "(port)mux_sel1_V");
    sc_trace(mVcdFile, mux_s, "(port)mux_s");
    sc_trace(mVcdFile, mux_ret_V, "(port)mux_ret_V");
    sc_trace(mVcdFile, mux_ret_V_ap_vld, "(port)mux_ret_V_ap_vld");
    sc_trace(mVcdFile, max_in_0, "(port)max_in_0");
    sc_trace(mVcdFile, max_in_1, "(port)max_in_1");
    sc_trace(mVcdFile, max_in_2, "(port)max_in_2");
    sc_trace(mVcdFile, max_in_3, "(port)max_in_3");
    sc_trace(mVcdFile, max_in_4, "(port)max_in_4");
    sc_trace(mVcdFile, max_in_5, "(port)max_in_5");
    sc_trace(mVcdFile, max_in_6, "(port)max_in_6");
    sc_trace(mVcdFile, max_in_7, "(port)max_in_7");
    sc_trace(mVcdFile, max_out, "(port)max_out");
    sc_trace(mVcdFile, max_out_ap_vld, "(port)max_out_ap_vld");
    sc_trace(mVcdFile, mode, "(port)mode");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_484, "reg_484");
    sc_trace(mVcdFile, reg_490, "reg_490");
    sc_trace(mVcdFile, reg_496, "reg_496");
    sc_trace(mVcdFile, reg_502, "reg_502");
    sc_trace(mVcdFile, reg_508, "reg_508");
    sc_trace(mVcdFile, reg_514, "reg_514");
    sc_trace(mVcdFile, reg_520, "reg_520");
    sc_trace(mVcdFile, reg_526, "reg_526");
    sc_trace(mVcdFile, mux_in_0_V_read_3_reg_588, "mux_in_0_V_read_3_reg_588");
    sc_trace(mVcdFile, mux_in_1_V_read_3_reg_593, "mux_in_1_V_read_3_reg_593");
    sc_trace(mVcdFile, mux_in_2_V_read_2_reg_598, "mux_in_2_V_read_2_reg_598");
    sc_trace(mVcdFile, mux_in_3_V_read_2_reg_603, "mux_in_3_V_read_2_reg_603");
    sc_trace(mVcdFile, mux_in_4_V_read_2_reg_608, "mux_in_4_V_read_2_reg_608");
    sc_trace(mVcdFile, mux_in_5_V_read_2_reg_613, "mux_in_5_V_read_2_reg_613");
    sc_trace(mVcdFile, mux_in_6_V_read_2_reg_618, "mux_in_6_V_read_2_reg_618");
    sc_trace(mVcdFile, mux_in_7_V_read_2_reg_623, "mux_in_7_V_read_2_reg_623");
    sc_trace(mVcdFile, grp_max_algorithmic_fu_284_ap_start, "grp_max_algorithmic_fu_284_ap_start");
    sc_trace(mVcdFile, grp_max_algorithmic_fu_284_ap_done, "grp_max_algorithmic_fu_284_ap_done");
    sc_trace(mVcdFile, grp_max_algorithmic_fu_284_ap_idle, "grp_max_algorithmic_fu_284_ap_idle");
    sc_trace(mVcdFile, grp_max_algorithmic_fu_284_ap_ready, "grp_max_algorithmic_fu_284_ap_ready");
    sc_trace(mVcdFile, grp_max_algorithmic_fu_284_ap_return, "grp_max_algorithmic_fu_284_ap_return");
    sc_trace(mVcdFile, grp_max_fu_305_ap_start, "grp_max_fu_305_ap_start");
    sc_trace(mVcdFile, grp_max_fu_305_ap_done, "grp_max_fu_305_ap_done");
    sc_trace(mVcdFile, grp_max_fu_305_ap_idle, "grp_max_fu_305_ap_idle");
    sc_trace(mVcdFile, grp_max_fu_305_ap_ready, "grp_max_fu_305_ap_ready");
    sc_trace(mVcdFile, grp_max_fu_305_ap_return, "grp_max_fu_305_ap_return");
    sc_trace(mVcdFile, grp_mux_onehot_if_fu_326_ap_start, "grp_mux_onehot_if_fu_326_ap_start");
    sc_trace(mVcdFile, grp_mux_onehot_if_fu_326_ap_done, "grp_mux_onehot_if_fu_326_ap_done");
    sc_trace(mVcdFile, grp_mux_onehot_if_fu_326_ap_idle, "grp_mux_onehot_if_fu_326_ap_idle");
    sc_trace(mVcdFile, grp_mux_onehot_if_fu_326_ap_ready, "grp_mux_onehot_if_fu_326_ap_ready");
    sc_trace(mVcdFile, grp_mux_onehot_if_fu_326_ap_return, "grp_mux_onehot_if_fu_326_ap_return");
    sc_trace(mVcdFile, call_ret7_leading_ones_templat_fu_349_ap_ready, "call_ret7_leading_ones_templat_fu_349_ap_ready");
    sc_trace(mVcdFile, call_ret7_leading_ones_templat_fu_349_ap_return_0, "call_ret7_leading_ones_templat_fu_349_ap_return_0");
    sc_trace(mVcdFile, call_ret7_leading_ones_templat_fu_349_ap_return_1, "call_ret7_leading_ones_templat_fu_349_ap_return_1");
    sc_trace(mVcdFile, op2_V_assign_2_s_mux_onehot_fu_355_ap_ready, "op2_V_assign_2_s_mux_onehot_fu_355_ap_ready");
    sc_trace(mVcdFile, op2_V_assign_2_s_mux_onehot_fu_355_ap_return, "op2_V_assign_2_s_mux_onehot_fu_355_ap_return");
    sc_trace(mVcdFile, grp_leading_ones_brutefo_fu_378_ap_start, "grp_leading_ones_brutefo_fu_378_ap_start");
    sc_trace(mVcdFile, grp_leading_ones_brutefo_fu_378_ap_done, "grp_leading_ones_brutefo_fu_378_ap_done");
    sc_trace(mVcdFile, grp_leading_ones_brutefo_fu_378_ap_idle, "grp_leading_ones_brutefo_fu_378_ap_idle");
    sc_trace(mVcdFile, grp_leading_ones_brutefo_fu_378_ap_ready, "grp_leading_ones_brutefo_fu_378_ap_ready");
    sc_trace(mVcdFile, grp_leading_ones_brutefo_fu_378_ap_return_0, "grp_leading_ones_brutefo_fu_378_ap_return_0");
    sc_trace(mVcdFile, grp_leading_ones_brutefo_fu_378_ap_return_1, "grp_leading_ones_brutefo_fu_378_ap_return_1");
    sc_trace(mVcdFile, grp_leading_ones_log2_fu_384_ap_start, "grp_leading_ones_log2_fu_384_ap_start");
    sc_trace(mVcdFile, grp_leading_ones_log2_fu_384_ap_done, "grp_leading_ones_log2_fu_384_ap_done");
    sc_trace(mVcdFile, grp_leading_ones_log2_fu_384_ap_idle, "grp_leading_ones_log2_fu_384_ap_idle");
    sc_trace(mVcdFile, grp_leading_ones_log2_fu_384_ap_ready, "grp_leading_ones_log2_fu_384_ap_ready");
    sc_trace(mVcdFile, grp_leading_ones_log2_fu_384_ap_return_0, "grp_leading_ones_log2_fu_384_ap_return_0");
    sc_trace(mVcdFile, grp_leading_ones_log2_fu_384_ap_return_1, "grp_leading_ones_log2_fu_384_ap_return_1");
    sc_trace(mVcdFile, op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_ready, "op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_ready");
    sc_trace(mVcdFile, op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return, "op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return");
    sc_trace(mVcdFile, grp_leading_ones_fu_417_ap_start, "grp_leading_ones_fu_417_ap_start");
    sc_trace(mVcdFile, grp_leading_ones_fu_417_ap_done, "grp_leading_ones_fu_417_ap_done");
    sc_trace(mVcdFile, grp_leading_ones_fu_417_ap_idle, "grp_leading_ones_fu_417_ap_idle");
    sc_trace(mVcdFile, grp_leading_ones_fu_417_ap_ready, "grp_leading_ones_fu_417_ap_ready");
    sc_trace(mVcdFile, grp_leading_ones_fu_417_ap_return_0, "grp_leading_ones_fu_417_ap_return_0");
    sc_trace(mVcdFile, grp_leading_ones_fu_417_ap_return_1, "grp_leading_ones_fu_417_ap_return_1");
    sc_trace(mVcdFile, op2_V_assign_5_s_mux_binary_opt_fu_423_ap_ready, "op2_V_assign_5_s_mux_binary_opt_fu_423_ap_ready");
    sc_trace(mVcdFile, op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return, "op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return");
    sc_trace(mVcdFile, op2_V_assign_1_s_mux_binary_fu_450_ap_ready, "op2_V_assign_1_s_mux_binary_fu_450_ap_ready");
    sc_trace(mVcdFile, op2_V_assign_1_s_mux_binary_fu_450_ap_return, "op2_V_assign_1_s_mux_binary_fu_450_ap_return");
    sc_trace(mVcdFile, op2_V_assign_s_mux_2to1_fu_473_ap_ready, "op2_V_assign_s_mux_2to1_fu_473_ap_ready");
    sc_trace(mVcdFile, op2_V_assign_s_mux_2to1_fu_473_ap_return, "op2_V_assign_s_mux_2to1_fu_473_ap_return");
    sc_trace(mVcdFile, grp_max_algorithmic_fu_284_ap_start_reg, "grp_max_algorithmic_fu_284_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_max_fu_305_ap_start_reg, "grp_max_fu_305_ap_start_reg");
    sc_trace(mVcdFile, grp_mux_onehot_if_fu_326_ap_start_reg, "grp_mux_onehot_if_fu_326_ap_start_reg");
    sc_trace(mVcdFile, grp_leading_ones_brutefo_fu_378_ap_start_reg, "grp_leading_ones_brutefo_fu_378_ap_start_reg");
    sc_trace(mVcdFile, grp_leading_ones_log2_fu_384_ap_start_reg, "grp_leading_ones_log2_fu_384_ap_start_reg");
    sc_trace(mVcdFile, grp_leading_ones_fu_417_ap_start_reg, "grp_leading_ones_fu_417_ap_start_reg");
    sc_trace(mVcdFile, ap_predicate_op146_call_state2, "ap_predicate_op146_call_state2");
    sc_trace(mVcdFile, ap_block_state2_on_subcall_done, "ap_block_state2_on_subcall_done");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_99, "ap_condition_99");
#endif

    }
    mHdltvinHandle.open("top.hdltvin.dat");
    mHdltvoutHandle.open("top.hdltvout.dat");
}

top::~top() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_max_algorithmic_fu_284;
    delete grp_max_fu_305;
    delete grp_mux_onehot_if_fu_326;
    delete call_ret7_leading_ones_templat_fu_349;
    delete op2_V_assign_2_s_mux_onehot_fu_355;
    delete grp_leading_ones_brutefo_fu_378;
    delete grp_leading_ones_log2_fu_384;
    delete op2_V_assign_4_s_mux_binary2onehot_op_fu_390;
    delete grp_leading_ones_fu_417;
    delete op2_V_assign_5_s_mux_binary_opt_fu_423;
    delete op2_V_assign_1_s_mux_binary_fu_450;
    delete op2_V_assign_s_mux_2to1_fu_473;
}

void top::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_leading_ones_brutefo_fu_378_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             esl_seteq<1,32,32>(mode.read(), ap_const_lv32_1))) {
            grp_leading_ones_brutefo_fu_378_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_leading_ones_brutefo_fu_378_ap_ready.read())) {
            grp_leading_ones_brutefo_fu_378_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_leading_ones_fu_417_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             esl_seteq<1,32,32>(ap_const_lv32_0, mode.read()))) {
            grp_leading_ones_fu_417_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_leading_ones_fu_417_ap_ready.read())) {
            grp_leading_ones_fu_417_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_leading_ones_log2_fu_384_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             esl_seteq<1,32,32>(mode.read(), ap_const_lv32_2))) {
            grp_leading_ones_log2_fu_384_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_leading_ones_log2_fu_384_ap_ready.read())) {
            grp_leading_ones_log2_fu_384_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_max_algorithmic_fu_284_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             !esl_seteq<1,32,32>(ap_const_lv32_0, mode.read()) && 
             !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_1) && 
             !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_2) && 
             !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_3) && 
             !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_4) && 
             !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_5) && 
             !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_6) && 
             !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_7) && 
             !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_8) && 
             !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_9) && 
             !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_A))) {
            grp_max_algorithmic_fu_284_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_max_algorithmic_fu_284_ap_ready.read())) {
            grp_max_algorithmic_fu_284_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_max_fu_305_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             esl_seteq<1,32,32>(mode.read(), ap_const_lv32_A))) {
            grp_max_fu_305_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_max_fu_305_ap_ready.read())) {
            grp_max_fu_305_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_mux_onehot_if_fu_326_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             esl_seteq<1,32,32>(mode.read(), ap_const_lv32_7))) {
            grp_mux_onehot_if_fu_326_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_mux_onehot_if_fu_326_ap_ready.read())) {
            grp_mux_onehot_if_fu_326_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,32,32>(mode.read(), ap_const_lv32_7))) {
        mux_in_0_V_read_3_reg_588 = mux_in_0_V.read();
        mux_in_1_V_read_3_reg_593 = mux_in_1_V.read();
        mux_in_2_V_read_2_reg_598 = mux_in_2_V.read();
        mux_in_3_V_read_2_reg_603 = mux_in_3_V.read();
        mux_in_4_V_read_2_reg_608 = mux_in_4_V.read();
        mux_in_5_V_read_2_reg_613 = mux_in_5_V.read();
        mux_in_6_V_read_2_reg_618 = mux_in_6_V.read();
        mux_in_7_V_read_2_reg_623 = mux_in_7_V.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
  esl_seteq<1,32,32>(mode.read(), ap_const_lv32_A)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
  esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
  !esl_seteq<1,32,32>(ap_const_lv32_0, mode.read()) && 
  !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_1) && 
  !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_2) && 
  !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_3) && 
  !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_4) && 
  !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_5) && 
  !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_6) && 
  !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_7) && 
  !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_8) && 
  !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_9) && 
  !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_A)))) {
        reg_484 = max_in_0.read();
        reg_490 = max_in_1.read();
        reg_496 = max_in_2.read();
        reg_502 = max_in_3.read();
        reg_508 = max_in_4.read();
        reg_514 = max_in_5.read();
        reg_520 = max_in_6.read();
        reg_526 = max_in_7.read();
    }
}

void top::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void top::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void top::thread_ap_block_state2_on_subcall_done() {
    ap_block_state2_on_subcall_done = ((esl_seteq<1,32,32>(mode.read(), ap_const_lv32_A) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_max_fu_305_ap_done.read())) || (esl_seteq<1,32,32>(mode.read(), ap_const_lv32_7) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_mux_onehot_if_fu_326_ap_done.read())) || (esl_seteq<1,32,32>(mode.read(), ap_const_lv32_2) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_leading_ones_log2_fu_384_ap_done.read())) || (esl_seteq<1,32,32>(mode.read(), ap_const_lv32_1) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_leading_ones_brutefo_fu_378_ap_done.read())) || (esl_seteq<1,32,32>(ap_const_lv32_0, mode.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, grp_leading_ones_fu_417_ap_done.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, grp_max_algorithmic_fu_284_ap_done.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op146_call_state2.read())));
}

void top::thread_ap_condition_99() {
    ap_condition_99 = (!esl_seteq<1,32,32>(ap_const_lv32_0, mode.read()) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_1) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_2) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_3) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_4) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_5) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_6) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_7) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_8) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_9) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_A));
}

void top::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void top::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void top::thread_ap_predicate_op146_call_state2() {
    ap_predicate_op146_call_state2 = (!esl_seteq<1,32,32>(ap_const_lv32_0, mode.read()) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_1) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_2) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_3) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_4) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_5) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_6) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_7) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_8) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_9) && !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_A));
}

void top::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void top::thread_grp_leading_ones_brutefo_fu_378_ap_start() {
    grp_leading_ones_brutefo_fu_378_ap_start = grp_leading_ones_brutefo_fu_378_ap_start_reg.read();
}

void top::thread_grp_leading_ones_fu_417_ap_start() {
    grp_leading_ones_fu_417_ap_start = grp_leading_ones_fu_417_ap_start_reg.read();
}

void top::thread_grp_leading_ones_log2_fu_384_ap_start() {
    grp_leading_ones_log2_fu_384_ap_start = grp_leading_ones_log2_fu_384_ap_start_reg.read();
}

void top::thread_grp_max_algorithmic_fu_284_ap_start() {
    grp_max_algorithmic_fu_284_ap_start = grp_max_algorithmic_fu_284_ap_start_reg.read();
}

void top::thread_grp_max_fu_305_ap_start() {
    grp_max_fu_305_ap_start = grp_max_fu_305_ap_start_reg.read();
}

void top::thread_grp_mux_onehot_if_fu_326_ap_start() {
    grp_mux_onehot_if_fu_326_ap_start = grp_mux_onehot_if_fu_326_ap_start_reg.read();
}

void top::thread_leadone_out_V() {
    if ((esl_seteq<1,32,32>(ap_const_lv32_0, mode.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        leadone_out_V = grp_leading_ones_fu_417_ap_return_1.read();
    } else if ((esl_seteq<1,32,32>(mode.read(), ap_const_lv32_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        leadone_out_V = grp_leading_ones_brutefo_fu_378_ap_return_1.read();
    } else if ((esl_seteq<1,32,32>(mode.read(), ap_const_lv32_2) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        leadone_out_V = grp_leading_ones_log2_fu_384_ap_return_1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,32,32>(mode.read(), ap_const_lv32_3))) {
        leadone_out_V = call_ret7_leading_ones_templat_fu_349_ap_return_1.read();
    } else {
        leadone_out_V = "XXXXX";
    }
}

void top::thread_leadone_out_V_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,32,32>(mode.read(), ap_const_lv32_3)) || 
         (esl_seteq<1,32,32>(mode.read(), ap_const_lv32_2) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,32,32>(mode.read(), ap_const_lv32_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,32,32>(ap_const_lv32_0, mode.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0)))) {
        leadone_out_V_ap_vld = ap_const_logic_1;
    } else {
        leadone_out_V_ap_vld = ap_const_logic_0;
    }
}

void top::thread_leadone_ret() {
    if ((esl_seteq<1,32,32>(ap_const_lv32_0, mode.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        leadone_ret =  (sc_logic) (grp_leading_ones_fu_417_ap_return_0.read()[0]);
    } else if ((esl_seteq<1,32,32>(mode.read(), ap_const_lv32_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        leadone_ret =  (sc_logic) (grp_leading_ones_brutefo_fu_378_ap_return_0.read()[0]);
    } else if ((esl_seteq<1,32,32>(mode.read(), ap_const_lv32_2) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        leadone_ret =  (sc_logic) (grp_leading_ones_log2_fu_384_ap_return_0.read()[0]);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,32,32>(mode.read(), ap_const_lv32_3))) {
        leadone_ret =  (sc_logic) (call_ret7_leading_ones_templat_fu_349_ap_return_0.read()[0]);
    } else {
        leadone_ret = sc_logic('X');
    }
}

void top::thread_leadone_ret_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,32,32>(mode.read(), ap_const_lv32_3)) || 
         (esl_seteq<1,32,32>(mode.read(), ap_const_lv32_2) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,32,32>(mode.read(), ap_const_lv32_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,32,32>(ap_const_lv32_0, mode.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0)))) {
        leadone_ret_ap_vld = ap_const_logic_1;
    } else {
        leadone_ret_ap_vld = ap_const_logic_0;
    }
}

void top::thread_max_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        if (esl_seteq<1,1,1>(ap_condition_99.read(), ap_const_boolean_1)) {
            max_out = grp_max_algorithmic_fu_284_ap_return.read();
        } else if (esl_seteq<1,32,32>(mode.read(), ap_const_lv32_A)) {
            max_out = grp_max_fu_305_ap_return.read();
        } else {
            max_out =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        max_out =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void top::thread_max_out_ap_vld() {
    if (((esl_seteq<1,32,32>(mode.read(), ap_const_lv32_A) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0)) || 
         (!esl_seteq<1,32,32>(ap_const_lv32_0, mode.read()) && 
          !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_1) && 
          !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_2) && 
          !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_3) && 
          !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_4) && 
          !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_5) && 
          !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_6) && 
          !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_7) && 
          !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_8) && 
          !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_9) && 
          !esl_seteq<1,32,32>(mode.read(), ap_const_lv32_A) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0)))) {
        max_out_ap_vld = ap_const_logic_1;
    } else {
        max_out_ap_vld = ap_const_logic_0;
    }
}

void top::thread_mux_ret_V() {
    if ((esl_seteq<1,32,32>(mode.read(), ap_const_lv32_7) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        mux_ret_V = grp_mux_onehot_if_fu_326_ap_return.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,32,32>(mode.read(), ap_const_lv32_4))) {
        mux_ret_V = op2_V_assign_s_mux_2to1_fu_473_ap_return.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,32,32>(mode.read(), ap_const_lv32_5))) {
        mux_ret_V = op2_V_assign_1_s_mux_binary_fu_450_ap_return.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,32,32>(mode.read(), ap_const_lv32_6))) {
        mux_ret_V = op2_V_assign_2_s_mux_onehot_fu_355_ap_return.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,32,32>(mode.read(), ap_const_lv32_8))) {
        mux_ret_V = op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,32,32>(mode.read(), ap_const_lv32_9))) {
        mux_ret_V = op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return.read();
    } else {
        mux_ret_V =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void top::thread_mux_ret_V_ap_vld() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,32,32>(mode.read(), ap_const_lv32_9)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,32,32>(mode.read(), ap_const_lv32_8)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,32,32>(mode.read(), ap_const_lv32_6)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,32,32>(mode.read(), ap_const_lv32_5)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,32,32>(mode.read(), ap_const_lv32_4)) || 
         (esl_seteq<1,32,32>(mode.read(), ap_const_lv32_7) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0)))) {
        mux_ret_V_ap_vld = ap_const_logic_1;
    } else {
        mux_ret_V_ap_vld = ap_const_logic_0;
    }
}

void top::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<2>) ("XX");
            break;
    }
}

void top::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"leadone_in_V\" :  \"" << leadone_in_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"leadone_out_V\" :  \"" << leadone_out_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"leadone_out_V_ap_vld\" :  \"" << leadone_out_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"leadone_ret\" :  \"" << leadone_ret.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"leadone_ret_ap_vld\" :  \"" << leadone_ret_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_in_0_V\" :  \"" << mux_in_0_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_in_1_V\" :  \"" << mux_in_1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_in_2_V\" :  \"" << mux_in_2_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_in_3_V\" :  \"" << mux_in_3_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_in_4_V\" :  \"" << mux_in_4_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_in_5_V\" :  \"" << mux_in_5_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_in_6_V\" :  \"" << mux_in_6_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_in_7_V\" :  \"" << mux_in_7_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_sel_onehot_V\" :  \"" << mux_sel_onehot_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_sel0_V\" :  \"" << mux_sel0_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_sel1_V\" :  \"" << mux_sel1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_s\" :  \"" << mux_s.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mux_ret_V\" :  \"" << mux_ret_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mux_ret_V_ap_vld\" :  \"" << mux_ret_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max_in_0\" :  \"" << max_in_0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max_in_1\" :  \"" << max_in_1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max_in_2\" :  \"" << max_in_2.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max_in_3\" :  \"" << max_in_3.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max_in_4\" :  \"" << max_in_4.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max_in_5\" :  \"" << max_in_5.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max_in_6\" :  \"" << max_in_6.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"max_in_7\" :  \"" << max_in_7.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_out\" :  \"" << max_out.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"max_out_ap_vld\" :  \"" << max_out_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mode\" :  \"" << mode.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

