// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din_0_read,
        din_1_read,
        din_2_read,
        din_3_read,
        din_4_read,
        din_5_read,
        din_6_read,
        din_7_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] din_0_read;
input  [31:0] din_1_read;
input  [31:0] din_2_read;
input  [31:0] din_3_read;
input  [31:0] din_4_read;
input  [31:0] din_5_read;
input  [31:0] din_6_read;
input  [31:0] din_7_read;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] m0_1_fu_100_p3;
reg   [31:0] m0_1_reg_160;
wire   [31:0] m1_2_fu_142_p3;
reg   [31:0] m1_2_reg_166;
wire   [0:0] icmp_ln8_fu_66_p2;
wire   [0:0] icmp_ln8_1_fu_80_p2;
wire   [31:0] m0_fu_72_p3;
wire   [31:0] m1_fu_86_p3;
wire   [0:0] icmp_ln8_2_fu_94_p2;
wire   [0:0] icmp_ln8_3_fu_108_p2;
wire   [0:0] icmp_ln8_4_fu_122_p2;
wire   [31:0] m0_2_fu_114_p3;
wire   [31:0] m1_1_fu_128_p3;
wire   [0:0] icmp_ln8_5_fu_136_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln8_6_fu_150_p2;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        m0_1_reg_160 <= m0_1_fu_100_p3;
        m1_2_reg_166 <= m1_2_fu_142_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = ((icmp_ln8_6_fu_150_p2[0:0] === 1'b1) ? m0_1_reg_160 : m1_2_reg_166);

assign icmp_ln8_1_fu_80_p2 = (($signed(din_2_read) > $signed(din_3_read)) ? 1'b1 : 1'b0);

assign icmp_ln8_2_fu_94_p2 = (($signed(m0_fu_72_p3) > $signed(m1_fu_86_p3)) ? 1'b1 : 1'b0);

assign icmp_ln8_3_fu_108_p2 = (($signed(din_4_read) > $signed(din_5_read)) ? 1'b1 : 1'b0);

assign icmp_ln8_4_fu_122_p2 = (($signed(din_6_read) > $signed(din_7_read)) ? 1'b1 : 1'b0);

assign icmp_ln8_5_fu_136_p2 = (($signed(m0_2_fu_114_p3) > $signed(m1_1_fu_128_p3)) ? 1'b1 : 1'b0);

assign icmp_ln8_6_fu_150_p2 = (($signed(m0_1_reg_160) > $signed(m1_2_reg_166)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_66_p2 = (($signed(din_0_read) > $signed(din_1_read)) ? 1'b1 : 1'b0);

assign m0_1_fu_100_p3 = ((icmp_ln8_2_fu_94_p2[0:0] === 1'b1) ? m0_fu_72_p3 : m1_fu_86_p3);

assign m0_2_fu_114_p3 = ((icmp_ln8_3_fu_108_p2[0:0] === 1'b1) ? din_4_read : din_5_read);

assign m0_fu_72_p3 = ((icmp_ln8_fu_66_p2[0:0] === 1'b1) ? din_0_read : din_1_read);

assign m1_1_fu_128_p3 = ((icmp_ln8_4_fu_122_p2[0:0] === 1'b1) ? din_6_read : din_7_read);

assign m1_2_fu_142_p3 = ((icmp_ln8_5_fu_136_p2[0:0] === 1'b1) ? m0_2_fu_114_p3 : m1_1_fu_128_p3);

assign m1_fu_86_p3 = ((icmp_ln8_1_fu_80_p2[0:0] === 1'b1) ? din_2_read : din_3_read);

endmodule //max
