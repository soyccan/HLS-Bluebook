-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    leadone_in_V : IN STD_LOGIC_VECTOR (31 downto 0);
    leadone_out_V : OUT STD_LOGIC_VECTOR (4 downto 0);
    leadone_out_V_ap_vld : OUT STD_LOGIC;
    leadone_ret : OUT STD_LOGIC;
    leadone_ret_ap_vld : OUT STD_LOGIC;
    mux_in_0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    mux_in_1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    mux_in_2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    mux_in_3_V : IN STD_LOGIC_VECTOR (7 downto 0);
    mux_in_4_V : IN STD_LOGIC_VECTOR (7 downto 0);
    mux_in_5_V : IN STD_LOGIC_VECTOR (7 downto 0);
    mux_in_6_V : IN STD_LOGIC_VECTOR (7 downto 0);
    mux_in_7_V : IN STD_LOGIC_VECTOR (7 downto 0);
    mux_sel_onehot_V : IN STD_LOGIC_VECTOR (7 downto 0);
    mux_sel0_V : IN STD_LOGIC_VECTOR (2 downto 0);
    mux_sel1_V : IN STD_LOGIC_VECTOR (2 downto 0);
    mux_s : IN STD_LOGIC;
    mux_ret_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    mux_ret_V_ap_vld : OUT STD_LOGIC;
    max_in_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_in_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_in_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_in_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_in_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_in_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_in_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_in_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_out_ap_vld : OUT STD_LOGIC;
    mode : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.424000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=539,HLS_SYN_LUT=2436,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_490 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_502 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_514 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal mux_in_0_V_read_3_reg_588 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_in_1_V_read_3_reg_593 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_in_2_V_read_2_reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_in_3_V_read_2_reg_603 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_in_4_V_read_2_reg_608 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_in_5_V_read_2_reg_613 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_in_6_V_read_2_reg_618 : STD_LOGIC_VECTOR (7 downto 0);
    signal mux_in_7_V_read_2_reg_623 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_max_algorithmic_fu_284_ap_start : STD_LOGIC;
    signal grp_max_algorithmic_fu_284_ap_done : STD_LOGIC;
    signal grp_max_algorithmic_fu_284_ap_idle : STD_LOGIC;
    signal grp_max_algorithmic_fu_284_ap_ready : STD_LOGIC;
    signal grp_max_algorithmic_fu_284_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_fu_305_ap_start : STD_LOGIC;
    signal grp_max_fu_305_ap_done : STD_LOGIC;
    signal grp_max_fu_305_ap_idle : STD_LOGIC;
    signal grp_max_fu_305_ap_ready : STD_LOGIC;
    signal grp_max_fu_305_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mux_onehot_if_fu_326_ap_start : STD_LOGIC;
    signal grp_mux_onehot_if_fu_326_ap_done : STD_LOGIC;
    signal grp_mux_onehot_if_fu_326_ap_idle : STD_LOGIC;
    signal grp_mux_onehot_if_fu_326_ap_ready : STD_LOGIC;
    signal grp_mux_onehot_if_fu_326_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal call_ret7_leading_ones_templat_fu_349_ap_ready : STD_LOGIC;
    signal call_ret7_leading_ones_templat_fu_349_ap_return_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal call_ret7_leading_ones_templat_fu_349_ap_return_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal op2_V_assign_2_s_mux_onehot_fu_355_ap_ready : STD_LOGIC;
    signal op2_V_assign_2_s_mux_onehot_fu_355_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_leading_ones_brutefo_fu_378_ap_start : STD_LOGIC;
    signal grp_leading_ones_brutefo_fu_378_ap_done : STD_LOGIC;
    signal grp_leading_ones_brutefo_fu_378_ap_idle : STD_LOGIC;
    signal grp_leading_ones_brutefo_fu_378_ap_ready : STD_LOGIC;
    signal grp_leading_ones_brutefo_fu_378_ap_return_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_leading_ones_brutefo_fu_378_ap_return_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_leading_ones_log2_fu_384_ap_start : STD_LOGIC;
    signal grp_leading_ones_log2_fu_384_ap_done : STD_LOGIC;
    signal grp_leading_ones_log2_fu_384_ap_idle : STD_LOGIC;
    signal grp_leading_ones_log2_fu_384_ap_ready : STD_LOGIC;
    signal grp_leading_ones_log2_fu_384_ap_return_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_leading_ones_log2_fu_384_ap_return_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_ready : STD_LOGIC;
    signal op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_leading_ones_fu_417_ap_start : STD_LOGIC;
    signal grp_leading_ones_fu_417_ap_done : STD_LOGIC;
    signal grp_leading_ones_fu_417_ap_idle : STD_LOGIC;
    signal grp_leading_ones_fu_417_ap_ready : STD_LOGIC;
    signal grp_leading_ones_fu_417_ap_return_0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_leading_ones_fu_417_ap_return_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal op2_V_assign_5_s_mux_binary_opt_fu_423_ap_ready : STD_LOGIC;
    signal op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_assign_1_s_mux_binary_fu_450_ap_ready : STD_LOGIC;
    signal op2_V_assign_1_s_mux_binary_fu_450_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_assign_s_mux_2to1_fu_473_ap_ready : STD_LOGIC;
    signal op2_V_assign_s_mux_2to1_fu_473_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_max_algorithmic_fu_284_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_max_fu_305_ap_start_reg : STD_LOGIC := '0';
    signal grp_mux_onehot_if_fu_326_ap_start_reg : STD_LOGIC := '0';
    signal grp_leading_ones_brutefo_fu_378_ap_start_reg : STD_LOGIC := '0';
    signal grp_leading_ones_log2_fu_384_ap_start_reg : STD_LOGIC := '0';
    signal grp_leading_ones_fu_417_ap_start_reg : STD_LOGIC := '0';
    signal ap_predicate_op146_call_state2 : BOOLEAN;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_condition_99 : BOOLEAN;

    component max_algorithmic IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        din_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        din_0_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_1_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_2_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_3_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_4_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_5_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_6_read : IN STD_LOGIC_VECTOR (31 downto 0);
        din_7_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mux_onehot_if IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        din_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_1_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_2_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_3_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_4_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_5_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_6_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_7_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        sel_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component leading_ones_templat IS
    port (
        ap_ready : OUT STD_LOGIC;
        din_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component mux_onehot IS
    port (
        ap_ready : OUT STD_LOGIC;
        din_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_1_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_2_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_3_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_4_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_5_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_6_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_7_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        sel_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component leading_ones_brutefo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        din_V : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component leading_ones_log2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        din_V : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component mux_binary2onehot_op IS
    port (
        ap_ready : OUT STD_LOGIC;
        din_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_1_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_2_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_3_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_4_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_5_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_6_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_7_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        sel0_V : IN STD_LOGIC_VECTOR (2 downto 0);
        sel1_V : IN STD_LOGIC_VECTOR (2 downto 0);
        s : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component leading_ones IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        din_V : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component mux_binary_opt IS
    port (
        ap_ready : OUT STD_LOGIC;
        din_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_1_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_2_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_3_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_4_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_5_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_6_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_7_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        sel0_V : IN STD_LOGIC_VECTOR (2 downto 0);
        sel1_V : IN STD_LOGIC_VECTOR (2 downto 0);
        s : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mux_binary IS
    port (
        ap_ready : OUT STD_LOGIC;
        din_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_1_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_2_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_3_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_4_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_5_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_6_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_7_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        sel_V : IN STD_LOGIC_VECTOR (2 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component mux_2to1 IS
    port (
        ap_ready : OUT STD_LOGIC;
        din_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        din_1_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    grp_max_algorithmic_fu_284 : component max_algorithmic
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_algorithmic_fu_284_ap_start,
        ap_done => grp_max_algorithmic_fu_284_ap_done,
        ap_idle => grp_max_algorithmic_fu_284_ap_idle,
        ap_ready => grp_max_algorithmic_fu_284_ap_ready,
        din_0_read => reg_484,
        din_1_read => reg_490,
        din_2_read => reg_496,
        din_3_read => reg_502,
        din_4_read => reg_508,
        din_5_read => reg_514,
        din_6_read => reg_520,
        din_7_read => reg_526,
        ap_return => grp_max_algorithmic_fu_284_ap_return);

    grp_max_fu_305 : component max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_fu_305_ap_start,
        ap_done => grp_max_fu_305_ap_done,
        ap_idle => grp_max_fu_305_ap_idle,
        ap_ready => grp_max_fu_305_ap_ready,
        din_0_read => reg_484,
        din_1_read => reg_490,
        din_2_read => reg_496,
        din_3_read => reg_502,
        din_4_read => reg_508,
        din_5_read => reg_514,
        din_6_read => reg_520,
        din_7_read => reg_526,
        ap_return => grp_max_fu_305_ap_return);

    grp_mux_onehot_if_fu_326 : component mux_onehot_if
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mux_onehot_if_fu_326_ap_start,
        ap_done => grp_mux_onehot_if_fu_326_ap_done,
        ap_idle => grp_mux_onehot_if_fu_326_ap_idle,
        ap_ready => grp_mux_onehot_if_fu_326_ap_ready,
        din_0_V_read => mux_in_0_V_read_3_reg_588,
        din_1_V_read => mux_in_1_V_read_3_reg_593,
        din_2_V_read => mux_in_2_V_read_2_reg_598,
        din_3_V_read => mux_in_3_V_read_2_reg_603,
        din_4_V_read => mux_in_4_V_read_2_reg_608,
        din_5_V_read => mux_in_5_V_read_2_reg_613,
        din_6_V_read => mux_in_6_V_read_2_reg_618,
        din_7_V_read => mux_in_7_V_read_2_reg_623,
        sel_V => mux_sel_onehot_V,
        ap_return => grp_mux_onehot_if_fu_326_ap_return);

    call_ret7_leading_ones_templat_fu_349 : component leading_ones_templat
    port map (
        ap_ready => call_ret7_leading_ones_templat_fu_349_ap_ready,
        din_V_read => leadone_in_V,
        ap_return_0 => call_ret7_leading_ones_templat_fu_349_ap_return_0,
        ap_return_1 => call_ret7_leading_ones_templat_fu_349_ap_return_1);

    op2_V_assign_2_s_mux_onehot_fu_355 : component mux_onehot
    port map (
        ap_ready => op2_V_assign_2_s_mux_onehot_fu_355_ap_ready,
        din_0_V_read => mux_in_0_V,
        din_1_V_read => mux_in_1_V,
        din_2_V_read => mux_in_2_V,
        din_3_V_read => mux_in_3_V,
        din_4_V_read => mux_in_4_V,
        din_5_V_read => mux_in_5_V,
        din_6_V_read => mux_in_6_V,
        din_7_V_read => mux_in_7_V,
        sel_V => mux_sel_onehot_V,
        ap_return => op2_V_assign_2_s_mux_onehot_fu_355_ap_return);

    grp_leading_ones_brutefo_fu_378 : component leading_ones_brutefo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_leading_ones_brutefo_fu_378_ap_start,
        ap_done => grp_leading_ones_brutefo_fu_378_ap_done,
        ap_idle => grp_leading_ones_brutefo_fu_378_ap_idle,
        ap_ready => grp_leading_ones_brutefo_fu_378_ap_ready,
        din_V => leadone_in_V,
        ap_return_0 => grp_leading_ones_brutefo_fu_378_ap_return_0,
        ap_return_1 => grp_leading_ones_brutefo_fu_378_ap_return_1);

    grp_leading_ones_log2_fu_384 : component leading_ones_log2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_leading_ones_log2_fu_384_ap_start,
        ap_done => grp_leading_ones_log2_fu_384_ap_done,
        ap_idle => grp_leading_ones_log2_fu_384_ap_idle,
        ap_ready => grp_leading_ones_log2_fu_384_ap_ready,
        din_V => leadone_in_V,
        ap_return_0 => grp_leading_ones_log2_fu_384_ap_return_0,
        ap_return_1 => grp_leading_ones_log2_fu_384_ap_return_1);

    op2_V_assign_4_s_mux_binary2onehot_op_fu_390 : component mux_binary2onehot_op
    port map (
        ap_ready => op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_ready,
        din_0_V_read => mux_in_0_V,
        din_1_V_read => mux_in_1_V,
        din_2_V_read => mux_in_2_V,
        din_3_V_read => mux_in_3_V,
        din_4_V_read => mux_in_4_V,
        din_5_V_read => mux_in_5_V,
        din_6_V_read => mux_in_6_V,
        din_7_V_read => mux_in_7_V,
        sel0_V => mux_sel0_V,
        sel1_V => mux_sel1_V,
        s => mux_s,
        ap_return => op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return);

    grp_leading_ones_fu_417 : component leading_ones
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_leading_ones_fu_417_ap_start,
        ap_done => grp_leading_ones_fu_417_ap_done,
        ap_idle => grp_leading_ones_fu_417_ap_idle,
        ap_ready => grp_leading_ones_fu_417_ap_ready,
        din_V => leadone_in_V,
        ap_return_0 => grp_leading_ones_fu_417_ap_return_0,
        ap_return_1 => grp_leading_ones_fu_417_ap_return_1);

    op2_V_assign_5_s_mux_binary_opt_fu_423 : component mux_binary_opt
    port map (
        ap_ready => op2_V_assign_5_s_mux_binary_opt_fu_423_ap_ready,
        din_0_V_read => mux_in_0_V,
        din_1_V_read => mux_in_1_V,
        din_2_V_read => mux_in_2_V,
        din_3_V_read => mux_in_3_V,
        din_4_V_read => mux_in_4_V,
        din_5_V_read => mux_in_5_V,
        din_6_V_read => mux_in_6_V,
        din_7_V_read => mux_in_7_V,
        sel0_V => mux_sel0_V,
        sel1_V => mux_sel1_V,
        s => mux_s,
        ap_return => op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return);

    op2_V_assign_1_s_mux_binary_fu_450 : component mux_binary
    port map (
        ap_ready => op2_V_assign_1_s_mux_binary_fu_450_ap_ready,
        din_0_V_read => mux_in_0_V,
        din_1_V_read => mux_in_1_V,
        din_2_V_read => mux_in_2_V,
        din_3_V_read => mux_in_3_V,
        din_4_V_read => mux_in_4_V,
        din_5_V_read => mux_in_5_V,
        din_6_V_read => mux_in_6_V,
        din_7_V_read => mux_in_7_V,
        sel_V => mux_sel0_V,
        ap_return => op2_V_assign_1_s_mux_binary_fu_450_ap_return);

    op2_V_assign_s_mux_2to1_fu_473 : component mux_2to1
    port map (
        ap_ready => op2_V_assign_s_mux_2to1_fu_473_ap_ready,
        din_0_V_read => mux_in_0_V,
        din_1_V_read => mux_in_1_V,
        sel => mux_s,
        ap_return => op2_V_assign_s_mux_2to1_fu_473_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_leading_ones_brutefo_fu_378_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_leading_ones_brutefo_fu_378_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_leading_ones_brutefo_fu_378_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_leading_ones_brutefo_fu_378_ap_ready = ap_const_logic_1)) then 
                    grp_leading_ones_brutefo_fu_378_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_leading_ones_fu_417_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_leading_ones_fu_417_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (mode = ap_const_lv32_0))) then 
                    grp_leading_ones_fu_417_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_leading_ones_fu_417_ap_ready = ap_const_logic_1)) then 
                    grp_leading_ones_fu_417_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_leading_ones_log2_fu_384_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_leading_ones_log2_fu_384_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_leading_ones_log2_fu_384_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_leading_ones_log2_fu_384_ap_ready = ap_const_logic_1)) then 
                    grp_leading_ones_log2_fu_384_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_algorithmic_fu_284_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_algorithmic_fu_284_ap_start_reg <= ap_const_logic_0;
            else
                if ((not((mode = ap_const_lv32_9)) and not((mode = ap_const_lv32_8)) and not((mode = ap_const_lv32_7)) and not((mode = ap_const_lv32_6)) and not((mode = ap_const_lv32_5)) and not((mode = ap_const_lv32_4)) and not((mode = ap_const_lv32_3)) and not((mode = ap_const_lv32_2)) and not((mode = ap_const_lv32_1)) and not((mode = ap_const_lv32_0)) and not((mode = ap_const_lv32_A)) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_max_algorithmic_fu_284_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_algorithmic_fu_284_ap_ready = ap_const_logic_1)) then 
                    grp_max_algorithmic_fu_284_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_fu_305_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_fu_305_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_max_fu_305_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_fu_305_ap_ready = ap_const_logic_1)) then 
                    grp_max_fu_305_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mux_onehot_if_fu_326_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mux_onehot_if_fu_326_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_mux_onehot_if_fu_326_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mux_onehot_if_fu_326_ap_ready = ap_const_logic_1)) then 
                    grp_mux_onehot_if_fu_326_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_7) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                mux_in_0_V_read_3_reg_588 <= mux_in_0_V;
                mux_in_1_V_read_3_reg_593 <= mux_in_1_V;
                mux_in_2_V_read_2_reg_598 <= mux_in_2_V;
                mux_in_3_V_read_2_reg_603 <= mux_in_3_V;
                mux_in_4_V_read_2_reg_608 <= mux_in_4_V;
                mux_in_5_V_read_2_reg_613 <= mux_in_5_V;
                mux_in_6_V_read_2_reg_618 <= mux_in_6_V;
                mux_in_7_V_read_2_reg_623 <= mux_in_7_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((mode = ap_const_lv32_9)) and not((mode = ap_const_lv32_8)) and not((mode = ap_const_lv32_7)) and not((mode = ap_const_lv32_6)) and not((mode = ap_const_lv32_5)) and not((mode = ap_const_lv32_4)) and not((mode = ap_const_lv32_3)) and not((mode = ap_const_lv32_2)) and not((mode = ap_const_lv32_1)) and not((mode = ap_const_lv32_0)) and not((mode = ap_const_lv32_A)) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_A) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then
                reg_484 <= max_in_0;
                reg_490 <= max_in_1;
                reg_496 <= max_in_2;
                reg_502 <= max_in_3;
                reg_508 <= max_in_4;
                reg_514 <= max_in_5;
                reg_520 <= max_in_6;
                reg_526 <= max_in_7;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state2_on_subcall_done_assign_proc : process(mode, grp_max_algorithmic_fu_284_ap_done, grp_max_fu_305_ap_done, grp_mux_onehot_if_fu_326_ap_done, grp_leading_ones_brutefo_fu_378_ap_done, grp_leading_ones_log2_fu_384_ap_done, grp_leading_ones_fu_417_ap_done, ap_predicate_op146_call_state2)
    begin
                ap_block_state2_on_subcall_done <= (((mode = ap_const_lv32_7) and (grp_mux_onehot_if_fu_326_ap_done = ap_const_logic_0)) or ((mode = ap_const_lv32_2) and (grp_leading_ones_log2_fu_384_ap_done = ap_const_logic_0)) or ((mode = ap_const_lv32_1) and (grp_leading_ones_brutefo_fu_378_ap_done = ap_const_logic_0)) or ((grp_leading_ones_fu_417_ap_done = ap_const_logic_0) and (mode = ap_const_lv32_0)) or ((mode = ap_const_lv32_A) and (grp_max_fu_305_ap_done = ap_const_logic_0)) or ((grp_max_algorithmic_fu_284_ap_done = ap_const_logic_0) and (ap_predicate_op146_call_state2 = ap_const_boolean_1)));
    end process;


    ap_condition_99_assign_proc : process(mode)
    begin
                ap_condition_99 <= (not((mode = ap_const_lv32_9)) and not((mode = ap_const_lv32_8)) and not((mode = ap_const_lv32_7)) and not((mode = ap_const_lv32_6)) and not((mode = ap_const_lv32_5)) and not((mode = ap_const_lv32_4)) and not((mode = ap_const_lv32_3)) and not((mode = ap_const_lv32_2)) and not((mode = ap_const_lv32_1)) and not((mode = ap_const_lv32_0)) and not((mode = ap_const_lv32_A)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op146_call_state2_assign_proc : process(mode)
    begin
                ap_predicate_op146_call_state2 <= (not((mode = ap_const_lv32_9)) and not((mode = ap_const_lv32_8)) and not((mode = ap_const_lv32_7)) and not((mode = ap_const_lv32_6)) and not((mode = ap_const_lv32_5)) and not((mode = ap_const_lv32_4)) and not((mode = ap_const_lv32_3)) and not((mode = ap_const_lv32_2)) and not((mode = ap_const_lv32_1)) and not((mode = ap_const_lv32_0)) and not((mode = ap_const_lv32_A)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_leading_ones_brutefo_fu_378_ap_start <= grp_leading_ones_brutefo_fu_378_ap_start_reg;
    grp_leading_ones_fu_417_ap_start <= grp_leading_ones_fu_417_ap_start_reg;
    grp_leading_ones_log2_fu_384_ap_start <= grp_leading_ones_log2_fu_384_ap_start_reg;
    grp_max_algorithmic_fu_284_ap_start <= grp_max_algorithmic_fu_284_ap_start_reg;
    grp_max_fu_305_ap_start <= grp_max_fu_305_ap_start_reg;
    grp_mux_onehot_if_fu_326_ap_start <= grp_mux_onehot_if_fu_326_ap_start_reg;

    leadone_out_V_assign_proc : process(ap_start, ap_CS_fsm_state1, mode, call_ret7_leading_ones_templat_fu_349_ap_return_1, grp_leading_ones_brutefo_fu_378_ap_return_1, grp_leading_ones_log2_fu_384_ap_return_1, grp_leading_ones_fu_417_ap_return_1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2) and (mode = ap_const_lv32_0))) then 
            leadone_out_V <= grp_leading_ones_fu_417_ap_return_1;
        elsif (((mode = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            leadone_out_V <= grp_leading_ones_brutefo_fu_378_ap_return_1;
        elsif (((mode = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            leadone_out_V <= grp_leading_ones_log2_fu_384_ap_return_1;
        elsif (((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            leadone_out_V <= call_ret7_leading_ones_templat_fu_349_ap_return_1;
        else 
            leadone_out_V <= "XXXXX";
        end if; 
    end process;


    leadone_out_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, mode, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if ((((mode = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((mode = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2) and (mode = ap_const_lv32_0)) or ((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            leadone_out_V_ap_vld <= ap_const_logic_1;
        else 
            leadone_out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    leadone_ret_assign_proc : process(ap_start, ap_CS_fsm_state1, mode, call_ret7_leading_ones_templat_fu_349_ap_return_0, grp_leading_ones_brutefo_fu_378_ap_return_0, grp_leading_ones_log2_fu_384_ap_return_0, grp_leading_ones_fu_417_ap_return_0, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2) and (mode = ap_const_lv32_0))) then 
            leadone_ret <= grp_leading_ones_fu_417_ap_return_0(0);
        elsif (((mode = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            leadone_ret <= grp_leading_ones_brutefo_fu_378_ap_return_0(0);
        elsif (((mode = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            leadone_ret <= grp_leading_ones_log2_fu_384_ap_return_0(0);
        elsif (((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            leadone_ret <= call_ret7_leading_ones_templat_fu_349_ap_return_0(0);
        else 
            leadone_ret <= 'X';
        end if; 
    end process;


    leadone_ret_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, mode, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if ((((mode = ap_const_lv32_2) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((mode = ap_const_lv32_1) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2) and (mode = ap_const_lv32_0)) or ((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_3) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            leadone_ret_ap_vld <= ap_const_logic_1;
        else 
            leadone_ret_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    max_out_assign_proc : process(mode, grp_max_algorithmic_fu_284_ap_return, grp_max_fu_305_ap_return, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_condition_99)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
            if ((ap_const_boolean_1 = ap_condition_99)) then 
                max_out <= grp_max_algorithmic_fu_284_ap_return;
            elsif ((mode = ap_const_lv32_A)) then 
                max_out <= grp_max_fu_305_ap_return;
            else 
                max_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            max_out <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    max_out_ap_vld_assign_proc : process(mode, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((not((mode = ap_const_lv32_9)) and not((mode = ap_const_lv32_8)) and not((mode = ap_const_lv32_7)) and not((mode = ap_const_lv32_6)) and not((mode = ap_const_lv32_5)) and not((mode = ap_const_lv32_4)) and not((mode = ap_const_lv32_3)) and not((mode = ap_const_lv32_2)) and not((mode = ap_const_lv32_1)) and not((mode = ap_const_lv32_0)) and not((mode = ap_const_lv32_A)) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((mode = ap_const_lv32_A) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            max_out_ap_vld <= ap_const_logic_1;
        else 
            max_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    mux_ret_V_assign_proc : process(ap_start, ap_CS_fsm_state1, mode, grp_mux_onehot_if_fu_326_ap_return, op2_V_assign_2_s_mux_onehot_fu_355_ap_return, op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return, op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return, op2_V_assign_1_s_mux_binary_fu_450_ap_return, op2_V_assign_s_mux_2to1_fu_473_ap_return, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((mode = ap_const_lv32_7) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            mux_ret_V <= grp_mux_onehot_if_fu_326_ap_return;
        elsif (((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_ret_V <= op2_V_assign_s_mux_2to1_fu_473_ap_return;
        elsif (((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_ret_V <= op2_V_assign_1_s_mux_binary_fu_450_ap_return;
        elsif (((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_ret_V <= op2_V_assign_2_s_mux_onehot_fu_355_ap_return;
        elsif (((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_ret_V <= op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return;
        elsif (((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_ret_V <= op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return;
        else 
            mux_ret_V <= "XXXXXXXX";
        end if; 
    end process;


    mux_ret_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, mode, ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if ((((mode = ap_const_lv32_7) and (ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_9) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_8) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_6) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_5) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (mode = ap_const_lv32_4) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            mux_ret_V_ap_vld <= ap_const_logic_1;
        else 
            mux_ret_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
