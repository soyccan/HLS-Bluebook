-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mux_onehot_if is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    din_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    din_1_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    din_2_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    din_3_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    din_4_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    din_5_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    din_6_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    din_7_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    sel_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of mux_onehot_if is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln879_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_345 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_7_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_7_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_reg_355 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_3_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_3_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_5_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_5_reg_366 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_5_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_5_reg_371 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_9_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_9_reg_376 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal or_ln879_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_1_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_1_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_2_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_2_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_4_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_3_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_3_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_5_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_4_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_4_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_6_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_5_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_4_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_2_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_6_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln879_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_fu_260_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln879_1_fu_267_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln879_7_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_2_fu_274_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln879_3_fu_286_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln879_8_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_4_fu_297_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln879_5_fu_304_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln879_10_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_11_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln879_6_fu_318_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln879_7_fu_330_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= select_ln879_7_fu_330_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                and_ln879_1_reg_355 <= and_ln879_1_fu_154_p2;
                and_ln879_3_reg_361 <= and_ln879_3_fu_190_p2;
                and_ln879_5_reg_366 <= and_ln879_5_fu_226_p2;
                icmp_ln879_1_reg_345 <= icmp_ln879_1_fu_100_p2;
                icmp_ln879_7_reg_350 <= icmp_ln879_7_fu_136_p2;
                icmp_ln879_reg_338 <= icmp_ln879_fu_94_p2;
                or_ln879_5_reg_371 <= or_ln879_5_fu_232_p2;
                or_ln879_9_reg_376 <= or_ln879_9_fu_244_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    and_ln879_1_fu_154_p2 <= (xor_ln879_1_fu_148_p2 and icmp_ln879_2_fu_106_p2);
    and_ln879_2_fu_172_p2 <= (xor_ln879_2_fu_166_p2 and icmp_ln879_3_fu_112_p2);
    and_ln879_3_fu_190_p2 <= (xor_ln879_3_fu_184_p2 and icmp_ln879_4_fu_118_p2);
    and_ln879_4_fu_208_p2 <= (xor_ln879_4_fu_202_p2 and icmp_ln879_5_fu_124_p2);
    and_ln879_5_fu_226_p2 <= (xor_ln879_5_fu_220_p2 and icmp_ln879_6_fu_130_p2);
    and_ln879_fu_255_p2 <= (xor_ln879_fu_250_p2 and icmp_ln879_1_reg_345);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, select_ln879_7_fu_330_p3, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= select_ln879_7_fu_330_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    icmp_ln879_1_fu_100_p2 <= "1" when (sel_V = ap_const_lv8_2) else "0";
    icmp_ln879_2_fu_106_p2 <= "1" when (sel_V = ap_const_lv8_4) else "0";
    icmp_ln879_3_fu_112_p2 <= "1" when (sel_V = ap_const_lv8_8) else "0";
    icmp_ln879_4_fu_118_p2 <= "1" when (sel_V = ap_const_lv8_10) else "0";
    icmp_ln879_5_fu_124_p2 <= "1" when (sel_V = ap_const_lv8_20) else "0";
    icmp_ln879_6_fu_130_p2 <= "1" when (sel_V = ap_const_lv8_40) else "0";
    icmp_ln879_7_fu_136_p2 <= "1" when (sel_V = ap_const_lv8_80) else "0";
    icmp_ln879_fu_94_p2 <= "1" when (sel_V = ap_const_lv8_1) else "0";
    or_ln879_10_fu_312_p2 <= (or_ln879_8_fu_293_p2 or or_ln879_7_fu_281_p2);
    or_ln879_11_fu_325_p2 <= (or_ln879_9_reg_376 or or_ln879_10_fu_312_p2);
    or_ln879_1_fu_160_p2 <= (or_ln879_fu_142_p2 or icmp_ln879_2_fu_106_p2);
    or_ln879_2_fu_178_p2 <= (or_ln879_1_fu_160_p2 or icmp_ln879_3_fu_112_p2);
    or_ln879_3_fu_196_p2 <= (or_ln879_2_fu_178_p2 or icmp_ln879_4_fu_118_p2);
    or_ln879_4_fu_214_p2 <= (or_ln879_3_fu_196_p2 or icmp_ln879_5_fu_124_p2);
    or_ln879_5_fu_232_p2 <= (and_ln879_5_fu_226_p2 or and_ln879_4_fu_208_p2);
    or_ln879_6_fu_238_p2 <= (and_ln879_3_fu_190_p2 or and_ln879_2_fu_172_p2);
    or_ln879_7_fu_281_p2 <= (and_ln879_fu_255_p2 or and_ln879_1_reg_355);
    or_ln879_8_fu_293_p2 <= (icmp_ln879_reg_338 or icmp_ln879_7_reg_350);
    or_ln879_9_fu_244_p2 <= (or_ln879_6_fu_238_p2 or or_ln879_5_fu_232_p2);
    or_ln879_fu_142_p2 <= (icmp_ln879_fu_94_p2 or icmp_ln879_1_fu_100_p2);
    select_ln879_1_fu_267_p3 <= 
        din_4_V_read when (and_ln879_3_reg_361(0) = '1') else 
        din_3_V_read;
    select_ln879_2_fu_274_p3 <= 
        din_2_V_read when (and_ln879_1_reg_355(0) = '1') else 
        din_1_V_read;
    select_ln879_3_fu_286_p3 <= 
        din_0_V_read when (icmp_ln879_reg_338(0) = '1') else 
        din_7_V_read;
    select_ln879_4_fu_297_p3 <= 
        select_ln879_fu_260_p3 when (or_ln879_5_reg_371(0) = '1') else 
        select_ln879_1_fu_267_p3;
    select_ln879_5_fu_304_p3 <= 
        select_ln879_2_fu_274_p3 when (or_ln879_7_fu_281_p2(0) = '1') else 
        select_ln879_3_fu_286_p3;
    select_ln879_6_fu_318_p3 <= 
        select_ln879_4_fu_297_p3 when (or_ln879_9_reg_376(0) = '1') else 
        select_ln879_5_fu_304_p3;
    select_ln879_7_fu_330_p3 <= 
        select_ln879_6_fu_318_p3 when (or_ln879_11_fu_325_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln879_fu_260_p3 <= 
        din_6_V_read when (and_ln879_5_reg_366(0) = '1') else 
        din_5_V_read;
    xor_ln879_1_fu_148_p2 <= (or_ln879_fu_142_p2 xor ap_const_lv1_1);
    xor_ln879_2_fu_166_p2 <= (or_ln879_1_fu_160_p2 xor ap_const_lv1_1);
    xor_ln879_3_fu_184_p2 <= (or_ln879_2_fu_178_p2 xor ap_const_lv1_1);
    xor_ln879_4_fu_202_p2 <= (or_ln879_3_fu_196_p2 xor ap_const_lv1_1);
    xor_ln879_5_fu_220_p2 <= (or_ln879_4_fu_214_p2 xor ap_const_lv1_1);
    xor_ln879_fu_250_p2 <= (icmp_ln879_reg_338 xor ap_const_lv1_1);
end behav;
