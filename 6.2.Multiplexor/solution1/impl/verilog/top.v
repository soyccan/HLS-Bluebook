// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.424000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=539,HLS_SYN_LUT=2436,HLS_VERSION=2019_2}" *)

module top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        leadone_in_V,
        leadone_out_V,
        leadone_out_V_ap_vld,
        leadone_ret,
        leadone_ret_ap_vld,
        mux_in_0_V,
        mux_in_1_V,
        mux_in_2_V,
        mux_in_3_V,
        mux_in_4_V,
        mux_in_5_V,
        mux_in_6_V,
        mux_in_7_V,
        mux_sel_onehot_V,
        mux_sel0_V,
        mux_sel1_V,
        mux_s,
        mux_ret_V,
        mux_ret_V_ap_vld,
        max_in_0,
        max_in_1,
        max_in_2,
        max_in_3,
        max_in_4,
        max_in_5,
        max_in_6,
        max_in_7,
        max_out,
        max_out_ap_vld,
        mode
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] leadone_in_V;
output  [4:0] leadone_out_V;
output   leadone_out_V_ap_vld;
output   leadone_ret;
output   leadone_ret_ap_vld;
input  [7:0] mux_in_0_V;
input  [7:0] mux_in_1_V;
input  [7:0] mux_in_2_V;
input  [7:0] mux_in_3_V;
input  [7:0] mux_in_4_V;
input  [7:0] mux_in_5_V;
input  [7:0] mux_in_6_V;
input  [7:0] mux_in_7_V;
input  [7:0] mux_sel_onehot_V;
input  [2:0] mux_sel0_V;
input  [2:0] mux_sel1_V;
input   mux_s;
output  [7:0] mux_ret_V;
output   mux_ret_V_ap_vld;
input  [31:0] max_in_0;
input  [31:0] max_in_1;
input  [31:0] max_in_2;
input  [31:0] max_in_3;
input  [31:0] max_in_4;
input  [31:0] max_in_5;
input  [31:0] max_in_6;
input  [31:0] max_in_7;
output  [31:0] max_out;
output   max_out_ap_vld;
input  [31:0] mode;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] leadone_out_V;
reg leadone_out_V_ap_vld;
reg leadone_ret;
reg leadone_ret_ap_vld;
reg[7:0] mux_ret_V;
reg mux_ret_V_ap_vld;
reg[31:0] max_out;
reg max_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_484;
reg   [31:0] reg_490;
reg   [31:0] reg_496;
reg   [31:0] reg_502;
reg   [31:0] reg_508;
reg   [31:0] reg_514;
reg   [31:0] reg_520;
reg   [31:0] reg_526;
reg   [7:0] mux_in_0_V_read_3_reg_588;
reg   [7:0] mux_in_1_V_read_3_reg_593;
reg   [7:0] mux_in_2_V_read_2_reg_598;
reg   [7:0] mux_in_3_V_read_2_reg_603;
reg   [7:0] mux_in_4_V_read_2_reg_608;
reg   [7:0] mux_in_5_V_read_2_reg_613;
reg   [7:0] mux_in_6_V_read_2_reg_618;
reg   [7:0] mux_in_7_V_read_2_reg_623;
wire    grp_max_algorithmic_fu_284_ap_start;
wire    grp_max_algorithmic_fu_284_ap_done;
wire    grp_max_algorithmic_fu_284_ap_idle;
wire    grp_max_algorithmic_fu_284_ap_ready;
wire   [31:0] grp_max_algorithmic_fu_284_ap_return;
wire    grp_max_fu_305_ap_start;
wire    grp_max_fu_305_ap_done;
wire    grp_max_fu_305_ap_idle;
wire    grp_max_fu_305_ap_ready;
wire   [31:0] grp_max_fu_305_ap_return;
wire    grp_mux_onehot_if_fu_326_ap_start;
wire    grp_mux_onehot_if_fu_326_ap_done;
wire    grp_mux_onehot_if_fu_326_ap_idle;
wire    grp_mux_onehot_if_fu_326_ap_ready;
wire   [7:0] grp_mux_onehot_if_fu_326_ap_return;
wire    call_ret7_leading_ones_templat_fu_349_ap_ready;
wire   [0:0] call_ret7_leading_ones_templat_fu_349_ap_return_0;
wire   [4:0] call_ret7_leading_ones_templat_fu_349_ap_return_1;
wire    op2_V_assign_2_s_mux_onehot_fu_355_ap_ready;
wire   [7:0] op2_V_assign_2_s_mux_onehot_fu_355_ap_return;
wire    grp_leading_ones_brutefo_fu_378_ap_start;
wire    grp_leading_ones_brutefo_fu_378_ap_done;
wire    grp_leading_ones_brutefo_fu_378_ap_idle;
wire    grp_leading_ones_brutefo_fu_378_ap_ready;
wire   [0:0] grp_leading_ones_brutefo_fu_378_ap_return_0;
wire   [4:0] grp_leading_ones_brutefo_fu_378_ap_return_1;
wire    grp_leading_ones_log2_fu_384_ap_start;
wire    grp_leading_ones_log2_fu_384_ap_done;
wire    grp_leading_ones_log2_fu_384_ap_idle;
wire    grp_leading_ones_log2_fu_384_ap_ready;
wire   [0:0] grp_leading_ones_log2_fu_384_ap_return_0;
wire   [4:0] grp_leading_ones_log2_fu_384_ap_return_1;
wire    op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_ready;
wire   [7:0] op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return;
wire    grp_leading_ones_fu_417_ap_start;
wire    grp_leading_ones_fu_417_ap_done;
wire    grp_leading_ones_fu_417_ap_idle;
wire    grp_leading_ones_fu_417_ap_ready;
wire   [0:0] grp_leading_ones_fu_417_ap_return_0;
wire   [4:0] grp_leading_ones_fu_417_ap_return_1;
wire    op2_V_assign_5_s_mux_binary_opt_fu_423_ap_ready;
wire   [7:0] op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return;
wire    op2_V_assign_1_s_mux_binary_fu_450_ap_ready;
wire   [7:0] op2_V_assign_1_s_mux_binary_fu_450_ap_return;
wire    op2_V_assign_s_mux_2to1_fu_473_ap_ready;
wire   [7:0] op2_V_assign_s_mux_2to1_fu_473_ap_return;
reg    grp_max_algorithmic_fu_284_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_max_fu_305_ap_start_reg;
reg    grp_mux_onehot_if_fu_326_ap_start_reg;
reg    grp_leading_ones_brutefo_fu_378_ap_start_reg;
reg    grp_leading_ones_log2_fu_384_ap_start_reg;
reg    grp_leading_ones_fu_417_ap_start_reg;
reg    ap_predicate_op146_call_state2;
reg    ap_block_state2_on_subcall_done;
reg   [1:0] ap_NS_fsm;
reg    ap_condition_99;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 grp_max_algorithmic_fu_284_ap_start_reg = 1'b0;
#0 grp_max_fu_305_ap_start_reg = 1'b0;
#0 grp_mux_onehot_if_fu_326_ap_start_reg = 1'b0;
#0 grp_leading_ones_brutefo_fu_378_ap_start_reg = 1'b0;
#0 grp_leading_ones_log2_fu_384_ap_start_reg = 1'b0;
#0 grp_leading_ones_fu_417_ap_start_reg = 1'b0;
end

max_algorithmic grp_max_algorithmic_fu_284(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_max_algorithmic_fu_284_ap_start),
    .ap_done(grp_max_algorithmic_fu_284_ap_done),
    .ap_idle(grp_max_algorithmic_fu_284_ap_idle),
    .ap_ready(grp_max_algorithmic_fu_284_ap_ready),
    .din_0_read(reg_484),
    .din_1_read(reg_490),
    .din_2_read(reg_496),
    .din_3_read(reg_502),
    .din_4_read(reg_508),
    .din_5_read(reg_514),
    .din_6_read(reg_520),
    .din_7_read(reg_526),
    .ap_return(grp_max_algorithmic_fu_284_ap_return)
);

max grp_max_fu_305(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_max_fu_305_ap_start),
    .ap_done(grp_max_fu_305_ap_done),
    .ap_idle(grp_max_fu_305_ap_idle),
    .ap_ready(grp_max_fu_305_ap_ready),
    .din_0_read(reg_484),
    .din_1_read(reg_490),
    .din_2_read(reg_496),
    .din_3_read(reg_502),
    .din_4_read(reg_508),
    .din_5_read(reg_514),
    .din_6_read(reg_520),
    .din_7_read(reg_526),
    .ap_return(grp_max_fu_305_ap_return)
);

mux_onehot_if grp_mux_onehot_if_fu_326(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mux_onehot_if_fu_326_ap_start),
    .ap_done(grp_mux_onehot_if_fu_326_ap_done),
    .ap_idle(grp_mux_onehot_if_fu_326_ap_idle),
    .ap_ready(grp_mux_onehot_if_fu_326_ap_ready),
    .din_0_V_read(mux_in_0_V_read_3_reg_588),
    .din_1_V_read(mux_in_1_V_read_3_reg_593),
    .din_2_V_read(mux_in_2_V_read_2_reg_598),
    .din_3_V_read(mux_in_3_V_read_2_reg_603),
    .din_4_V_read(mux_in_4_V_read_2_reg_608),
    .din_5_V_read(mux_in_5_V_read_2_reg_613),
    .din_6_V_read(mux_in_6_V_read_2_reg_618),
    .din_7_V_read(mux_in_7_V_read_2_reg_623),
    .sel_V(mux_sel_onehot_V),
    .ap_return(grp_mux_onehot_if_fu_326_ap_return)
);

leading_ones_templat call_ret7_leading_ones_templat_fu_349(
    .ap_ready(call_ret7_leading_ones_templat_fu_349_ap_ready),
    .din_V_read(leadone_in_V),
    .ap_return_0(call_ret7_leading_ones_templat_fu_349_ap_return_0),
    .ap_return_1(call_ret7_leading_ones_templat_fu_349_ap_return_1)
);

mux_onehot op2_V_assign_2_s_mux_onehot_fu_355(
    .ap_ready(op2_V_assign_2_s_mux_onehot_fu_355_ap_ready),
    .din_0_V_read(mux_in_0_V),
    .din_1_V_read(mux_in_1_V),
    .din_2_V_read(mux_in_2_V),
    .din_3_V_read(mux_in_3_V),
    .din_4_V_read(mux_in_4_V),
    .din_5_V_read(mux_in_5_V),
    .din_6_V_read(mux_in_6_V),
    .din_7_V_read(mux_in_7_V),
    .sel_V(mux_sel_onehot_V),
    .ap_return(op2_V_assign_2_s_mux_onehot_fu_355_ap_return)
);

leading_ones_brutefo grp_leading_ones_brutefo_fu_378(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_leading_ones_brutefo_fu_378_ap_start),
    .ap_done(grp_leading_ones_brutefo_fu_378_ap_done),
    .ap_idle(grp_leading_ones_brutefo_fu_378_ap_idle),
    .ap_ready(grp_leading_ones_brutefo_fu_378_ap_ready),
    .din_V(leadone_in_V),
    .ap_return_0(grp_leading_ones_brutefo_fu_378_ap_return_0),
    .ap_return_1(grp_leading_ones_brutefo_fu_378_ap_return_1)
);

leading_ones_log2 grp_leading_ones_log2_fu_384(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_leading_ones_log2_fu_384_ap_start),
    .ap_done(grp_leading_ones_log2_fu_384_ap_done),
    .ap_idle(grp_leading_ones_log2_fu_384_ap_idle),
    .ap_ready(grp_leading_ones_log2_fu_384_ap_ready),
    .din_V(leadone_in_V),
    .ap_return_0(grp_leading_ones_log2_fu_384_ap_return_0),
    .ap_return_1(grp_leading_ones_log2_fu_384_ap_return_1)
);

mux_binary2onehot_op op2_V_assign_4_s_mux_binary2onehot_op_fu_390(
    .ap_ready(op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_ready),
    .din_0_V_read(mux_in_0_V),
    .din_1_V_read(mux_in_1_V),
    .din_2_V_read(mux_in_2_V),
    .din_3_V_read(mux_in_3_V),
    .din_4_V_read(mux_in_4_V),
    .din_5_V_read(mux_in_5_V),
    .din_6_V_read(mux_in_6_V),
    .din_7_V_read(mux_in_7_V),
    .sel0_V(mux_sel0_V),
    .sel1_V(mux_sel1_V),
    .s(mux_s),
    .ap_return(op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return)
);

leading_ones grp_leading_ones_fu_417(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_leading_ones_fu_417_ap_start),
    .ap_done(grp_leading_ones_fu_417_ap_done),
    .ap_idle(grp_leading_ones_fu_417_ap_idle),
    .ap_ready(grp_leading_ones_fu_417_ap_ready),
    .din_V(leadone_in_V),
    .ap_return_0(grp_leading_ones_fu_417_ap_return_0),
    .ap_return_1(grp_leading_ones_fu_417_ap_return_1)
);

mux_binary_opt op2_V_assign_5_s_mux_binary_opt_fu_423(
    .ap_ready(op2_V_assign_5_s_mux_binary_opt_fu_423_ap_ready),
    .din_0_V_read(mux_in_0_V),
    .din_1_V_read(mux_in_1_V),
    .din_2_V_read(mux_in_2_V),
    .din_3_V_read(mux_in_3_V),
    .din_4_V_read(mux_in_4_V),
    .din_5_V_read(mux_in_5_V),
    .din_6_V_read(mux_in_6_V),
    .din_7_V_read(mux_in_7_V),
    .sel0_V(mux_sel0_V),
    .sel1_V(mux_sel1_V),
    .s(mux_s),
    .ap_return(op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return)
);

mux_binary op2_V_assign_1_s_mux_binary_fu_450(
    .ap_ready(op2_V_assign_1_s_mux_binary_fu_450_ap_ready),
    .din_0_V_read(mux_in_0_V),
    .din_1_V_read(mux_in_1_V),
    .din_2_V_read(mux_in_2_V),
    .din_3_V_read(mux_in_3_V),
    .din_4_V_read(mux_in_4_V),
    .din_5_V_read(mux_in_5_V),
    .din_6_V_read(mux_in_6_V),
    .din_7_V_read(mux_in_7_V),
    .sel_V(mux_sel0_V),
    .ap_return(op2_V_assign_1_s_mux_binary_fu_450_ap_return)
);

mux_2to1 op2_V_assign_s_mux_2to1_fu_473(
    .ap_ready(op2_V_assign_s_mux_2to1_fu_473_ap_ready),
    .din_0_V_read(mux_in_0_V),
    .din_1_V_read(mux_in_1_V),
    .sel(mux_s),
    .ap_return(op2_V_assign_s_mux_2to1_fu_473_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_leading_ones_brutefo_fu_378_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (mode == 32'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_leading_ones_brutefo_fu_378_ap_start_reg <= 1'b1;
        end else if ((grp_leading_ones_brutefo_fu_378_ap_ready == 1'b1)) begin
            grp_leading_ones_brutefo_fu_378_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_leading_ones_fu_417_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (mode == 32'd0))) begin
            grp_leading_ones_fu_417_ap_start_reg <= 1'b1;
        end else if ((grp_leading_ones_fu_417_ap_ready == 1'b1)) begin
            grp_leading_ones_fu_417_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_leading_ones_log2_fu_384_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (mode == 32'd2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_leading_ones_log2_fu_384_ap_start_reg <= 1'b1;
        end else if ((grp_leading_ones_log2_fu_384_ap_ready == 1'b1)) begin
            grp_leading_ones_log2_fu_384_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_max_algorithmic_fu_284_ap_start_reg <= 1'b0;
    end else begin
        if ((~(mode == 32'd9) & ~(mode == 32'd8) & ~(mode == 32'd7) & ~(mode == 32'd6) & ~(mode == 32'd5) & ~(mode == 32'd4) & ~(mode == 32'd3) & ~(mode == 32'd2) & ~(mode == 32'd1) & ~(mode == 32'd0) & ~(mode == 32'd10) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_max_algorithmic_fu_284_ap_start_reg <= 1'b1;
        end else if ((grp_max_algorithmic_fu_284_ap_ready == 1'b1)) begin
            grp_max_algorithmic_fu_284_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_max_fu_305_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (mode == 32'd10) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_max_fu_305_ap_start_reg <= 1'b1;
        end else if ((grp_max_fu_305_ap_ready == 1'b1)) begin
            grp_max_fu_305_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mux_onehot_if_fu_326_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (mode == 32'd7) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_mux_onehot_if_fu_326_ap_start_reg <= 1'b1;
        end else if ((grp_mux_onehot_if_fu_326_ap_ready == 1'b1)) begin
            grp_mux_onehot_if_fu_326_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (mode == 32'd7) & (1'b1 == ap_CS_fsm_state1))) begin
        mux_in_0_V_read_3_reg_588 <= mux_in_0_V;
        mux_in_1_V_read_3_reg_593 <= mux_in_1_V;
        mux_in_2_V_read_2_reg_598 <= mux_in_2_V;
        mux_in_3_V_read_2_reg_603 <= mux_in_3_V;
        mux_in_4_V_read_2_reg_608 <= mux_in_4_V;
        mux_in_5_V_read_2_reg_613 <= mux_in_5_V;
        mux_in_6_V_read_2_reg_618 <= mux_in_6_V;
        mux_in_7_V_read_2_reg_623 <= mux_in_7_V;
    end
end

always @ (posedge ap_clk) begin
    if (((~(mode == 32'd9) & ~(mode == 32'd8) & ~(mode == 32'd7) & ~(mode == 32'd6) & ~(mode == 32'd5) & ~(mode == 32'd4) & ~(mode == 32'd3) & ~(mode == 32'd2) & ~(mode == 32'd1) & ~(mode == 32'd0) & ~(mode == 32'd10) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (mode == 32'd10) & (1'b1 == ap_CS_fsm_state1)))) begin
        reg_484 <= max_in_0;
        reg_490 <= max_in_1;
        reg_496 <= max_in_2;
        reg_502 <= max_in_3;
        reg_508 <= max_in_4;
        reg_514 <= max_in_5;
        reg_520 <= max_in_6;
        reg_526 <= max_in_7;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2) & (mode == 32'd0))) begin
        leadone_out_V = grp_leading_ones_fu_417_ap_return_1;
    end else if (((mode == 32'd1) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        leadone_out_V = grp_leading_ones_brutefo_fu_378_ap_return_1;
    end else if (((mode == 32'd2) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        leadone_out_V = grp_leading_ones_log2_fu_384_ap_return_1;
    end else if (((ap_start == 1'b1) & (mode == 32'd3) & (1'b1 == ap_CS_fsm_state1))) begin
        leadone_out_V = call_ret7_leading_ones_templat_fu_349_ap_return_1;
    end else begin
        leadone_out_V = 'bx;
    end
end

always @ (*) begin
    if ((((mode == 32'd2) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)) | ((mode == 32'd1) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2) & (mode == 32'd0)) | ((ap_start == 1'b1) & (mode == 32'd3) & (1'b1 == ap_CS_fsm_state1)))) begin
        leadone_out_V_ap_vld = 1'b1;
    end else begin
        leadone_out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2) & (mode == 32'd0))) begin
        leadone_ret = grp_leading_ones_fu_417_ap_return_0;
    end else if (((mode == 32'd1) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        leadone_ret = grp_leading_ones_brutefo_fu_378_ap_return_0;
    end else if (((mode == 32'd2) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        leadone_ret = grp_leading_ones_log2_fu_384_ap_return_0;
    end else if (((ap_start == 1'b1) & (mode == 32'd3) & (1'b1 == ap_CS_fsm_state1))) begin
        leadone_ret = call_ret7_leading_ones_templat_fu_349_ap_return_0;
    end else begin
        leadone_ret = 'bx;
    end
end

always @ (*) begin
    if ((((mode == 32'd2) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)) | ((mode == 32'd1) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)) | ((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2) & (mode == 32'd0)) | ((ap_start == 1'b1) & (mode == 32'd3) & (1'b1 == ap_CS_fsm_state1)))) begin
        leadone_ret_ap_vld = 1'b1;
    end else begin
        leadone_ret_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((1'b1 == ap_condition_99)) begin
            max_out = grp_max_algorithmic_fu_284_ap_return;
        end else if ((mode == 32'd10)) begin
            max_out = grp_max_fu_305_ap_return;
        end else begin
            max_out = 'bx;
        end
    end else begin
        max_out = 'bx;
    end
end

always @ (*) begin
    if (((~(mode == 32'd9) & ~(mode == 32'd8) & ~(mode == 32'd7) & ~(mode == 32'd6) & ~(mode == 32'd5) & ~(mode == 32'd4) & ~(mode == 32'd3) & ~(mode == 32'd2) & ~(mode == 32'd1) & ~(mode == 32'd0) & ~(mode == 32'd10) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)) | ((mode == 32'd10) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)))) begin
        max_out_ap_vld = 1'b1;
    end else begin
        max_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((mode == 32'd7) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        mux_ret_V = grp_mux_onehot_if_fu_326_ap_return;
    end else if (((ap_start == 1'b1) & (mode == 32'd4) & (1'b1 == ap_CS_fsm_state1))) begin
        mux_ret_V = op2_V_assign_s_mux_2to1_fu_473_ap_return;
    end else if (((ap_start == 1'b1) & (mode == 32'd5) & (1'b1 == ap_CS_fsm_state1))) begin
        mux_ret_V = op2_V_assign_1_s_mux_binary_fu_450_ap_return;
    end else if (((ap_start == 1'b1) & (mode == 32'd6) & (1'b1 == ap_CS_fsm_state1))) begin
        mux_ret_V = op2_V_assign_2_s_mux_onehot_fu_355_ap_return;
    end else if (((ap_start == 1'b1) & (mode == 32'd8) & (1'b1 == ap_CS_fsm_state1))) begin
        mux_ret_V = op2_V_assign_4_s_mux_binary2onehot_op_fu_390_ap_return;
    end else if (((ap_start == 1'b1) & (mode == 32'd9) & (1'b1 == ap_CS_fsm_state1))) begin
        mux_ret_V = op2_V_assign_5_s_mux_binary_opt_fu_423_ap_return;
    end else begin
        mux_ret_V = 'bx;
    end
end

always @ (*) begin
    if ((((mode == 32'd7) & (1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (mode == 32'd9) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (mode == 32'd8) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (mode == 32'd6) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (mode == 32'd5) & (1'b1 == ap_CS_fsm_state1)) | ((ap_start == 1'b1) & (mode == 32'd4) & (1'b1 == ap_CS_fsm_state1)))) begin
        mux_ret_V_ap_vld = 1'b1;
    end else begin
        mux_ret_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = (((mode == 32'd7) & (grp_mux_onehot_if_fu_326_ap_done == 1'b0)) | ((mode == 32'd2) & (grp_leading_ones_log2_fu_384_ap_done == 1'b0)) | ((mode == 32'd1) & (grp_leading_ones_brutefo_fu_378_ap_done == 1'b0)) | ((grp_leading_ones_fu_417_ap_done == 1'b0) & (mode == 32'd0)) | ((mode == 32'd10) & (grp_max_fu_305_ap_done == 1'b0)) | ((grp_max_algorithmic_fu_284_ap_done == 1'b0) & (ap_predicate_op146_call_state2 == 1'b1)));
end

always @ (*) begin
    ap_condition_99 = (~(mode == 32'd9) & ~(mode == 32'd8) & ~(mode == 32'd7) & ~(mode == 32'd6) & ~(mode == 32'd5) & ~(mode == 32'd4) & ~(mode == 32'd3) & ~(mode == 32'd2) & ~(mode == 32'd1) & ~(mode == 32'd0) & ~(mode == 32'd10));
end

always @ (*) begin
    ap_predicate_op146_call_state2 = (~(mode == 32'd9) & ~(mode == 32'd8) & ~(mode == 32'd7) & ~(mode == 32'd6) & ~(mode == 32'd5) & ~(mode == 32'd4) & ~(mode == 32'd3) & ~(mode == 32'd2) & ~(mode == 32'd1) & ~(mode == 32'd0) & ~(mode == 32'd10));
end

assign grp_leading_ones_brutefo_fu_378_ap_start = grp_leading_ones_brutefo_fu_378_ap_start_reg;

assign grp_leading_ones_fu_417_ap_start = grp_leading_ones_fu_417_ap_start_reg;

assign grp_leading_ones_log2_fu_384_ap_start = grp_leading_ones_log2_fu_384_ap_start_reg;

assign grp_max_algorithmic_fu_284_ap_start = grp_max_algorithmic_fu_284_ap_start_reg;

assign grp_max_fu_305_ap_start = grp_max_fu_305_ap_start_reg;

assign grp_mux_onehot_if_fu_326_ap_start = grp_mux_onehot_if_fu_326_ap_start_reg;

endmodule //top
