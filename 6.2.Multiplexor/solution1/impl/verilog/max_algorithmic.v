// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_algorithmic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din_0_read,
        din_1_read,
        din_2_read,
        din_3_read,
        din_4_read,
        din_5_read,
        din_6_read,
        din_7_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] din_0_read;
input  [31:0] din_1_read;
input  [31:0] din_2_read;
input  [31:0] din_3_read;
input  [31:0] din_4_read;
input  [31:0] din_5_read;
input  [31:0] din_6_read;
input  [31:0] din_7_read;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] select_ln15_1_fu_104_p3;
reg   [1:0] select_ln15_1_reg_311;
wire    ap_CS_fsm_state2;
wire   [2:0] zext_ln15_2_fu_142_p1;
reg   [2:0] zext_ln15_2_reg_325;
wire   [31:0] phi_ln15_2_fu_146_p10;
reg   [31:0] phi_ln15_2_reg_330;
wire    ap_CS_fsm_state3;
wire   [2:0] select_ln14_1_fu_170_p3;
reg   [2:0] select_ln14_1_reg_351;
wire   [0:0] icmp_ln15_4_fu_195_p2;
reg   [0:0] icmp_ln15_4_reg_356;
wire    ap_CS_fsm_state4;
wire   [2:0] select_ln15_3_fu_227_p3;
reg   [2:0] select_ln15_3_reg_368;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln15_fu_80_p2;
wire   [31:0] select_ln15_fu_86_p3;
wire   [0:0] icmp_ln15_1_fu_94_p2;
wire   [1:0] zext_ln15_fu_100_p1;
wire   [2:0] phi_ln15_1_fu_115_p9;
wire   [31:0] phi_ln15_1_fu_115_p10;
wire   [0:0] icmp_ln15_2_fu_129_p2;
wire   [1:0] select_ln15_2_fu_135_p3;
wire   [2:0] phi_ln15_2_fu_146_p9;
wire   [0:0] icmp_ln15_3_fu_165_p2;
wire   [2:0] phi_ln15_3_fu_177_p9;
wire   [31:0] phi_ln15_3_fu_177_p10;
wire   [2:0] select_ln14_2_fu_201_p3;
wire   [31:0] phi_ln15_4_fu_207_p10;
wire   [0:0] icmp_ln15_5_fu_221_p2;
wire   [31:0] phi_ln15_5_fu_235_p10;
wire   [0:0] icmp_ln15_6_fu_248_p2;
wire   [2:0] tmp_fu_261_p9;
wire   [31:0] tmp_fu_261_p10;
reg   [31:0] ap_return_preg;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_return_preg = 32'd0;
end

top_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
top_mux_83_32_1_1_U71(
    .din0(din_0_read),
    .din1(din_1_read),
    .din2(din_2_read),
    .din3(din_2_read),
    .din4(din_2_read),
    .din5(din_2_read),
    .din6(din_2_read),
    .din7(din_2_read),
    .din8(phi_ln15_1_fu_115_p9),
    .dout(phi_ln15_1_fu_115_p10)
);

top_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
top_mux_83_32_1_1_U72(
    .din0(din_0_read),
    .din1(din_1_read),
    .din2(din_2_read),
    .din3(din_3_read),
    .din4(din_3_read),
    .din5(din_3_read),
    .din6(din_3_read),
    .din7(din_3_read),
    .din8(phi_ln15_2_fu_146_p9),
    .dout(phi_ln15_2_fu_146_p10)
);

top_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
top_mux_83_32_1_1_U73(
    .din0(din_0_read),
    .din1(din_1_read),
    .din2(din_2_read),
    .din3(din_3_read),
    .din4(din_4_read),
    .din5(din_4_read),
    .din6(din_4_read),
    .din7(din_4_read),
    .din8(phi_ln15_3_fu_177_p9),
    .dout(phi_ln15_3_fu_177_p10)
);

top_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
top_mux_83_32_1_1_U74(
    .din0(din_0_read),
    .din1(din_1_read),
    .din2(din_2_read),
    .din3(din_3_read),
    .din4(din_4_read),
    .din5(din_5_read),
    .din6(din_5_read),
    .din7(din_5_read),
    .din8(select_ln14_2_fu_201_p3),
    .dout(phi_ln15_4_fu_207_p10)
);

top_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
top_mux_83_32_1_1_U75(
    .din0(din_0_read),
    .din1(din_1_read),
    .din2(din_2_read),
    .din3(din_3_read),
    .din4(din_4_read),
    .din5(din_5_read),
    .din6(din_6_read),
    .din7(din_6_read),
    .din8(select_ln15_3_reg_368),
    .dout(phi_ln15_5_fu_235_p10)
);

top_mux_83_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
top_mux_83_32_1_1_U76(
    .din0(din_0_read),
    .din1(din_1_read),
    .din2(din_2_read),
    .din3(din_3_read),
    .din4(din_4_read),
    .din5(din_5_read),
    .din6(din_6_read),
    .din7(din_7_read),
    .din8(tmp_fu_261_p9),
    .dout(tmp_fu_261_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_return_preg <= tmp_fu_261_p10;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln15_4_reg_356 <= icmp_ln15_4_fu_195_p2;
        select_ln14_1_reg_351 <= select_ln14_1_fu_170_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_ln15_2_reg_330 <= phi_ln15_2_fu_146_p10;
        zext_ln15_2_reg_325[1 : 0] <= zext_ln15_2_fu_142_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        select_ln15_1_reg_311 <= select_ln15_1_fu_104_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        select_ln15_3_reg_368 <= select_ln15_3_fu_227_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_return = tmp_fu_261_p10;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign icmp_ln15_1_fu_94_p2 = (($signed(select_ln15_fu_86_p3) < $signed(din_2_read)) ? 1'b1 : 1'b0);

assign icmp_ln15_2_fu_129_p2 = (($signed(phi_ln15_1_fu_115_p10) < $signed(din_3_read)) ? 1'b1 : 1'b0);

assign icmp_ln15_3_fu_165_p2 = (($signed(phi_ln15_2_reg_330) < $signed(din_4_read)) ? 1'b1 : 1'b0);

assign icmp_ln15_4_fu_195_p2 = (($signed(phi_ln15_3_fu_177_p10) < $signed(din_5_read)) ? 1'b1 : 1'b0);

assign icmp_ln15_5_fu_221_p2 = (($signed(phi_ln15_4_fu_207_p10) < $signed(din_6_read)) ? 1'b1 : 1'b0);

assign icmp_ln15_6_fu_248_p2 = (($signed(phi_ln15_5_fu_235_p10) < $signed(din_7_read)) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_80_p2 = (($signed(din_1_read) > $signed(din_0_read)) ? 1'b1 : 1'b0);

assign phi_ln15_1_fu_115_p9 = select_ln15_1_reg_311;

assign phi_ln15_2_fu_146_p9 = select_ln15_2_fu_135_p3;

assign phi_ln15_3_fu_177_p9 = ((icmp_ln15_3_fu_165_p2[0:0] === 1'b1) ? 3'd4 : zext_ln15_2_reg_325);

assign select_ln14_1_fu_170_p3 = ((icmp_ln15_3_fu_165_p2[0:0] === 1'b1) ? 3'd4 : zext_ln15_2_reg_325);

assign select_ln14_2_fu_201_p3 = ((icmp_ln15_4_reg_356[0:0] === 1'b1) ? 3'd5 : select_ln14_1_reg_351);

assign select_ln15_1_fu_104_p3 = ((icmp_ln15_1_fu_94_p2[0:0] === 1'b1) ? 2'd2 : zext_ln15_fu_100_p1);

assign select_ln15_2_fu_135_p3 = ((icmp_ln15_2_fu_129_p2[0:0] === 1'b1) ? 2'd3 : select_ln15_1_reg_311);

assign select_ln15_3_fu_227_p3 = ((icmp_ln15_5_fu_221_p2[0:0] === 1'b1) ? 3'd6 : select_ln14_2_fu_201_p3);

assign select_ln15_fu_86_p3 = ((icmp_ln15_fu_80_p2[0:0] === 1'b1) ? din_1_read : din_0_read);

assign tmp_fu_261_p9 = ((icmp_ln15_6_fu_248_p2[0:0] === 1'b1) ? 3'd7 : select_ln15_3_reg_368);

assign zext_ln15_2_fu_142_p1 = select_ln15_2_fu_135_p3;

assign zext_ln15_fu_100_p1 = icmp_ln15_fu_80_p2;

always @ (posedge ap_clk) begin
    zext_ln15_2_reg_325[2] <= 1'b0;
end

endmodule //max_algorithmic
