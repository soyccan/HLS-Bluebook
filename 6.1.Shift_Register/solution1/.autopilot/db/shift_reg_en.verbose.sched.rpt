

================================================================
== Vivado HLS Report for 'shift_reg_en'
================================================================
* Date:           Thu Apr  8 07:05:20 2021

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        Shift_Register
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 1.769 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+-----------+-----------+-----+-----+---------+
    |  Latency (cycles) |   Latency (absolute)  |  Interval | Pipeline|
    |   min   |   max   |    min    |    max    | min | max |   Type  |
    +---------+---------+-----------+-----------+-----+-----+---------+
    |        1|        1| 10.000 ns | 10.000 ns |    1|    1|   none  |
    +---------+---------+-----------+-----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 3 [1/1] (0.00ns)   --->   "%en_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %en)" [Shift_Register/shift_reg_en.cpp:3]   --->   Operation 3 'read' 'en_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 4 [1/1] (0.00ns)   --->   "%din_read = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %din)" [Shift_Register/shift_reg_en.cpp:3]   --->   Operation 4 'read' 'din_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%regs_6_10_load = load i8* @regs_6_10, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 5 'load' 'regs_6_10_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%regs_6_9_load = load i8* @regs_6_9, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 6 'load' 'regs_6_9_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%regs_6_8_load = load i8* @regs_6_8, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 7 'load' 'regs_6_8_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%regs_6_7_load = load i8* @regs_6_7, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 8 'load' 'regs_6_7_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%regs_6_6_load = load i8* @regs_6_6, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 9 'load' 'regs_6_6_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%regs_6_5_load = load i8* @regs_6_5, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 10 'load' 'regs_6_5_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%regs_6_4_load = load i8* @regs_6_4, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 11 'load' 'regs_6_4_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%regs_6_3_load = load i8* @regs_6_3, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 12 'load' 'regs_6_3_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%regs_6_2_load = load i8* @regs_6_2, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 13 'load' 'regs_6_2_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%regs_6_1_load = load i8* @regs_6_1, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 14 'load' 'regs_6_1_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%regs_6_0_load = load i8* @regs_6_0, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 15 'load' 'regs_6_0_load' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (1.76ns)   --->   "br i1 %en_read, label %._crit_edge.0, label %._crit_edge.11" [Shift_Register/shift_reg_en.cpp:12]   --->   Operation 16 'br' <Predicate = true> <Delay = 1.76>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "store i8 %regs_6_10_load, i8* @regs_6_11, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 17 'store' <Predicate = (en_read)> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "store i8 %regs_6_9_load, i8* @regs_6_10, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 18 'store' <Predicate = (en_read)> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "store i8 %regs_6_8_load, i8* @regs_6_9, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 19 'store' <Predicate = (en_read)> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "store i8 %regs_6_7_load, i8* @regs_6_8, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 20 'store' <Predicate = (en_read)> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "store i8 %regs_6_6_load, i8* @regs_6_7, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 21 'store' <Predicate = (en_read)> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "store i8 %regs_6_5_load, i8* @regs_6_6, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 22 'store' <Predicate = (en_read)> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "store i8 %regs_6_4_load, i8* @regs_6_5, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 23 'store' <Predicate = (en_read)> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "store i8 %regs_6_3_load, i8* @regs_6_4, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 24 'store' <Predicate = (en_read)> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.00ns)   --->   "store i8 %regs_6_2_load, i8* @regs_6_3, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 25 'store' <Predicate = (en_read)> <Delay = 0.00>
ST_1 : Operation 26 [1/1] (0.00ns)   --->   "store i8 %regs_6_1_load, i8* @regs_6_2, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 26 'store' <Predicate = (en_read)> <Delay = 0.00>
ST_1 : Operation 27 [1/1] (0.00ns)   --->   "store i8 %regs_6_0_load, i8* @regs_6_1, align 1" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 27 'store' <Predicate = (en_read)> <Delay = 0.00>
ST_1 : Operation 28 [1/1] (0.00ns)   --->   "store i8 %din_read, i8* @regs_6_0, align 1" [Shift_Register/shift_reg_en.cpp:14]   --->   Operation 28 'store' <Predicate = (en_read)> <Delay = 0.00>
ST_1 : Operation 29 [1/1] (1.76ns)   --->   "br label %._crit_edge.11" [Shift_Register/shift_reg_en.cpp:17]   --->   Operation 29 'br' <Predicate = (en_read)> <Delay = 1.76>

State 2 <SV = 1> <Delay = 0.00>
ST_2 : Operation 30 [1/1] (0.00ns)   --->   "%dout_10_write_assig = phi i8 [ %regs_6_9_load, %._crit_edge.0 ], [ %regs_6_10_load, %0 ]" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 30 'phi' 'dout_10_write_assig' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 31 [1/1] (0.00ns)   --->   "%dout_9_write_assign = phi i8 [ %regs_6_8_load, %._crit_edge.0 ], [ %regs_6_9_load, %0 ]" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 31 'phi' 'dout_9_write_assign' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 32 [1/1] (0.00ns)   --->   "%dout_8_write_assign = phi i8 [ %regs_6_7_load, %._crit_edge.0 ], [ %regs_6_8_load, %0 ]" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 32 'phi' 'dout_8_write_assign' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 33 [1/1] (0.00ns)   --->   "%dout_7_write_assign = phi i8 [ %regs_6_6_load, %._crit_edge.0 ], [ %regs_6_7_load, %0 ]" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 33 'phi' 'dout_7_write_assign' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 34 [1/1] (0.00ns)   --->   "%dout_6_write_assign = phi i8 [ %regs_6_5_load, %._crit_edge.0 ], [ %regs_6_6_load, %0 ]" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 34 'phi' 'dout_6_write_assign' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 35 [1/1] (0.00ns)   --->   "%dout_5_write_assign = phi i8 [ %regs_6_4_load, %._crit_edge.0 ], [ %regs_6_5_load, %0 ]" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 35 'phi' 'dout_5_write_assign' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 36 [1/1] (0.00ns)   --->   "%dout_4_write_assign = phi i8 [ %regs_6_3_load, %._crit_edge.0 ], [ %regs_6_4_load, %0 ]" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 36 'phi' 'dout_4_write_assign' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 37 [1/1] (0.00ns)   --->   "%dout_3_write_assign = phi i8 [ %regs_6_2_load, %._crit_edge.0 ], [ %regs_6_3_load, %0 ]" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 37 'phi' 'dout_3_write_assign' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 38 [1/1] (0.00ns)   --->   "%dout_2_write_assign = phi i8 [ %regs_6_1_load, %._crit_edge.0 ], [ %regs_6_2_load, %0 ]" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 38 'phi' 'dout_2_write_assign' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 39 [1/1] (0.00ns)   --->   "%dout_1_write_assign = phi i8 [ %regs_6_0_load, %._crit_edge.0 ], [ %regs_6_1_load, %0 ]" [Shift_Register/shift_reg_en.cpp:16]   --->   Operation 39 'phi' 'dout_1_write_assign' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "%dout_0_write_assign = phi i8 [ %din_read, %._crit_edge.0 ], [ %regs_6_0_load, %0 ]" [Shift_Register/shift_reg_en.cpp:3]   --->   Operation 40 'phi' 'dout_0_write_assign' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 41 [1/1] (0.00ns)   --->   "%regs_6_11_load = load i8* @regs_6_11, align 1" [Shift_Register/shift_reg_en.cpp:23]   --->   Operation 41 'load' 'regs_6_11_load' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%mrv = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } undef, i8 %dout_0_write_assign, 0" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 42 'insertvalue' 'mrv' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (0.00ns)   --->   "%mrv_1 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv, i8 %dout_1_write_assign, 1" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 43 'insertvalue' 'mrv_1' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 44 [1/1] (0.00ns)   --->   "%mrv_2 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_1, i8 %dout_2_write_assign, 2" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 44 'insertvalue' 'mrv_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 45 [1/1] (0.00ns)   --->   "%mrv_3 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_2, i8 %dout_3_write_assign, 3" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 45 'insertvalue' 'mrv_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 46 [1/1] (0.00ns)   --->   "%mrv_4 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_3, i8 %dout_4_write_assign, 4" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 46 'insertvalue' 'mrv_4' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 47 [1/1] (0.00ns)   --->   "%mrv_5 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_4, i8 %dout_5_write_assign, 5" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 47 'insertvalue' 'mrv_5' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 48 [1/1] (0.00ns)   --->   "%mrv_6 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_5, i8 %dout_6_write_assign, 6" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 48 'insertvalue' 'mrv_6' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 49 [1/1] (0.00ns)   --->   "%mrv_7 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_6, i8 %dout_7_write_assign, 7" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 49 'insertvalue' 'mrv_7' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 50 [1/1] (0.00ns)   --->   "%mrv_8 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_7, i8 %dout_8_write_assign, 8" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 50 'insertvalue' 'mrv_8' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 51 [1/1] (0.00ns)   --->   "%mrv_9 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_8, i8 %dout_9_write_assign, 9" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 51 'insertvalue' 'mrv_9' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 52 [1/1] (0.00ns)   --->   "%mrv_10 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_9, i8 %dout_10_write_assig, 10" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 52 'insertvalue' 'mrv_10' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 53 [1/1] (0.00ns)   --->   "%mrv_s = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_10, i8 %regs_6_11_load, 11" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 53 'insertvalue' 'mrv_s' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 54 [1/1] (0.00ns)   --->   "ret { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_s" [Shift_Register/shift_reg_en.cpp:25]   --->   Operation 54 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	wire read on port 'en' (Shift_Register/shift_reg_en.cpp:3) [16]  (0 ns)
	multiplexor before 'phi' operation ('dout[10]', Shift_Register/shift_reg_en.cpp:16) with incoming values : ('regs_6_10_load', Shift_Register/shift_reg_en.cpp:16) ('regs_6_9_load', Shift_Register/shift_reg_en.cpp:16) [45]  (1.77 ns)

 <State 2>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
