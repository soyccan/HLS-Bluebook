// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "shift_reg_ip.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic shift_reg_ip::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic shift_reg_ip::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state1 = "1";
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state2 = "10";
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state3 = "100";
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state4 = "1000";
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state5 = "10000";
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state6 = "100000";
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> shift_reg_ip::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> shift_reg_ip::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> shift_reg_ip::ap_const_lv32_1 = "1";
const sc_lv<32> shift_reg_ip::ap_const_lv32_2 = "10";
const sc_lv<32> shift_reg_ip::ap_const_lv32_3 = "11";
const sc_lv<32> shift_reg_ip::ap_const_lv32_4 = "100";
const sc_lv<32> shift_reg_ip::ap_const_lv32_5 = "101";
const sc_lv<32> shift_reg_ip::ap_const_lv32_6 = "110";
const sc_lv<32> shift_reg_ip::ap_const_lv32_7 = "111";
const sc_lv<32> shift_reg_ip::ap_const_lv32_8 = "1000";
const sc_lv<32> shift_reg_ip::ap_const_lv32_9 = "1001";
const sc_lv<32> shift_reg_ip::ap_const_lv32_A = "1010";
const sc_lv<32> shift_reg_ip::ap_const_lv32_B = "1011";
const sc_lv<4> shift_reg_ip::ap_const_lv4_3 = "11";
const sc_lv<4> shift_reg_ip::ap_const_lv4_0 = "0000";
const sc_lv<4> shift_reg_ip::ap_const_lv4_1 = "1";
const sc_lv<4> shift_reg_ip::ap_const_lv4_2 = "10";
const sc_lv<4> shift_reg_ip::ap_const_lv4_4 = "100";
const sc_lv<4> shift_reg_ip::ap_const_lv4_5 = "101";
const sc_lv<4> shift_reg_ip::ap_const_lv4_6 = "110";
const sc_lv<4> shift_reg_ip::ap_const_lv4_7 = "111";
const sc_lv<4> shift_reg_ip::ap_const_lv4_8 = "1000";
const sc_lv<4> shift_reg_ip::ap_const_lv4_9 = "1001";
const sc_lv<4> shift_reg_ip::ap_const_lv4_A = "1010";
const sc_lv<4> shift_reg_ip::ap_const_lv4_B = "1011";
const sc_lv<32> shift_reg_ip::ap_const_lv32_C = "1100";
const bool shift_reg_ip::ap_const_boolean_1 = true;

shift_reg_ip::shift_reg_ip(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Sreg_Array_U = new shift_reg_ip_Sregbkb("Sreg_Array_U");
    Sreg_Array_U->clk(ap_clk);
    Sreg_Array_U->reset(ap_rst);
    Sreg_Array_U->address0(Sreg_Array_address0);
    Sreg_Array_U->ce0(Sreg_Array_ce0);
    Sreg_Array_U->we0(Sreg_Array_we0);
    Sreg_Array_U->d0(sext_ln20_fu_54_p1);
    Sreg_Array_U->q0(Sreg_Array_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Sreg_Array_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_Sreg_Array_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( en );

    SC_METHOD(thread_Sreg_Array_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( en );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( trunc_ln25_reg_297 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( trunc_ln25_1_reg_302 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( trunc_ln25_10_reg_347 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( trunc_ln25_11_fu_232_p1 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( trunc_ln25_2_reg_307 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( trunc_ln25_3_reg_312 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( trunc_ln25_4_reg_317 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( trunc_ln25_5_reg_322 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( trunc_ln25_6_reg_327 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( trunc_ln25_7_reg_332 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( trunc_ln25_8_reg_337 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( trunc_ln25_9_reg_342 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_sext_ln20_fu_54_p1);
    sensitive << ( din );

    SC_METHOD(thread_trunc_ln25_10_fu_218_p1);
    sensitive << ( Sreg_Array_q0 );

    SC_METHOD(thread_trunc_ln25_11_fu_232_p1);
    sensitive << ( Sreg_Array_q0 );

    SC_METHOD(thread_trunc_ln25_1_fu_92_p1);
    sensitive << ( Sreg_Array_q0 );

    SC_METHOD(thread_trunc_ln25_2_fu_106_p1);
    sensitive << ( Sreg_Array_q0 );

    SC_METHOD(thread_trunc_ln25_3_fu_120_p1);
    sensitive << ( Sreg_Array_q0 );

    SC_METHOD(thread_trunc_ln25_4_fu_134_p1);
    sensitive << ( Sreg_Array_q0 );

    SC_METHOD(thread_trunc_ln25_5_fu_148_p1);
    sensitive << ( Sreg_Array_q0 );

    SC_METHOD(thread_trunc_ln25_6_fu_162_p1);
    sensitive << ( Sreg_Array_q0 );

    SC_METHOD(thread_trunc_ln25_7_fu_176_p1);
    sensitive << ( Sreg_Array_q0 );

    SC_METHOD(thread_trunc_ln25_8_fu_190_p1);
    sensitive << ( Sreg_Array_q0 );

    SC_METHOD(thread_trunc_ln25_9_fu_204_p1);
    sensitive << ( Sreg_Array_q0 );

    SC_METHOD(thread_trunc_ln25_fu_78_p1);
    sensitive << ( Sreg_Array_q0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "0000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "shift_reg_ip_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, din, "(port)din");
    sc_trace(mVcdFile, en, "(port)en");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, Sreg_Array_address0, "Sreg_Array_address0");
    sc_trace(mVcdFile, Sreg_Array_ce0, "Sreg_Array_ce0");
    sc_trace(mVcdFile, Sreg_Array_we0, "Sreg_Array_we0");
    sc_trace(mVcdFile, Sreg_Array_q0, "Sreg_Array_q0");
    sc_trace(mVcdFile, trunc_ln25_fu_78_p1, "trunc_ln25_fu_78_p1");
    sc_trace(mVcdFile, trunc_ln25_reg_297, "trunc_ln25_reg_297");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, trunc_ln25_1_fu_92_p1, "trunc_ln25_1_fu_92_p1");
    sc_trace(mVcdFile, trunc_ln25_1_reg_302, "trunc_ln25_1_reg_302");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, trunc_ln25_2_fu_106_p1, "trunc_ln25_2_fu_106_p1");
    sc_trace(mVcdFile, trunc_ln25_2_reg_307, "trunc_ln25_2_reg_307");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, trunc_ln25_3_fu_120_p1, "trunc_ln25_3_fu_120_p1");
    sc_trace(mVcdFile, trunc_ln25_3_reg_312, "trunc_ln25_3_reg_312");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, trunc_ln25_4_fu_134_p1, "trunc_ln25_4_fu_134_p1");
    sc_trace(mVcdFile, trunc_ln25_4_reg_317, "trunc_ln25_4_reg_317");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, trunc_ln25_5_fu_148_p1, "trunc_ln25_5_fu_148_p1");
    sc_trace(mVcdFile, trunc_ln25_5_reg_322, "trunc_ln25_5_reg_322");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, trunc_ln25_6_fu_162_p1, "trunc_ln25_6_fu_162_p1");
    sc_trace(mVcdFile, trunc_ln25_6_reg_327, "trunc_ln25_6_reg_327");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, trunc_ln25_7_fu_176_p1, "trunc_ln25_7_fu_176_p1");
    sc_trace(mVcdFile, trunc_ln25_7_reg_332, "trunc_ln25_7_reg_332");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, trunc_ln25_8_fu_190_p1, "trunc_ln25_8_fu_190_p1");
    sc_trace(mVcdFile, trunc_ln25_8_reg_337, "trunc_ln25_8_reg_337");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, trunc_ln25_9_fu_204_p1, "trunc_ln25_9_fu_204_p1");
    sc_trace(mVcdFile, trunc_ln25_9_reg_342, "trunc_ln25_9_reg_342");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, trunc_ln25_10_fu_218_p1, "trunc_ln25_10_fu_218_p1");
    sc_trace(mVcdFile, trunc_ln25_10_reg_347, "trunc_ln25_10_reg_347");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, sext_ln20_fu_54_p1, "sext_ln20_fu_54_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, trunc_ln25_11_fu_232_p1, "trunc_ln25_11_fu_232_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

shift_reg_ip::~shift_reg_ip() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete Sreg_Array_U;
}

void shift_reg_ip::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        trunc_ln25_10_reg_347 = trunc_ln25_10_fu_218_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        trunc_ln25_1_reg_302 = trunc_ln25_1_fu_92_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        trunc_ln25_2_reg_307 = trunc_ln25_2_fu_106_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        trunc_ln25_3_reg_312 = trunc_ln25_3_fu_120_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        trunc_ln25_4_reg_317 = trunc_ln25_4_fu_134_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        trunc_ln25_5_reg_322 = trunc_ln25_5_fu_148_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        trunc_ln25_6_reg_327 = trunc_ln25_6_fu_162_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        trunc_ln25_7_reg_332 = trunc_ln25_7_fu_176_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        trunc_ln25_8_reg_337 = trunc_ln25_8_fu_190_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        trunc_ln25_9_reg_342 = trunc_ln25_9_fu_204_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        trunc_ln25_reg_297 = trunc_ln25_fu_78_p1.read();
    }
}

void shift_reg_ip::thread_Sreg_Array_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        Sreg_Array_address0 = ap_const_lv4_B;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        Sreg_Array_address0 = ap_const_lv4_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        Sreg_Array_address0 = ap_const_lv4_9;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        Sreg_Array_address0 = ap_const_lv4_8;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        Sreg_Array_address0 = ap_const_lv4_7;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        Sreg_Array_address0 = ap_const_lv4_6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        Sreg_Array_address0 = ap_const_lv4_5;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        Sreg_Array_address0 = ap_const_lv4_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Sreg_Array_address0 = ap_const_lv4_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Sreg_Array_address0 = ap_const_lv4_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Sreg_Array_address0 = ap_const_lv4_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        Sreg_Array_address0 = ap_const_lv4_3;
    } else {
        Sreg_Array_address0 = "XXXX";
    }
}

void shift_reg_ip::thread_Sreg_Array_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        Sreg_Array_ce0 = en.read();
    } else {
        Sreg_Array_ce0 = ap_const_logic_0;
    }
}

void shift_reg_ip::thread_Sreg_Array_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        Sreg_Array_we0 = en.read();
    } else {
        Sreg_Array_we0 = ap_const_logic_0;
    }
}

void shift_reg_ip::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void shift_reg_ip::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void shift_reg_ip::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void shift_reg_ip::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void shift_reg_ip::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void shift_reg_ip::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void shift_reg_ip::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void shift_reg_ip::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void shift_reg_ip::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void shift_reg_ip::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void shift_reg_ip::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void shift_reg_ip::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void shift_reg_ip::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void shift_reg_ip::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void shift_reg_ip::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void shift_reg_ip::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void shift_reg_ip::thread_ap_return_0() {
    ap_return_0 = trunc_ln25_reg_297.read();
}

void shift_reg_ip::thread_ap_return_1() {
    ap_return_1 = trunc_ln25_1_reg_302.read();
}

void shift_reg_ip::thread_ap_return_10() {
    ap_return_10 = trunc_ln25_10_reg_347.read();
}

void shift_reg_ip::thread_ap_return_11() {
    ap_return_11 = trunc_ln25_11_fu_232_p1.read();
}

void shift_reg_ip::thread_ap_return_2() {
    ap_return_2 = trunc_ln25_2_reg_307.read();
}

void shift_reg_ip::thread_ap_return_3() {
    ap_return_3 = trunc_ln25_3_reg_312.read();
}

void shift_reg_ip::thread_ap_return_4() {
    ap_return_4 = trunc_ln25_4_reg_317.read();
}

void shift_reg_ip::thread_ap_return_5() {
    ap_return_5 = trunc_ln25_5_reg_322.read();
}

void shift_reg_ip::thread_ap_return_6() {
    ap_return_6 = trunc_ln25_6_reg_327.read();
}

void shift_reg_ip::thread_ap_return_7() {
    ap_return_7 = trunc_ln25_7_reg_332.read();
}

void shift_reg_ip::thread_ap_return_8() {
    ap_return_8 = trunc_ln25_8_reg_337.read();
}

void shift_reg_ip::thread_ap_return_9() {
    ap_return_9 = trunc_ln25_9_reg_342.read();
}

void shift_reg_ip::thread_sext_ln20_fu_54_p1() {
    sext_ln20_fu_54_p1 = esl_sext<32,8>(din.read());
}

void shift_reg_ip::thread_trunc_ln25_10_fu_218_p1() {
    trunc_ln25_10_fu_218_p1 = Sreg_Array_q0.read().range(8-1, 0);
}

void shift_reg_ip::thread_trunc_ln25_11_fu_232_p1() {
    trunc_ln25_11_fu_232_p1 = Sreg_Array_q0.read().range(8-1, 0);
}

void shift_reg_ip::thread_trunc_ln25_1_fu_92_p1() {
    trunc_ln25_1_fu_92_p1 = Sreg_Array_q0.read().range(8-1, 0);
}

void shift_reg_ip::thread_trunc_ln25_2_fu_106_p1() {
    trunc_ln25_2_fu_106_p1 = Sreg_Array_q0.read().range(8-1, 0);
}

void shift_reg_ip::thread_trunc_ln25_3_fu_120_p1() {
    trunc_ln25_3_fu_120_p1 = Sreg_Array_q0.read().range(8-1, 0);
}

void shift_reg_ip::thread_trunc_ln25_4_fu_134_p1() {
    trunc_ln25_4_fu_134_p1 = Sreg_Array_q0.read().range(8-1, 0);
}

void shift_reg_ip::thread_trunc_ln25_5_fu_148_p1() {
    trunc_ln25_5_fu_148_p1 = Sreg_Array_q0.read().range(8-1, 0);
}

void shift_reg_ip::thread_trunc_ln25_6_fu_162_p1() {
    trunc_ln25_6_fu_162_p1 = Sreg_Array_q0.read().range(8-1, 0);
}

void shift_reg_ip::thread_trunc_ln25_7_fu_176_p1() {
    trunc_ln25_7_fu_176_p1 = Sreg_Array_q0.read().range(8-1, 0);
}

void shift_reg_ip::thread_trunc_ln25_8_fu_190_p1() {
    trunc_ln25_8_fu_190_p1 = Sreg_Array_q0.read().range(8-1, 0);
}

void shift_reg_ip::thread_trunc_ln25_9_fu_204_p1() {
    trunc_ln25_9_fu_204_p1 = Sreg_Array_q0.read().range(8-1, 0);
}

void shift_reg_ip::thread_trunc_ln25_fu_78_p1() {
    trunc_ln25_fu_78_p1 = Sreg_Array_q0.read().range(8-1, 0);
}

void shift_reg_ip::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

}

