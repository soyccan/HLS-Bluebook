// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _shift_reg_en_HH_
#define _shift_reg_en_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct shift_reg_en : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > din;
    sc_in< sc_logic > en;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_out< sc_lv<8> > ap_return_4;
    sc_out< sc_lv<8> > ap_return_5;
    sc_out< sc_lv<8> > ap_return_6;
    sc_out< sc_lv<8> > ap_return_7;
    sc_out< sc_lv<8> > ap_return_8;
    sc_out< sc_lv<8> > ap_return_9;
    sc_out< sc_lv<8> > ap_return_10;
    sc_out< sc_lv<8> > ap_return_11;


    // Module declarations
    shift_reg_en(sc_module_name name);
    SC_HAS_PROCESS(shift_reg_en);

    ~shift_reg_en();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > regs_6_10;
    sc_signal< sc_lv<8> > regs_6_9;
    sc_signal< sc_lv<8> > regs_6_8;
    sc_signal< sc_lv<8> > regs_6_7;
    sc_signal< sc_lv<8> > regs_6_6;
    sc_signal< sc_lv<8> > regs_6_5;
    sc_signal< sc_lv<8> > regs_6_4;
    sc_signal< sc_lv<8> > regs_6_3;
    sc_signal< sc_lv<8> > regs_6_2;
    sc_signal< sc_lv<8> > regs_6_1;
    sc_signal< sc_lv<8> > regs_6_0;
    sc_signal< sc_lv<8> > regs_6_11;
    sc_signal< sc_lv<8> > dout_10_write_assig_reg_46;
    sc_signal< sc_lv<1> > en_read_read_fu_34_p2;
    sc_signal< sc_lv<8> > dout_9_write_assign_reg_55;
    sc_signal< sc_lv<8> > dout_8_write_assign_reg_64;
    sc_signal< sc_lv<8> > dout_7_write_assign_reg_73;
    sc_signal< sc_lv<8> > dout_6_write_assign_reg_82;
    sc_signal< sc_lv<8> > dout_5_write_assign_reg_91;
    sc_signal< sc_lv<8> > dout_4_write_assign_reg_100;
    sc_signal< sc_lv<8> > dout_3_write_assign_reg_109;
    sc_signal< sc_lv<8> > dout_2_write_assign_reg_118;
    sc_signal< sc_lv<8> > dout_1_write_assign_reg_127;
    sc_signal< sc_lv<8> > dout_0_write_assign_reg_136;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > ap_return_0_preg;
    sc_signal< sc_lv<8> > ap_return_1_preg;
    sc_signal< sc_lv<8> > ap_return_2_preg;
    sc_signal< sc_lv<8> > ap_return_3_preg;
    sc_signal< sc_lv<8> > ap_return_4_preg;
    sc_signal< sc_lv<8> > ap_return_5_preg;
    sc_signal< sc_lv<8> > ap_return_6_preg;
    sc_signal< sc_lv<8> > ap_return_7_preg;
    sc_signal< sc_lv<8> > ap_return_8_preg;
    sc_signal< sc_lv<8> > ap_return_9_preg;
    sc_signal< sc_lv<8> > ap_return_10_preg;
    sc_signal< sc_lv<8> > ap_return_11_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_en_read_read_fu_34_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
