// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _shift_reg_ip_HH_
#define _shift_reg_ip_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "shift_reg_ip_Sregbkb.h"

namespace ap_rtl {

struct shift_reg_ip : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > din;
    sc_in< sc_logic > en;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_out< sc_lv<8> > ap_return_4;
    sc_out< sc_lv<8> > ap_return_5;
    sc_out< sc_lv<8> > ap_return_6;
    sc_out< sc_lv<8> > ap_return_7;
    sc_out< sc_lv<8> > ap_return_8;
    sc_out< sc_lv<8> > ap_return_9;
    sc_out< sc_lv<8> > ap_return_10;
    sc_out< sc_lv<8> > ap_return_11;


    // Module declarations
    shift_reg_ip(sc_module_name name);
    SC_HAS_PROCESS(shift_reg_ip);

    ~shift_reg_ip();

    sc_trace_file* mVcdFile;

    shift_reg_ip_Sregbkb* Sreg_Array_U;
    sc_signal< sc_lv<13> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > Sreg_Array_address0;
    sc_signal< sc_logic > Sreg_Array_ce0;
    sc_signal< sc_logic > Sreg_Array_we0;
    sc_signal< sc_lv<32> > Sreg_Array_q0;
    sc_signal< sc_lv<8> > trunc_ln25_fu_78_p1;
    sc_signal< sc_lv<8> > trunc_ln25_reg_297;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > trunc_ln25_1_fu_92_p1;
    sc_signal< sc_lv<8> > trunc_ln25_1_reg_302;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > trunc_ln25_2_fu_106_p1;
    sc_signal< sc_lv<8> > trunc_ln25_2_reg_307;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > trunc_ln25_3_fu_120_p1;
    sc_signal< sc_lv<8> > trunc_ln25_3_reg_312;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > trunc_ln25_4_fu_134_p1;
    sc_signal< sc_lv<8> > trunc_ln25_4_reg_317;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<8> > trunc_ln25_5_fu_148_p1;
    sc_signal< sc_lv<8> > trunc_ln25_5_reg_322;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<8> > trunc_ln25_6_fu_162_p1;
    sc_signal< sc_lv<8> > trunc_ln25_6_reg_327;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<8> > trunc_ln25_7_fu_176_p1;
    sc_signal< sc_lv<8> > trunc_ln25_7_reg_332;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<8> > trunc_ln25_8_fu_190_p1;
    sc_signal< sc_lv<8> > trunc_ln25_8_reg_337;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<8> > trunc_ln25_9_fu_204_p1;
    sc_signal< sc_lv<8> > trunc_ln25_9_reg_342;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<8> > trunc_ln25_10_fu_218_p1;
    sc_signal< sc_lv<8> > trunc_ln25_10_reg_347;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<32> > sext_ln20_fu_54_p1;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<8> > trunc_ln25_11_fu_232_p1;
    sc_signal< sc_lv<13> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<13> ap_ST_fsm_state1;
    static const sc_lv<13> ap_ST_fsm_state2;
    static const sc_lv<13> ap_ST_fsm_state3;
    static const sc_lv<13> ap_ST_fsm_state4;
    static const sc_lv<13> ap_ST_fsm_state5;
    static const sc_lv<13> ap_ST_fsm_state6;
    static const sc_lv<13> ap_ST_fsm_state7;
    static const sc_lv<13> ap_ST_fsm_state8;
    static const sc_lv<13> ap_ST_fsm_state9;
    static const sc_lv<13> ap_ST_fsm_state10;
    static const sc_lv<13> ap_ST_fsm_state11;
    static const sc_lv<13> ap_ST_fsm_state12;
    static const sc_lv<13> ap_ST_fsm_state13;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<4> ap_const_lv4_7;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_9;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Sreg_Array_address0();
    void thread_Sreg_Array_ce0();
    void thread_Sreg_Array_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_sext_ln20_fu_54_p1();
    void thread_trunc_ln25_10_fu_218_p1();
    void thread_trunc_ln25_11_fu_232_p1();
    void thread_trunc_ln25_1_fu_92_p1();
    void thread_trunc_ln25_2_fu_106_p1();
    void thread_trunc_ln25_3_fu_120_p1();
    void thread_trunc_ln25_4_fu_134_p1();
    void thread_trunc_ln25_5_fu_148_p1();
    void thread_trunc_ln25_6_fu_162_p1();
    void thread_trunc_ln25_7_fu_176_p1();
    void thread_trunc_ln25_8_fu_190_p1();
    void thread_trunc_ln25_9_fu_204_p1();
    void thread_trunc_ln25_fu_78_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
