// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "shift_reg_class.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic shift_reg_class::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic shift_reg_class::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> shift_reg_class::ap_ST_fsm_state1 = "1";
const sc_lv<2> shift_reg_class::ap_ST_fsm_state2 = "10";
const sc_lv<32> shift_reg_class::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<8> shift_reg_class::ap_const_lv8_0 = "00000000";
const sc_lv<1> shift_reg_class::ap_const_lv1_1 = "1";
const sc_lv<1> shift_reg_class::ap_const_lv1_0 = "0";
const sc_lv<32> shift_reg_class::ap_const_lv32_1 = "1";
const bool shift_reg_class::ap_const_boolean_1 = true;

shift_reg_class::shift_reg_class(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( dout0_0_write_assig_reg_220 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( dout0_1_write_assig_reg_211 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_ap_return_10);
    sensitive << ( dout0_10_write_assi_reg_139 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_return_10_preg );

    SC_METHOD(thread_ap_return_11);
    sensitive << ( shift_reg1_regs_3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_return_11_preg );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( dout0_2_write_assig_reg_202 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_return_2_preg );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( dout0_3_write_assig_reg_193 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_return_3_preg );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( dout0_4_write_assig_reg_184 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_return_4_preg );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( dout0_5_write_assig_reg_175 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_return_5_preg );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( dout0_6_write_assig_reg_166 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_return_6_preg );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( dout0_7_write_assig_reg_130 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_return_7_preg );

    SC_METHOD(thread_ap_return_8);
    sensitive << ( dout0_8_write_assig_reg_157 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_return_8_preg );

    SC_METHOD(thread_ap_return_9);
    sensitive << ( dout0_9_write_assig_reg_148 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_return_9_preg );

    SC_METHOD(thread_en_read_read_fu_58_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( en );

    SC_METHOD(thread_or_ln50_fu_457_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( srst );

    SC_METHOD(thread_or_ln50_fu_457_p2);
    sensitive << ( or_ln50_fu_457_p0 );
    sensitive << ( xor_ln50_fu_451_p2 );

    SC_METHOD(thread_select_ln25_1_fu_327_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( srst );

    SC_METHOD(thread_select_ln25_1_fu_327_p3);
    sensitive << ( select_ln25_1_fu_327_p0 );
    sensitive << ( select_ln52_1_fu_319_p3 );

    SC_METHOD(thread_select_ln25_2_fu_349_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( srst );

    SC_METHOD(thread_select_ln25_2_fu_349_p3);
    sensitive << ( select_ln25_2_fu_349_p0 );
    sensitive << ( select_ln52_2_fu_341_p3 );

    SC_METHOD(thread_select_ln25_3_fu_371_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( srst );

    SC_METHOD(thread_select_ln25_3_fu_371_p3);
    sensitive << ( select_ln25_3_fu_371_p0 );
    sensitive << ( select_ln52_3_fu_363_p3 );

    SC_METHOD(thread_select_ln25_4_fu_393_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( srst );

    SC_METHOD(thread_select_ln25_4_fu_393_p3);
    sensitive << ( select_ln25_4_fu_393_p0 );
    sensitive << ( select_ln52_4_fu_385_p3 );

    SC_METHOD(thread_select_ln25_5_fu_415_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( srst );

    SC_METHOD(thread_select_ln25_5_fu_415_p3);
    sensitive << ( select_ln25_5_fu_415_p0 );
    sensitive << ( select_ln52_5_fu_407_p3 );

    SC_METHOD(thread_select_ln25_6_fu_437_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( srst );

    SC_METHOD(thread_select_ln25_6_fu_437_p3);
    sensitive << ( select_ln25_6_fu_437_p0 );
    sensitive << ( select_ln52_6_fu_429_p3 );

    SC_METHOD(thread_select_ln25_fu_305_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( srst );

    SC_METHOD(thread_select_ln25_fu_305_p3);
    sensitive << ( select_ln25_fu_305_p0 );
    sensitive << ( select_ln52_fu_297_p3 );

    SC_METHOD(thread_select_ln50_1_fu_471_p3);
    sensitive << ( load_data_0_read );
    sensitive << ( or_ln50_fu_457_p2 );
    sensitive << ( select_ln50_fu_463_p3 );

    SC_METHOD(thread_select_ln50_fu_463_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( srst );

    SC_METHOD(thread_select_ln50_fu_463_p3);
    sensitive << ( din );
    sensitive << ( select_ln50_fu_463_p0 );

    SC_METHOD(thread_select_ln52_1_fu_319_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( load );

    SC_METHOD(thread_select_ln52_1_fu_319_p3);
    sensitive << ( load_data_6_read );
    sensitive << ( shift_reg0_regs_5 );
    sensitive << ( select_ln52_1_fu_319_p0 );

    SC_METHOD(thread_select_ln52_2_fu_341_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( load );

    SC_METHOD(thread_select_ln52_2_fu_341_p3);
    sensitive << ( load_data_5_read );
    sensitive << ( shift_reg0_regs_4 );
    sensitive << ( select_ln52_2_fu_341_p0 );

    SC_METHOD(thread_select_ln52_3_fu_363_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( load );

    SC_METHOD(thread_select_ln52_3_fu_363_p3);
    sensitive << ( load_data_4_read );
    sensitive << ( shift_reg0_regs_3 );
    sensitive << ( select_ln52_3_fu_363_p0 );

    SC_METHOD(thread_select_ln52_4_fu_385_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( load );

    SC_METHOD(thread_select_ln52_4_fu_385_p3);
    sensitive << ( load_data_3_read );
    sensitive << ( shift_reg0_regs_2 );
    sensitive << ( select_ln52_4_fu_385_p0 );

    SC_METHOD(thread_select_ln52_5_fu_407_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( load );

    SC_METHOD(thread_select_ln52_5_fu_407_p3);
    sensitive << ( load_data_2_read );
    sensitive << ( shift_reg0_regs_1 );
    sensitive << ( select_ln52_5_fu_407_p0 );

    SC_METHOD(thread_select_ln52_6_fu_429_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( load );

    SC_METHOD(thread_select_ln52_6_fu_429_p3);
    sensitive << ( load_data_1_read );
    sensitive << ( shift_reg0_regs_0 );
    sensitive << ( select_ln52_6_fu_429_p0 );

    SC_METHOD(thread_select_ln52_fu_297_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( load );

    SC_METHOD(thread_select_ln52_fu_297_p3);
    sensitive << ( load_data_7_read );
    sensitive << ( shift_reg0_regs_6 );
    sensitive << ( select_ln52_fu_297_p0 );

    SC_METHOD(thread_xor_ln50_fu_451_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( load );

    SC_METHOD(thread_xor_ln50_fu_451_p2);
    sensitive << ( xor_ln50_fu_451_p0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    ap_CS_fsm = "01";
    shift_reg0_regs_7 = "00000000";
    shift_reg1_regs_2 = "00000000";
    shift_reg1_regs_1 = "00000000";
    shift_reg1_regs_0 = "00000000";
    shift_reg0_regs_6 = "00000000";
    shift_reg0_regs_5 = "00000000";
    shift_reg0_regs_4 = "00000000";
    shift_reg0_regs_3 = "00000000";
    shift_reg0_regs_2 = "00000000";
    shift_reg0_regs_1 = "00000000";
    shift_reg0_regs_0 = "00000000";
    shift_reg1_regs_3 = "00000000";
    ap_return_0_preg = "00000000";
    ap_return_1_preg = "00000000";
    ap_return_2_preg = "00000000";
    ap_return_3_preg = "00000000";
    ap_return_4_preg = "00000000";
    ap_return_5_preg = "00000000";
    ap_return_6_preg = "00000000";
    ap_return_7_preg = "00000000";
    ap_return_8_preg = "00000000";
    ap_return_9_preg = "00000000";
    ap_return_10_preg = "00000000";
    ap_return_11_preg = "00000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "shift_reg_class_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, din, "(port)din");
    sc_trace(mVcdFile, load_data_0_read, "(port)load_data_0_read");
    sc_trace(mVcdFile, load_data_1_read, "(port)load_data_1_read");
    sc_trace(mVcdFile, load_data_2_read, "(port)load_data_2_read");
    sc_trace(mVcdFile, load_data_3_read, "(port)load_data_3_read");
    sc_trace(mVcdFile, load_data_4_read, "(port)load_data_4_read");
    sc_trace(mVcdFile, load_data_5_read, "(port)load_data_5_read");
    sc_trace(mVcdFile, load_data_6_read, "(port)load_data_6_read");
    sc_trace(mVcdFile, load_data_7_read, "(port)load_data_7_read");
    sc_trace(mVcdFile, srst, "(port)srst");
    sc_trace(mVcdFile, load, "(port)load");
    sc_trace(mVcdFile, en, "(port)en");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, ap_return_8, "(port)ap_return_8");
    sc_trace(mVcdFile, ap_return_9, "(port)ap_return_9");
    sc_trace(mVcdFile, ap_return_10, "(port)ap_return_10");
    sc_trace(mVcdFile, ap_return_11, "(port)ap_return_11");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, shift_reg0_regs_7, "shift_reg0_regs_7");
    sc_trace(mVcdFile, shift_reg1_regs_2, "shift_reg1_regs_2");
    sc_trace(mVcdFile, shift_reg1_regs_1, "shift_reg1_regs_1");
    sc_trace(mVcdFile, shift_reg1_regs_0, "shift_reg1_regs_0");
    sc_trace(mVcdFile, shift_reg0_regs_6, "shift_reg0_regs_6");
    sc_trace(mVcdFile, shift_reg0_regs_5, "shift_reg0_regs_5");
    sc_trace(mVcdFile, shift_reg0_regs_4, "shift_reg0_regs_4");
    sc_trace(mVcdFile, shift_reg0_regs_3, "shift_reg0_regs_3");
    sc_trace(mVcdFile, shift_reg0_regs_2, "shift_reg0_regs_2");
    sc_trace(mVcdFile, shift_reg0_regs_1, "shift_reg0_regs_1");
    sc_trace(mVcdFile, shift_reg0_regs_0, "shift_reg0_regs_0");
    sc_trace(mVcdFile, shift_reg1_regs_3, "shift_reg1_regs_3");
    sc_trace(mVcdFile, select_ln25_fu_305_p3, "select_ln25_fu_305_p3");
    sc_trace(mVcdFile, en_read_read_fu_58_p2, "en_read_read_fu_58_p2");
    sc_trace(mVcdFile, select_ln25_1_fu_327_p3, "select_ln25_1_fu_327_p3");
    sc_trace(mVcdFile, select_ln25_2_fu_349_p3, "select_ln25_2_fu_349_p3");
    sc_trace(mVcdFile, select_ln25_3_fu_371_p3, "select_ln25_3_fu_371_p3");
    sc_trace(mVcdFile, select_ln25_4_fu_393_p3, "select_ln25_4_fu_393_p3");
    sc_trace(mVcdFile, select_ln25_5_fu_415_p3, "select_ln25_5_fu_415_p3");
    sc_trace(mVcdFile, select_ln25_6_fu_437_p3, "select_ln25_6_fu_437_p3");
    sc_trace(mVcdFile, select_ln50_1_fu_471_p3, "select_ln50_1_fu_471_p3");
    sc_trace(mVcdFile, dout0_7_write_assig_reg_130, "dout0_7_write_assig_reg_130");
    sc_trace(mVcdFile, dout0_10_write_assi_reg_139, "dout0_10_write_assi_reg_139");
    sc_trace(mVcdFile, dout0_9_write_assig_reg_148, "dout0_9_write_assig_reg_148");
    sc_trace(mVcdFile, dout0_8_write_assig_reg_157, "dout0_8_write_assig_reg_157");
    sc_trace(mVcdFile, dout0_6_write_assig_reg_166, "dout0_6_write_assig_reg_166");
    sc_trace(mVcdFile, dout0_5_write_assig_reg_175, "dout0_5_write_assig_reg_175");
    sc_trace(mVcdFile, dout0_4_write_assig_reg_184, "dout0_4_write_assig_reg_184");
    sc_trace(mVcdFile, dout0_3_write_assig_reg_193, "dout0_3_write_assig_reg_193");
    sc_trace(mVcdFile, dout0_2_write_assig_reg_202, "dout0_2_write_assig_reg_202");
    sc_trace(mVcdFile, dout0_1_write_assig_reg_211, "dout0_1_write_assig_reg_211");
    sc_trace(mVcdFile, dout0_0_write_assig_reg_220, "dout0_0_write_assig_reg_220");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, select_ln52_fu_297_p0, "select_ln52_fu_297_p0");
    sc_trace(mVcdFile, select_ln25_fu_305_p0, "select_ln25_fu_305_p0");
    sc_trace(mVcdFile, select_ln52_fu_297_p3, "select_ln52_fu_297_p3");
    sc_trace(mVcdFile, select_ln52_1_fu_319_p0, "select_ln52_1_fu_319_p0");
    sc_trace(mVcdFile, select_ln25_1_fu_327_p0, "select_ln25_1_fu_327_p0");
    sc_trace(mVcdFile, select_ln52_1_fu_319_p3, "select_ln52_1_fu_319_p3");
    sc_trace(mVcdFile, select_ln52_2_fu_341_p0, "select_ln52_2_fu_341_p0");
    sc_trace(mVcdFile, select_ln25_2_fu_349_p0, "select_ln25_2_fu_349_p0");
    sc_trace(mVcdFile, select_ln52_2_fu_341_p3, "select_ln52_2_fu_341_p3");
    sc_trace(mVcdFile, select_ln52_3_fu_363_p0, "select_ln52_3_fu_363_p0");
    sc_trace(mVcdFile, select_ln25_3_fu_371_p0, "select_ln25_3_fu_371_p0");
    sc_trace(mVcdFile, select_ln52_3_fu_363_p3, "select_ln52_3_fu_363_p3");
    sc_trace(mVcdFile, select_ln52_4_fu_385_p0, "select_ln52_4_fu_385_p0");
    sc_trace(mVcdFile, select_ln25_4_fu_393_p0, "select_ln25_4_fu_393_p0");
    sc_trace(mVcdFile, select_ln52_4_fu_385_p3, "select_ln52_4_fu_385_p3");
    sc_trace(mVcdFile, select_ln52_5_fu_407_p0, "select_ln52_5_fu_407_p0");
    sc_trace(mVcdFile, select_ln25_5_fu_415_p0, "select_ln25_5_fu_415_p0");
    sc_trace(mVcdFile, select_ln52_5_fu_407_p3, "select_ln52_5_fu_407_p3");
    sc_trace(mVcdFile, select_ln52_6_fu_429_p0, "select_ln52_6_fu_429_p0");
    sc_trace(mVcdFile, select_ln25_6_fu_437_p0, "select_ln25_6_fu_437_p0");
    sc_trace(mVcdFile, select_ln52_6_fu_429_p3, "select_ln52_6_fu_429_p3");
    sc_trace(mVcdFile, xor_ln50_fu_451_p0, "xor_ln50_fu_451_p0");
    sc_trace(mVcdFile, or_ln50_fu_457_p0, "or_ln50_fu_457_p0");
    sc_trace(mVcdFile, xor_ln50_fu_451_p2, "xor_ln50_fu_451_p2");
    sc_trace(mVcdFile, select_ln50_fu_463_p0, "select_ln50_fu_463_p0");
    sc_trace(mVcdFile, or_ln50_fu_457_p2, "or_ln50_fu_457_p2");
    sc_trace(mVcdFile, select_ln50_fu_463_p3, "select_ln50_fu_463_p3");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_return_2_preg, "ap_return_2_preg");
    sc_trace(mVcdFile, ap_return_3_preg, "ap_return_3_preg");
    sc_trace(mVcdFile, ap_return_4_preg, "ap_return_4_preg");
    sc_trace(mVcdFile, ap_return_5_preg, "ap_return_5_preg");
    sc_trace(mVcdFile, ap_return_6_preg, "ap_return_6_preg");
    sc_trace(mVcdFile, ap_return_7_preg, "ap_return_7_preg");
    sc_trace(mVcdFile, ap_return_8_preg, "ap_return_8_preg");
    sc_trace(mVcdFile, ap_return_9_preg, "ap_return_9_preg");
    sc_trace(mVcdFile, ap_return_10_preg, "ap_return_10_preg");
    sc_trace(mVcdFile, ap_return_11_preg, "ap_return_11_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

shift_reg_class::~shift_reg_class() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void shift_reg_class::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_0_preg = dout0_0_write_assig_reg_220.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_10_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_10_preg = dout0_10_write_assi_reg_139.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_11_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_11_preg = shift_reg1_regs_3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_1_preg = dout0_1_write_assig_reg_211.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_2_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_2_preg = dout0_2_write_assig_reg_202.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_3_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_3_preg = dout0_3_write_assig_reg_193.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_4_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_4_preg = dout0_4_write_assig_reg_184.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_5_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_5_preg = dout0_5_write_assig_reg_175.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_6_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_6_preg = dout0_6_write_assig_reg_166.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_7_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_7_preg = dout0_7_write_assig_reg_130.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_8_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_8_preg = dout0_8_write_assig_reg_157.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_9_preg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_return_9_preg = dout0_9_write_assig_reg_148.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_0)) {
            dout0_0_write_assig_reg_220 = shift_reg0_regs_0.read();
        } else if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_1)) {
            dout0_0_write_assig_reg_220 = select_ln50_1_fu_471_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_0)) {
            dout0_10_write_assi_reg_139 = shift_reg1_regs_2.read();
        } else if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_1)) {
            dout0_10_write_assi_reg_139 = shift_reg1_regs_1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_0)) {
            dout0_1_write_assig_reg_211 = shift_reg0_regs_1.read();
        } else if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_1)) {
            dout0_1_write_assig_reg_211 = select_ln25_6_fu_437_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_0)) {
            dout0_2_write_assig_reg_202 = shift_reg0_regs_2.read();
        } else if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_1)) {
            dout0_2_write_assig_reg_202 = select_ln25_5_fu_415_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_0)) {
            dout0_3_write_assig_reg_193 = shift_reg0_regs_3.read();
        } else if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_1)) {
            dout0_3_write_assig_reg_193 = select_ln25_4_fu_393_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_0)) {
            dout0_4_write_assig_reg_184 = shift_reg0_regs_4.read();
        } else if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_1)) {
            dout0_4_write_assig_reg_184 = select_ln25_3_fu_371_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_0)) {
            dout0_5_write_assig_reg_175 = shift_reg0_regs_5.read();
        } else if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_1)) {
            dout0_5_write_assig_reg_175 = select_ln25_2_fu_349_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_0)) {
            dout0_6_write_assig_reg_166 = shift_reg0_regs_6.read();
        } else if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_1)) {
            dout0_6_write_assig_reg_166 = select_ln25_1_fu_327_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_0)) {
            dout0_7_write_assig_reg_130 = shift_reg0_regs_7.read();
        } else if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_1)) {
            dout0_7_write_assig_reg_130 = select_ln25_fu_305_p3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_0)) {
            dout0_8_write_assig_reg_157 = shift_reg1_regs_0.read();
        } else if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_1)) {
            dout0_8_write_assig_reg_157 = shift_reg0_regs_7.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_0)) {
            dout0_9_write_assig_reg_148 = shift_reg1_regs_1.read();
        } else if (esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_1)) {
            dout0_9_write_assig_reg_148 = shift_reg1_regs_0.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(en_read_read_fu_58_p2.read(), ap_const_lv1_1))) {
        shift_reg0_regs_0 = select_ln50_1_fu_471_p3.read();
        shift_reg0_regs_1 = select_ln25_6_fu_437_p3.read();
        shift_reg0_regs_2 = select_ln25_5_fu_415_p3.read();
        shift_reg0_regs_3 = select_ln25_4_fu_393_p3.read();
        shift_reg0_regs_4 = select_ln25_3_fu_371_p3.read();
        shift_reg0_regs_5 = select_ln25_2_fu_349_p3.read();
        shift_reg0_regs_6 = select_ln25_1_fu_327_p3.read();
        shift_reg0_regs_7 = select_ln25_fu_305_p3.read();
        shift_reg1_regs_0 = shift_reg0_regs_7.read();
        shift_reg1_regs_1 = shift_reg1_regs_0.read();
        shift_reg1_regs_2 = shift_reg1_regs_1.read();
        shift_reg1_regs_3 = shift_reg1_regs_2.read();
    }
}

void shift_reg_class::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void shift_reg_class::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void shift_reg_class::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void shift_reg_class::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void shift_reg_class::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void shift_reg_class::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_0 = dout0_0_write_assig_reg_220.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void shift_reg_class::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_1 = dout0_1_write_assig_reg_211.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void shift_reg_class::thread_ap_return_10() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_10 = dout0_10_write_assi_reg_139.read();
    } else {
        ap_return_10 = ap_return_10_preg.read();
    }
}

void shift_reg_class::thread_ap_return_11() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_11 = shift_reg1_regs_3.read();
    } else {
        ap_return_11 = ap_return_11_preg.read();
    }
}

void shift_reg_class::thread_ap_return_2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_2 = dout0_2_write_assig_reg_202.read();
    } else {
        ap_return_2 = ap_return_2_preg.read();
    }
}

void shift_reg_class::thread_ap_return_3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_3 = dout0_3_write_assig_reg_193.read();
    } else {
        ap_return_3 = ap_return_3_preg.read();
    }
}

void shift_reg_class::thread_ap_return_4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_4 = dout0_4_write_assig_reg_184.read();
    } else {
        ap_return_4 = ap_return_4_preg.read();
    }
}

void shift_reg_class::thread_ap_return_5() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_5 = dout0_5_write_assig_reg_175.read();
    } else {
        ap_return_5 = ap_return_5_preg.read();
    }
}

void shift_reg_class::thread_ap_return_6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_6 = dout0_6_write_assig_reg_166.read();
    } else {
        ap_return_6 = ap_return_6_preg.read();
    }
}

void shift_reg_class::thread_ap_return_7() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_7 = dout0_7_write_assig_reg_130.read();
    } else {
        ap_return_7 = ap_return_7_preg.read();
    }
}

void shift_reg_class::thread_ap_return_8() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_8 = dout0_8_write_assig_reg_157.read();
    } else {
        ap_return_8 = ap_return_8_preg.read();
    }
}

void shift_reg_class::thread_ap_return_9() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_return_9 = dout0_9_write_assig_reg_148.read();
    } else {
        ap_return_9 = ap_return_9_preg.read();
    }
}

void shift_reg_class::thread_en_read_read_fu_58_p2() {
    en_read_read_fu_58_p2 =  (sc_lv<1>) (en.read());
}

void shift_reg_class::thread_or_ln50_fu_457_p0() {
    or_ln50_fu_457_p0 =  (sc_lv<1>) (srst.read());
}

void shift_reg_class::thread_or_ln50_fu_457_p2() {
    or_ln50_fu_457_p2 = (or_ln50_fu_457_p0.read() | xor_ln50_fu_451_p2.read());
}

void shift_reg_class::thread_select_ln25_1_fu_327_p0() {
    select_ln25_1_fu_327_p0 =  (sc_lv<1>) (srst.read());
}

void shift_reg_class::thread_select_ln25_1_fu_327_p3() {
    select_ln25_1_fu_327_p3 = (!select_ln25_1_fu_327_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln25_1_fu_327_p0.read()[0].to_bool())? ap_const_lv8_0: select_ln52_1_fu_319_p3.read());
}

void shift_reg_class::thread_select_ln25_2_fu_349_p0() {
    select_ln25_2_fu_349_p0 =  (sc_lv<1>) (srst.read());
}

void shift_reg_class::thread_select_ln25_2_fu_349_p3() {
    select_ln25_2_fu_349_p3 = (!select_ln25_2_fu_349_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln25_2_fu_349_p0.read()[0].to_bool())? ap_const_lv8_0: select_ln52_2_fu_341_p3.read());
}

void shift_reg_class::thread_select_ln25_3_fu_371_p0() {
    select_ln25_3_fu_371_p0 =  (sc_lv<1>) (srst.read());
}

void shift_reg_class::thread_select_ln25_3_fu_371_p3() {
    select_ln25_3_fu_371_p3 = (!select_ln25_3_fu_371_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln25_3_fu_371_p0.read()[0].to_bool())? ap_const_lv8_0: select_ln52_3_fu_363_p3.read());
}

void shift_reg_class::thread_select_ln25_4_fu_393_p0() {
    select_ln25_4_fu_393_p0 =  (sc_lv<1>) (srst.read());
}

void shift_reg_class::thread_select_ln25_4_fu_393_p3() {
    select_ln25_4_fu_393_p3 = (!select_ln25_4_fu_393_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln25_4_fu_393_p0.read()[0].to_bool())? ap_const_lv8_0: select_ln52_4_fu_385_p3.read());
}

void shift_reg_class::thread_select_ln25_5_fu_415_p0() {
    select_ln25_5_fu_415_p0 =  (sc_lv<1>) (srst.read());
}

void shift_reg_class::thread_select_ln25_5_fu_415_p3() {
    select_ln25_5_fu_415_p3 = (!select_ln25_5_fu_415_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln25_5_fu_415_p0.read()[0].to_bool())? ap_const_lv8_0: select_ln52_5_fu_407_p3.read());
}

void shift_reg_class::thread_select_ln25_6_fu_437_p0() {
    select_ln25_6_fu_437_p0 =  (sc_lv<1>) (srst.read());
}

void shift_reg_class::thread_select_ln25_6_fu_437_p3() {
    select_ln25_6_fu_437_p3 = (!select_ln25_6_fu_437_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln25_6_fu_437_p0.read()[0].to_bool())? ap_const_lv8_0: select_ln52_6_fu_429_p3.read());
}

void shift_reg_class::thread_select_ln25_fu_305_p0() {
    select_ln25_fu_305_p0 =  (sc_lv<1>) (srst.read());
}

void shift_reg_class::thread_select_ln25_fu_305_p3() {
    select_ln25_fu_305_p3 = (!select_ln25_fu_305_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln25_fu_305_p0.read()[0].to_bool())? ap_const_lv8_0: select_ln52_fu_297_p3.read());
}

void shift_reg_class::thread_select_ln50_1_fu_471_p3() {
    select_ln50_1_fu_471_p3 = (!or_ln50_fu_457_p2.read()[0].is_01())? sc_lv<8>(): ((or_ln50_fu_457_p2.read()[0].to_bool())? select_ln50_fu_463_p3.read(): load_data_0_read.read());
}

void shift_reg_class::thread_select_ln50_fu_463_p0() {
    select_ln50_fu_463_p0 =  (sc_lv<1>) (srst.read());
}

void shift_reg_class::thread_select_ln50_fu_463_p3() {
    select_ln50_fu_463_p3 = (!select_ln50_fu_463_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln50_fu_463_p0.read()[0].to_bool())? ap_const_lv8_0: din.read());
}

void shift_reg_class::thread_select_ln52_1_fu_319_p0() {
    select_ln52_1_fu_319_p0 =  (sc_lv<1>) (load.read());
}

void shift_reg_class::thread_select_ln52_1_fu_319_p3() {
    select_ln52_1_fu_319_p3 = (!select_ln52_1_fu_319_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln52_1_fu_319_p0.read()[0].to_bool())? load_data_6_read.read(): shift_reg0_regs_5.read());
}

void shift_reg_class::thread_select_ln52_2_fu_341_p0() {
    select_ln52_2_fu_341_p0 =  (sc_lv<1>) (load.read());
}

void shift_reg_class::thread_select_ln52_2_fu_341_p3() {
    select_ln52_2_fu_341_p3 = (!select_ln52_2_fu_341_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln52_2_fu_341_p0.read()[0].to_bool())? load_data_5_read.read(): shift_reg0_regs_4.read());
}

void shift_reg_class::thread_select_ln52_3_fu_363_p0() {
    select_ln52_3_fu_363_p0 =  (sc_lv<1>) (load.read());
}

void shift_reg_class::thread_select_ln52_3_fu_363_p3() {
    select_ln52_3_fu_363_p3 = (!select_ln52_3_fu_363_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln52_3_fu_363_p0.read()[0].to_bool())? load_data_4_read.read(): shift_reg0_regs_3.read());
}

void shift_reg_class::thread_select_ln52_4_fu_385_p0() {
    select_ln52_4_fu_385_p0 =  (sc_lv<1>) (load.read());
}

void shift_reg_class::thread_select_ln52_4_fu_385_p3() {
    select_ln52_4_fu_385_p3 = (!select_ln52_4_fu_385_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln52_4_fu_385_p0.read()[0].to_bool())? load_data_3_read.read(): shift_reg0_regs_2.read());
}

void shift_reg_class::thread_select_ln52_5_fu_407_p0() {
    select_ln52_5_fu_407_p0 =  (sc_lv<1>) (load.read());
}

void shift_reg_class::thread_select_ln52_5_fu_407_p3() {
    select_ln52_5_fu_407_p3 = (!select_ln52_5_fu_407_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln52_5_fu_407_p0.read()[0].to_bool())? load_data_2_read.read(): shift_reg0_regs_1.read());
}

void shift_reg_class::thread_select_ln52_6_fu_429_p0() {
    select_ln52_6_fu_429_p0 =  (sc_lv<1>) (load.read());
}

void shift_reg_class::thread_select_ln52_6_fu_429_p3() {
    select_ln52_6_fu_429_p3 = (!select_ln52_6_fu_429_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln52_6_fu_429_p0.read()[0].to_bool())? load_data_1_read.read(): shift_reg0_regs_0.read());
}

void shift_reg_class::thread_select_ln52_fu_297_p0() {
    select_ln52_fu_297_p0 =  (sc_lv<1>) (load.read());
}

void shift_reg_class::thread_select_ln52_fu_297_p3() {
    select_ln52_fu_297_p3 = (!select_ln52_fu_297_p0.read()[0].is_01())? sc_lv<8>(): ((select_ln52_fu_297_p0.read()[0].to_bool())? load_data_7_read.read(): shift_reg0_regs_6.read());
}

void shift_reg_class::thread_xor_ln50_fu_451_p0() {
    xor_ln50_fu_451_p0 =  (sc_lv<1>) (load.read());
}

void shift_reg_class::thread_xor_ln50_fu_451_p2() {
    xor_ln50_fu_451_p2 = (xor_ln50_fu_451_p0.read() ^ ap_const_lv1_1);
}

void shift_reg_class::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

