// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shift_reg_en (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din,
        en,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] din;
input   en;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[7:0] ap_return_4;
reg[7:0] ap_return_5;
reg[7:0] ap_return_6;
reg[7:0] ap_return_7;
reg[7:0] ap_return_8;
reg[7:0] ap_return_9;
reg[7:0] ap_return_10;
reg[7:0] ap_return_11;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] regs_6_10;
reg   [7:0] regs_6_9;
reg   [7:0] regs_6_8;
reg   [7:0] regs_6_7;
reg   [7:0] regs_6_6;
reg   [7:0] regs_6_5;
reg   [7:0] regs_6_4;
reg   [7:0] regs_6_3;
reg   [7:0] regs_6_2;
reg   [7:0] regs_6_1;
reg   [7:0] regs_6_0;
reg   [7:0] regs_6_11;
reg   [7:0] dout_10_write_assig_reg_46;
wire   [0:0] en_read_read_fu_34_p2;
reg   [7:0] dout_9_write_assign_reg_55;
reg   [7:0] dout_8_write_assign_reg_64;
reg   [7:0] dout_7_write_assign_reg_73;
reg   [7:0] dout_6_write_assign_reg_82;
reg   [7:0] dout_5_write_assign_reg_91;
reg   [7:0] dout_4_write_assign_reg_100;
reg   [7:0] dout_3_write_assign_reg_109;
reg   [7:0] dout_2_write_assign_reg_118;
reg   [7:0] dout_1_write_assign_reg_127;
reg   [7:0] dout_0_write_assign_reg_136;
wire    ap_CS_fsm_state2;
reg   [7:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [7:0] ap_return_4_preg;
reg   [7:0] ap_return_5_preg;
reg   [7:0] ap_return_6_preg;
reg   [7:0] ap_return_7_preg;
reg   [7:0] ap_return_8_preg;
reg   [7:0] ap_return_9_preg;
reg   [7:0] ap_return_10_preg;
reg   [7:0] ap_return_11_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 regs_6_10 = 8'd0;
#0 regs_6_9 = 8'd0;
#0 regs_6_8 = 8'd0;
#0 regs_6_7 = 8'd0;
#0 regs_6_6 = 8'd0;
#0 regs_6_5 = 8'd0;
#0 regs_6_4 = 8'd0;
#0 regs_6_3 = 8'd0;
#0 regs_6_2 = 8'd0;
#0 regs_6_1 = 8'd0;
#0 regs_6_0 = 8'd0;
#0 regs_6_11 = 8'd0;
#0 ap_return_0_preg = 8'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 8'd0;
#0 ap_return_5_preg = 8'd0;
#0 ap_return_6_preg = 8'd0;
#0 ap_return_7_preg = 8'd0;
#0 ap_return_8_preg = 8'd0;
#0 ap_return_9_preg = 8'd0;
#0 ap_return_10_preg = 8'd0;
#0 ap_return_11_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_0_preg <= dout_0_write_assign_reg_136;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_10_preg <= dout_10_write_assig_reg_46;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_11_preg <= regs_6_11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_1_preg <= dout_1_write_assign_reg_127;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_2_preg <= dout_2_write_assign_reg_118;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_3_preg <= dout_3_write_assign_reg_109;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_4_preg <= dout_4_write_assign_reg_100;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_5_preg <= dout_5_write_assign_reg_91;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_6_preg <= dout_6_write_assign_reg_82;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_7_preg <= dout_7_write_assign_reg_73;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_8_preg <= dout_8_write_assign_reg_64;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_9_preg <= dout_9_write_assign_reg_55;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_34_p2 == 1'd0)) begin
            dout_0_write_assign_reg_136 <= regs_6_0;
        end else if ((en_read_read_fu_34_p2 == 1'd1)) begin
            dout_0_write_assign_reg_136 <= din;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_34_p2 == 1'd0)) begin
            dout_10_write_assig_reg_46 <= regs_6_10;
        end else if ((en_read_read_fu_34_p2 == 1'd1)) begin
            dout_10_write_assig_reg_46 <= regs_6_9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_34_p2 == 1'd0)) begin
            dout_1_write_assign_reg_127 <= regs_6_1;
        end else if ((en_read_read_fu_34_p2 == 1'd1)) begin
            dout_1_write_assign_reg_127 <= regs_6_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_34_p2 == 1'd0)) begin
            dout_2_write_assign_reg_118 <= regs_6_2;
        end else if ((en_read_read_fu_34_p2 == 1'd1)) begin
            dout_2_write_assign_reg_118 <= regs_6_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_34_p2 == 1'd0)) begin
            dout_3_write_assign_reg_109 <= regs_6_3;
        end else if ((en_read_read_fu_34_p2 == 1'd1)) begin
            dout_3_write_assign_reg_109 <= regs_6_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_34_p2 == 1'd0)) begin
            dout_4_write_assign_reg_100 <= regs_6_4;
        end else if ((en_read_read_fu_34_p2 == 1'd1)) begin
            dout_4_write_assign_reg_100 <= regs_6_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_34_p2 == 1'd0)) begin
            dout_5_write_assign_reg_91 <= regs_6_5;
        end else if ((en_read_read_fu_34_p2 == 1'd1)) begin
            dout_5_write_assign_reg_91 <= regs_6_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_34_p2 == 1'd0)) begin
            dout_6_write_assign_reg_82 <= regs_6_6;
        end else if ((en_read_read_fu_34_p2 == 1'd1)) begin
            dout_6_write_assign_reg_82 <= regs_6_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_34_p2 == 1'd0)) begin
            dout_7_write_assign_reg_73 <= regs_6_7;
        end else if ((en_read_read_fu_34_p2 == 1'd1)) begin
            dout_7_write_assign_reg_73 <= regs_6_6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_34_p2 == 1'd0)) begin
            dout_8_write_assign_reg_64 <= regs_6_8;
        end else if ((en_read_read_fu_34_p2 == 1'd1)) begin
            dout_8_write_assign_reg_64 <= regs_6_7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_34_p2 == 1'd0)) begin
            dout_9_write_assign_reg_55 <= regs_6_9;
        end else if ((en_read_read_fu_34_p2 == 1'd1)) begin
            dout_9_write_assign_reg_55 <= regs_6_8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (en_read_read_fu_34_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        regs_6_0 <= din;
        regs_6_1 <= regs_6_0;
        regs_6_10 <= regs_6_9;
        regs_6_11 <= regs_6_10;
        regs_6_2 <= regs_6_1;
        regs_6_3 <= regs_6_2;
        regs_6_4 <= regs_6_3;
        regs_6_5 <= regs_6_4;
        regs_6_6 <= regs_6_5;
        regs_6_7 <= regs_6_6;
        regs_6_8 <= regs_6_7;
        regs_6_9 <= regs_6_8;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_0 = dout_0_write_assign_reg_136;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_1 = dout_1_write_assign_reg_127;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_10 = dout_10_write_assig_reg_46;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_11 = regs_6_11;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_2 = dout_2_write_assign_reg_118;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_3 = dout_3_write_assign_reg_109;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_4 = dout_4_write_assign_reg_100;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_5 = dout_5_write_assign_reg_91;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_6 = dout_6_write_assign_reg_82;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_7 = dout_7_write_assign_reg_73;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_8 = dout_8_write_assign_reg_64;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_9 = dout_9_write_assign_reg_55;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign en_read_read_fu_34_p2 = en;

endmodule //shift_reg_en
