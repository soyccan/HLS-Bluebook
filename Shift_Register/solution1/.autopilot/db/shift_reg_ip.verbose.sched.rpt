

================================================================
== Vivado HLS Report for 'shift_reg_ip'
================================================================
* Date:           Thu Apr  8 07:05:19 2021

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        Shift_Register
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 1.617 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       12|       12| 0.120 us | 0.120 us |   12|   12|   none  |
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 13
* Pipeline : 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 4 
4 --> 5 
5 --> 6 
6 --> 7 
7 --> 8 
8 --> 9 
9 --> 10 
10 --> 11 
11 --> 12 
12 --> 13 
13 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.61>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%en_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %en)" [Shift_Register/shift_reg_ip.cpp:4]   --->   Operation 14 'read' 'en_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%din_read = call i8 @_ssdm_op_Read.ap_auto.i8(i8 %din)" [Shift_Register/shift_reg_ip.cpp:4]   --->   Operation 15 'read' 'din_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%sext_ln20 = sext i8 %din_read to i32" [Shift_Register/shift_reg_ip.cpp:20]   --->   Operation 16 'sext' 'sext_ln20' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (1.61ns)   --->   "%DataOut_0 = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 3), i32 %sext_ln20, i1 %en_read)" [Shift_Register/shift_reg_ip.cpp:20]   --->   Operation 17 'memshiftread' 'DataOut_0' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>

State 2 <SV = 1> <Delay = 1.61>
ST_2 : Operation 18 [1/1] (1.61ns)   --->   "%DataOut = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 0), i32 undef, i1 false)" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 18 'memshiftread' 'DataOut' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "%trunc_ln25 = trunc i32 %DataOut to i8" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 19 'trunc' 'trunc_ln25' <Predicate = true> <Delay = 0.00>

State 3 <SV = 2> <Delay = 1.61>
ST_3 : Operation 20 [1/1] (1.61ns)   --->   "%DataOut_1 = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 1), i32 undef, i1 false)" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 20 'memshiftread' 'DataOut_1' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>
ST_3 : Operation 21 [1/1] (0.00ns)   --->   "%trunc_ln25_1 = trunc i32 %DataOut_1 to i8" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 21 'trunc' 'trunc_ln25_1' <Predicate = true> <Delay = 0.00>

State 4 <SV = 3> <Delay = 1.61>
ST_4 : Operation 22 [1/1] (1.61ns)   --->   "%DataOut_2 = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 2), i32 undef, i1 false)" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 22 'memshiftread' 'DataOut_2' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>
ST_4 : Operation 23 [1/1] (0.00ns)   --->   "%trunc_ln25_2 = trunc i32 %DataOut_2 to i8" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 23 'trunc' 'trunc_ln25_2' <Predicate = true> <Delay = 0.00>

State 5 <SV = 4> <Delay = 1.61>
ST_5 : Operation 24 [1/1] (1.61ns)   --->   "%DataOut_3 = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 3), i32 undef, i1 false)" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 24 'memshiftread' 'DataOut_3' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>
ST_5 : Operation 25 [1/1] (0.00ns)   --->   "%trunc_ln25_3 = trunc i32 %DataOut_3 to i8" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 25 'trunc' 'trunc_ln25_3' <Predicate = true> <Delay = 0.00>

State 6 <SV = 5> <Delay = 1.61>
ST_6 : Operation 26 [1/1] (1.61ns)   --->   "%DataOut_4 = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 4), i32 undef, i1 false)" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 26 'memshiftread' 'DataOut_4' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>
ST_6 : Operation 27 [1/1] (0.00ns)   --->   "%trunc_ln25_4 = trunc i32 %DataOut_4 to i8" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 27 'trunc' 'trunc_ln25_4' <Predicate = true> <Delay = 0.00>

State 7 <SV = 6> <Delay = 1.61>
ST_7 : Operation 28 [1/1] (1.61ns)   --->   "%DataOut_5 = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 5), i32 undef, i1 false)" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 28 'memshiftread' 'DataOut_5' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>
ST_7 : Operation 29 [1/1] (0.00ns)   --->   "%trunc_ln25_5 = trunc i32 %DataOut_5 to i8" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 29 'trunc' 'trunc_ln25_5' <Predicate = true> <Delay = 0.00>

State 8 <SV = 7> <Delay = 1.61>
ST_8 : Operation 30 [1/1] (1.61ns)   --->   "%DataOut_6 = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 6), i32 undef, i1 false)" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 30 'memshiftread' 'DataOut_6' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>
ST_8 : Operation 31 [1/1] (0.00ns)   --->   "%trunc_ln25_6 = trunc i32 %DataOut_6 to i8" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 31 'trunc' 'trunc_ln25_6' <Predicate = true> <Delay = 0.00>

State 9 <SV = 8> <Delay = 1.61>
ST_9 : Operation 32 [1/1] (1.61ns)   --->   "%DataOut_7 = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 7), i32 undef, i1 false)" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 32 'memshiftread' 'DataOut_7' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>
ST_9 : Operation 33 [1/1] (0.00ns)   --->   "%trunc_ln25_7 = trunc i32 %DataOut_7 to i8" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 33 'trunc' 'trunc_ln25_7' <Predicate = true> <Delay = 0.00>

State 10 <SV = 9> <Delay = 1.61>
ST_10 : Operation 34 [1/1] (1.61ns)   --->   "%DataOut_8 = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 8), i32 undef, i1 false)" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 34 'memshiftread' 'DataOut_8' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>
ST_10 : Operation 35 [1/1] (0.00ns)   --->   "%trunc_ln25_8 = trunc i32 %DataOut_8 to i8" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 35 'trunc' 'trunc_ln25_8' <Predicate = true> <Delay = 0.00>

State 11 <SV = 10> <Delay = 1.61>
ST_11 : Operation 36 [1/1] (1.61ns)   --->   "%DataOut_9 = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 9), i32 undef, i1 false)" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 36 'memshiftread' 'DataOut_9' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>
ST_11 : Operation 37 [1/1] (0.00ns)   --->   "%trunc_ln25_9 = trunc i32 %DataOut_9 to i8" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 37 'trunc' 'trunc_ln25_9' <Predicate = true> <Delay = 0.00>

State 12 <SV = 11> <Delay = 1.61>
ST_12 : Operation 38 [1/1] (1.61ns)   --->   "%DataOut_10 = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 10), i32 undef, i1 false)" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 38 'memshiftread' 'DataOut_10' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>
ST_12 : Operation 39 [1/1] (0.00ns)   --->   "%trunc_ln25_10 = trunc i32 %DataOut_10 to i8" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 39 'trunc' 'trunc_ln25_10' <Predicate = true> <Delay = 0.00>

State 13 <SV = 12> <Delay = 1.61>
ST_13 : Operation 40 [1/1] (1.61ns)   --->   "%DataOut_11 = call i32 @"_ssdm_op_MemShiftRead.[12 x i32]P"(i32* getelementptr inbounds ([12 x i32]* @Sreg_Array, i64 0, i64 11), i32 undef, i1 false)" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 40 'memshiftread' 'DataOut_11' <Predicate = true> <Delay = 1.61> <Core = "ShiftReg">   --->   Core 33 'ShiftReg' <Latency = 0> <II = 1> <Delay = 1.61> <Storage> <Opcode : 'memshiftread' 'load'> <Ports = 1> <Width = 32> <Depth = 12> <ShiftMem>
ST_13 : Operation 41 [1/1] (0.00ns)   --->   "%trunc_ln25_11 = trunc i32 %DataOut_11 to i8" [Shift_Register/shift_reg_ip.cpp:25]   --->   Operation 41 'trunc' 'trunc_ln25_11' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 42 [1/1] (0.00ns)   --->   "%mrv = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } undef, i8 %trunc_ln25, 0" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 42 'insertvalue' 'mrv' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 43 [1/1] (0.00ns)   --->   "%mrv_1 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv, i8 %trunc_ln25_1, 1" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 43 'insertvalue' 'mrv_1' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 44 [1/1] (0.00ns)   --->   "%mrv_2 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_1, i8 %trunc_ln25_2, 2" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 44 'insertvalue' 'mrv_2' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 45 [1/1] (0.00ns)   --->   "%mrv_3 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_2, i8 %trunc_ln25_3, 3" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 45 'insertvalue' 'mrv_3' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 46 [1/1] (0.00ns)   --->   "%mrv_4 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_3, i8 %trunc_ln25_4, 4" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 46 'insertvalue' 'mrv_4' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 47 [1/1] (0.00ns)   --->   "%mrv_5 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_4, i8 %trunc_ln25_5, 5" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 47 'insertvalue' 'mrv_5' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 48 [1/1] (0.00ns)   --->   "%mrv_6 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_5, i8 %trunc_ln25_6, 6" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 48 'insertvalue' 'mrv_6' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 49 [1/1] (0.00ns)   --->   "%mrv_7 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_6, i8 %trunc_ln25_7, 7" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 49 'insertvalue' 'mrv_7' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 50 [1/1] (0.00ns)   --->   "%mrv_8 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_7, i8 %trunc_ln25_8, 8" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 50 'insertvalue' 'mrv_8' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 51 [1/1] (0.00ns)   --->   "%mrv_9 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_8, i8 %trunc_ln25_9, 9" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 51 'insertvalue' 'mrv_9' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 52 [1/1] (0.00ns)   --->   "%mrv_10 = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_9, i8 %trunc_ln25_10, 10" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 52 'insertvalue' 'mrv_10' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 53 [1/1] (0.00ns)   --->   "%mrv_s = insertvalue { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_10, i8 %trunc_ln25_11, 11" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 53 'insertvalue' 'mrv_s' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 54 [1/1] (0.00ns)   --->   "ret { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 } %mrv_s" [Shift_Register/shift_reg_ip.cpp:26]   --->   Operation 54 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.62ns
The critical path consists of the following:
	wire read on port 'en' (Shift_Register/shift_reg_ip.cpp:4) [3]  (0 ns)
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:20) [6]  (1.62 ns)

 <State 2>: 1.62ns
The critical path consists of the following:
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:25) [7]  (1.62 ns)

 <State 3>: 1.62ns
The critical path consists of the following:
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:25) [9]  (1.62 ns)

 <State 4>: 1.62ns
The critical path consists of the following:
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:25) [11]  (1.62 ns)

 <State 5>: 1.62ns
The critical path consists of the following:
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:25) [13]  (1.62 ns)

 <State 6>: 1.62ns
The critical path consists of the following:
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:25) [15]  (1.62 ns)

 <State 7>: 1.62ns
The critical path consists of the following:
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:25) [17]  (1.62 ns)

 <State 8>: 1.62ns
The critical path consists of the following:
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:25) [19]  (1.62 ns)

 <State 9>: 1.62ns
The critical path consists of the following:
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:25) [21]  (1.62 ns)

 <State 10>: 1.62ns
The critical path consists of the following:
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:25) [23]  (1.62 ns)

 <State 11>: 1.62ns
The critical path consists of the following:
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:25) [25]  (1.62 ns)

 <State 12>: 1.62ns
The critical path consists of the following:
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:25) [27]  (1.62 ns)

 <State 13>: 1.62ns
The critical path consists of the following:
	'memshiftread' operation ('DataOut', Shift_Register/shift_reg_ip.cpp:25) [29]  (1.62 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
