// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _shift_reg_sreset_HH_
#define _shift_reg_sreset_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct shift_reg_sreset : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > din;
    sc_in< sc_logic > srst;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_out< sc_lv<8> > ap_return_4;
    sc_out< sc_lv<8> > ap_return_5;
    sc_out< sc_lv<8> > ap_return_6;
    sc_out< sc_lv<8> > ap_return_7;
    sc_out< sc_lv<8> > ap_return_8;
    sc_out< sc_lv<8> > ap_return_9;
    sc_out< sc_lv<8> > ap_return_10;
    sc_out< sc_lv<8> > ap_return_11;


    // Module declarations
    shift_reg_sreset(sc_module_name name);
    SC_HAS_PROCESS(shift_reg_sreset);

    ~shift_reg_sreset();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > regs_8_10;
    sc_signal< sc_lv<8> > regs_8_9;
    sc_signal< sc_lv<8> > regs_8_8;
    sc_signal< sc_lv<8> > regs_8_7;
    sc_signal< sc_lv<8> > regs_8_6;
    sc_signal< sc_lv<8> > regs_8_5;
    sc_signal< sc_lv<8> > regs_8_4;
    sc_signal< sc_lv<8> > regs_8_3;
    sc_signal< sc_lv<8> > regs_8_2;
    sc_signal< sc_lv<8> > regs_8_1;
    sc_signal< sc_lv<8> > regs_8_0;
    sc_signal< sc_lv<8> > select_ln12_1_fu_62_p3;
    sc_signal< sc_lv<8> > select_ln12_2_fu_80_p3;
    sc_signal< sc_lv<8> > select_ln12_3_fu_98_p3;
    sc_signal< sc_lv<8> > select_ln12_4_fu_116_p3;
    sc_signal< sc_lv<8> > select_ln12_5_fu_134_p3;
    sc_signal< sc_lv<8> > select_ln12_6_fu_152_p3;
    sc_signal< sc_lv<8> > select_ln12_7_fu_170_p3;
    sc_signal< sc_lv<8> > select_ln12_8_fu_188_p3;
    sc_signal< sc_lv<8> > select_ln12_9_fu_206_p3;
    sc_signal< sc_lv<8> > select_ln12_10_fu_224_p3;
    sc_signal< sc_lv<8> > select_ln12_11_fu_238_p3;
    sc_signal< sc_lv<1> > select_ln12_fu_50_p0;
    sc_signal< sc_lv<1> > select_ln12_1_fu_62_p0;
    sc_signal< sc_lv<1> > select_ln12_2_fu_80_p0;
    sc_signal< sc_lv<1> > select_ln12_3_fu_98_p0;
    sc_signal< sc_lv<1> > select_ln12_4_fu_116_p0;
    sc_signal< sc_lv<1> > select_ln12_5_fu_134_p0;
    sc_signal< sc_lv<1> > select_ln12_6_fu_152_p0;
    sc_signal< sc_lv<1> > select_ln12_7_fu_170_p0;
    sc_signal< sc_lv<1> > select_ln12_8_fu_188_p0;
    sc_signal< sc_lv<1> > select_ln12_9_fu_206_p0;
    sc_signal< sc_lv<1> > select_ln12_10_fu_224_p0;
    sc_signal< sc_lv<1> > select_ln12_11_fu_238_p0;
    sc_signal< sc_lv<8> > select_ln12_fu_50_p3;
    sc_signal< sc_lv<8> > ap_return_0_preg;
    sc_signal< sc_lv<8> > ap_return_1_preg;
    sc_signal< sc_lv<8> > ap_return_2_preg;
    sc_signal< sc_lv<8> > ap_return_3_preg;
    sc_signal< sc_lv<8> > ap_return_4_preg;
    sc_signal< sc_lv<8> > ap_return_5_preg;
    sc_signal< sc_lv<8> > ap_return_6_preg;
    sc_signal< sc_lv<8> > ap_return_7_preg;
    sc_signal< sc_lv<8> > ap_return_8_preg;
    sc_signal< sc_lv<8> > ap_return_9_preg;
    sc_signal< sc_lv<8> > ap_return_10_preg;
    sc_signal< sc_lv<8> > ap_return_11_preg;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_select_ln12_10_fu_224_p0();
    void thread_select_ln12_10_fu_224_p3();
    void thread_select_ln12_11_fu_238_p0();
    void thread_select_ln12_11_fu_238_p3();
    void thread_select_ln12_1_fu_62_p0();
    void thread_select_ln12_1_fu_62_p3();
    void thread_select_ln12_2_fu_80_p0();
    void thread_select_ln12_2_fu_80_p3();
    void thread_select_ln12_3_fu_98_p0();
    void thread_select_ln12_3_fu_98_p3();
    void thread_select_ln12_4_fu_116_p0();
    void thread_select_ln12_4_fu_116_p3();
    void thread_select_ln12_5_fu_134_p0();
    void thread_select_ln12_5_fu_134_p3();
    void thread_select_ln12_6_fu_152_p0();
    void thread_select_ln12_6_fu_152_p3();
    void thread_select_ln12_7_fu_170_p0();
    void thread_select_ln12_7_fu_170_p3();
    void thread_select_ln12_8_fu_188_p0();
    void thread_select_ln12_8_fu_188_p3();
    void thread_select_ln12_9_fu_206_p0();
    void thread_select_ln12_9_fu_206_p3();
    void thread_select_ln12_fu_50_p0();
    void thread_select_ln12_fu_50_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
