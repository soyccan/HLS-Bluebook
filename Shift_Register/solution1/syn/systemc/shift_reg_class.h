// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _shift_reg_class_HH_
#define _shift_reg_class_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct shift_reg_class : public sc_module {
    // Port declarations 30
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > din;
    sc_in< sc_lv<8> > load_data_0_read;
    sc_in< sc_lv<8> > load_data_1_read;
    sc_in< sc_lv<8> > load_data_2_read;
    sc_in< sc_lv<8> > load_data_3_read;
    sc_in< sc_lv<8> > load_data_4_read;
    sc_in< sc_lv<8> > load_data_5_read;
    sc_in< sc_lv<8> > load_data_6_read;
    sc_in< sc_lv<8> > load_data_7_read;
    sc_in< sc_logic > srst;
    sc_in< sc_logic > load;
    sc_in< sc_logic > en;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_out< sc_lv<8> > ap_return_4;
    sc_out< sc_lv<8> > ap_return_5;
    sc_out< sc_lv<8> > ap_return_6;
    sc_out< sc_lv<8> > ap_return_7;
    sc_out< sc_lv<8> > ap_return_8;
    sc_out< sc_lv<8> > ap_return_9;
    sc_out< sc_lv<8> > ap_return_10;
    sc_out< sc_lv<8> > ap_return_11;


    // Module declarations
    shift_reg_class(sc_module_name name);
    SC_HAS_PROCESS(shift_reg_class);

    ~shift_reg_class();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > shift_reg0_regs_7;
    sc_signal< sc_lv<8> > shift_reg1_regs_2;
    sc_signal< sc_lv<8> > shift_reg1_regs_1;
    sc_signal< sc_lv<8> > shift_reg1_regs_0;
    sc_signal< sc_lv<8> > shift_reg0_regs_6;
    sc_signal< sc_lv<8> > shift_reg0_regs_5;
    sc_signal< sc_lv<8> > shift_reg0_regs_4;
    sc_signal< sc_lv<8> > shift_reg0_regs_3;
    sc_signal< sc_lv<8> > shift_reg0_regs_2;
    sc_signal< sc_lv<8> > shift_reg0_regs_1;
    sc_signal< sc_lv<8> > shift_reg0_regs_0;
    sc_signal< sc_lv<8> > shift_reg1_regs_3;
    sc_signal< sc_lv<8> > select_ln25_fu_305_p3;
    sc_signal< sc_lv<1> > en_read_read_fu_58_p2;
    sc_signal< sc_lv<8> > select_ln25_1_fu_327_p3;
    sc_signal< sc_lv<8> > select_ln25_2_fu_349_p3;
    sc_signal< sc_lv<8> > select_ln25_3_fu_371_p3;
    sc_signal< sc_lv<8> > select_ln25_4_fu_393_p3;
    sc_signal< sc_lv<8> > select_ln25_5_fu_415_p3;
    sc_signal< sc_lv<8> > select_ln25_6_fu_437_p3;
    sc_signal< sc_lv<8> > select_ln50_1_fu_471_p3;
    sc_signal< sc_lv<8> > dout0_7_write_assig_reg_130;
    sc_signal< sc_lv<8> > dout0_10_write_assi_reg_139;
    sc_signal< sc_lv<8> > dout0_9_write_assig_reg_148;
    sc_signal< sc_lv<8> > dout0_8_write_assig_reg_157;
    sc_signal< sc_lv<8> > dout0_6_write_assig_reg_166;
    sc_signal< sc_lv<8> > dout0_5_write_assig_reg_175;
    sc_signal< sc_lv<8> > dout0_4_write_assig_reg_184;
    sc_signal< sc_lv<8> > dout0_3_write_assig_reg_193;
    sc_signal< sc_lv<8> > dout0_2_write_assig_reg_202;
    sc_signal< sc_lv<8> > dout0_1_write_assig_reg_211;
    sc_signal< sc_lv<8> > dout0_0_write_assig_reg_220;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > select_ln52_fu_297_p0;
    sc_signal< sc_lv<1> > select_ln25_fu_305_p0;
    sc_signal< sc_lv<8> > select_ln52_fu_297_p3;
    sc_signal< sc_lv<1> > select_ln52_1_fu_319_p0;
    sc_signal< sc_lv<1> > select_ln25_1_fu_327_p0;
    sc_signal< sc_lv<8> > select_ln52_1_fu_319_p3;
    sc_signal< sc_lv<1> > select_ln52_2_fu_341_p0;
    sc_signal< sc_lv<1> > select_ln25_2_fu_349_p0;
    sc_signal< sc_lv<8> > select_ln52_2_fu_341_p3;
    sc_signal< sc_lv<1> > select_ln52_3_fu_363_p0;
    sc_signal< sc_lv<1> > select_ln25_3_fu_371_p0;
    sc_signal< sc_lv<8> > select_ln52_3_fu_363_p3;
    sc_signal< sc_lv<1> > select_ln52_4_fu_385_p0;
    sc_signal< sc_lv<1> > select_ln25_4_fu_393_p0;
    sc_signal< sc_lv<8> > select_ln52_4_fu_385_p3;
    sc_signal< sc_lv<1> > select_ln52_5_fu_407_p0;
    sc_signal< sc_lv<1> > select_ln25_5_fu_415_p0;
    sc_signal< sc_lv<8> > select_ln52_5_fu_407_p3;
    sc_signal< sc_lv<1> > select_ln52_6_fu_429_p0;
    sc_signal< sc_lv<1> > select_ln25_6_fu_437_p0;
    sc_signal< sc_lv<8> > select_ln52_6_fu_429_p3;
    sc_signal< sc_lv<1> > xor_ln50_fu_451_p0;
    sc_signal< sc_lv<1> > or_ln50_fu_457_p0;
    sc_signal< sc_lv<1> > xor_ln50_fu_451_p2;
    sc_signal< sc_lv<1> > select_ln50_fu_463_p0;
    sc_signal< sc_lv<1> > or_ln50_fu_457_p2;
    sc_signal< sc_lv<8> > select_ln50_fu_463_p3;
    sc_signal< sc_lv<8> > ap_return_0_preg;
    sc_signal< sc_lv<8> > ap_return_1_preg;
    sc_signal< sc_lv<8> > ap_return_2_preg;
    sc_signal< sc_lv<8> > ap_return_3_preg;
    sc_signal< sc_lv<8> > ap_return_4_preg;
    sc_signal< sc_lv<8> > ap_return_5_preg;
    sc_signal< sc_lv<8> > ap_return_6_preg;
    sc_signal< sc_lv<8> > ap_return_7_preg;
    sc_signal< sc_lv<8> > ap_return_8_preg;
    sc_signal< sc_lv<8> > ap_return_9_preg;
    sc_signal< sc_lv<8> > ap_return_10_preg;
    sc_signal< sc_lv<8> > ap_return_11_preg;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_10();
    void thread_ap_return_11();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_ap_return_7();
    void thread_ap_return_8();
    void thread_ap_return_9();
    void thread_en_read_read_fu_58_p2();
    void thread_or_ln50_fu_457_p0();
    void thread_or_ln50_fu_457_p2();
    void thread_select_ln25_1_fu_327_p0();
    void thread_select_ln25_1_fu_327_p3();
    void thread_select_ln25_2_fu_349_p0();
    void thread_select_ln25_2_fu_349_p3();
    void thread_select_ln25_3_fu_371_p0();
    void thread_select_ln25_3_fu_371_p3();
    void thread_select_ln25_4_fu_393_p0();
    void thread_select_ln25_4_fu_393_p3();
    void thread_select_ln25_5_fu_415_p0();
    void thread_select_ln25_5_fu_415_p3();
    void thread_select_ln25_6_fu_437_p0();
    void thread_select_ln25_6_fu_437_p3();
    void thread_select_ln25_fu_305_p0();
    void thread_select_ln25_fu_305_p3();
    void thread_select_ln50_1_fu_471_p3();
    void thread_select_ln50_fu_463_p0();
    void thread_select_ln50_fu_463_p3();
    void thread_select_ln52_1_fu_319_p0();
    void thread_select_ln52_1_fu_319_p3();
    void thread_select_ln52_2_fu_341_p0();
    void thread_select_ln52_2_fu_341_p3();
    void thread_select_ln52_3_fu_363_p0();
    void thread_select_ln52_3_fu_363_p3();
    void thread_select_ln52_4_fu_385_p0();
    void thread_select_ln52_4_fu_385_p3();
    void thread_select_ln52_5_fu_407_p0();
    void thread_select_ln52_5_fu_407_p3();
    void thread_select_ln52_6_fu_429_p0();
    void thread_select_ln52_6_fu_429_p3();
    void thread_select_ln52_fu_297_p0();
    void thread_select_ln52_fu_297_p3();
    void thread_xor_ln50_fu_451_p0();
    void thread_xor_ln50_fu_451_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
