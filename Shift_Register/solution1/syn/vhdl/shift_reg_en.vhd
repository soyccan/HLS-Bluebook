-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shift_reg_en is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    din : IN STD_LOGIC_VECTOR (7 downto 0);
    en : IN STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of shift_reg_en is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal regs_6_10 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_6_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_6_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_6_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_6_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_6_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_6_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_6_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_6_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_6_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_6_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_6_11 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal dout_10_write_assig_reg_46 : STD_LOGIC_VECTOR (7 downto 0);
    signal en_read_read_fu_34_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_9_write_assign_reg_55 : STD_LOGIC_VECTOR (7 downto 0);
    signal dout_8_write_assign_reg_64 : STD_LOGIC_VECTOR (7 downto 0);
    signal dout_7_write_assign_reg_73 : STD_LOGIC_VECTOR (7 downto 0);
    signal dout_6_write_assign_reg_82 : STD_LOGIC_VECTOR (7 downto 0);
    signal dout_5_write_assign_reg_91 : STD_LOGIC_VECTOR (7 downto 0);
    signal dout_4_write_assign_reg_100 : STD_LOGIC_VECTOR (7 downto 0);
    signal dout_3_write_assign_reg_109 : STD_LOGIC_VECTOR (7 downto 0);
    signal dout_2_write_assign_reg_118 : STD_LOGIC_VECTOR (7 downto 0);
    signal dout_1_write_assign_reg_127 : STD_LOGIC_VECTOR (7 downto 0);
    signal dout_0_write_assign_reg_136 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_return_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_0_preg <= dout_0_write_assign_reg_136;
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_10_preg <= dout_10_write_assig_reg_46;
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_11_preg <= regs_6_11;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_1_preg <= dout_1_write_assign_reg_127;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_2_preg <= dout_2_write_assign_reg_118;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_3_preg <= dout_3_write_assign_reg_109;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_4_preg <= dout_4_write_assign_reg_100;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_5_preg <= dout_5_write_assign_reg_91;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_6_preg <= dout_6_write_assign_reg_82;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_7_preg <= dout_7_write_assign_reg_73;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_8_preg <= dout_8_write_assign_reg_64;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_9_preg <= dout_9_write_assign_reg_55;
                end if; 
            end if;
        end if;
    end process;


    dout_0_write_assign_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((en_read_read_fu_34_p2 = ap_const_lv1_0)) then 
                    dout_0_write_assign_reg_136 <= regs_6_0;
                elsif ((en_read_read_fu_34_p2 = ap_const_lv1_1)) then 
                    dout_0_write_assign_reg_136 <= din;
                end if;
            end if; 
        end if;
    end process;

    dout_10_write_assig_reg_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((en_read_read_fu_34_p2 = ap_const_lv1_0)) then 
                    dout_10_write_assig_reg_46 <= regs_6_10;
                elsif ((en_read_read_fu_34_p2 = ap_const_lv1_1)) then 
                    dout_10_write_assig_reg_46 <= regs_6_9;
                end if;
            end if; 
        end if;
    end process;

    dout_1_write_assign_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((en_read_read_fu_34_p2 = ap_const_lv1_0)) then 
                    dout_1_write_assign_reg_127 <= regs_6_1;
                elsif ((en_read_read_fu_34_p2 = ap_const_lv1_1)) then 
                    dout_1_write_assign_reg_127 <= regs_6_0;
                end if;
            end if; 
        end if;
    end process;

    dout_2_write_assign_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((en_read_read_fu_34_p2 = ap_const_lv1_0)) then 
                    dout_2_write_assign_reg_118 <= regs_6_2;
                elsif ((en_read_read_fu_34_p2 = ap_const_lv1_1)) then 
                    dout_2_write_assign_reg_118 <= regs_6_1;
                end if;
            end if; 
        end if;
    end process;

    dout_3_write_assign_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((en_read_read_fu_34_p2 = ap_const_lv1_0)) then 
                    dout_3_write_assign_reg_109 <= regs_6_3;
                elsif ((en_read_read_fu_34_p2 = ap_const_lv1_1)) then 
                    dout_3_write_assign_reg_109 <= regs_6_2;
                end if;
            end if; 
        end if;
    end process;

    dout_4_write_assign_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((en_read_read_fu_34_p2 = ap_const_lv1_0)) then 
                    dout_4_write_assign_reg_100 <= regs_6_4;
                elsif ((en_read_read_fu_34_p2 = ap_const_lv1_1)) then 
                    dout_4_write_assign_reg_100 <= regs_6_3;
                end if;
            end if; 
        end if;
    end process;

    dout_5_write_assign_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((en_read_read_fu_34_p2 = ap_const_lv1_0)) then 
                    dout_5_write_assign_reg_91 <= regs_6_5;
                elsif ((en_read_read_fu_34_p2 = ap_const_lv1_1)) then 
                    dout_5_write_assign_reg_91 <= regs_6_4;
                end if;
            end if; 
        end if;
    end process;

    dout_6_write_assign_reg_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((en_read_read_fu_34_p2 = ap_const_lv1_0)) then 
                    dout_6_write_assign_reg_82 <= regs_6_6;
                elsif ((en_read_read_fu_34_p2 = ap_const_lv1_1)) then 
                    dout_6_write_assign_reg_82 <= regs_6_5;
                end if;
            end if; 
        end if;
    end process;

    dout_7_write_assign_reg_73_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((en_read_read_fu_34_p2 = ap_const_lv1_0)) then 
                    dout_7_write_assign_reg_73 <= regs_6_7;
                elsif ((en_read_read_fu_34_p2 = ap_const_lv1_1)) then 
                    dout_7_write_assign_reg_73 <= regs_6_6;
                end if;
            end if; 
        end if;
    end process;

    dout_8_write_assign_reg_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((en_read_read_fu_34_p2 = ap_const_lv1_0)) then 
                    dout_8_write_assign_reg_64 <= regs_6_8;
                elsif ((en_read_read_fu_34_p2 = ap_const_lv1_1)) then 
                    dout_8_write_assign_reg_64 <= regs_6_7;
                end if;
            end if; 
        end if;
    end process;

    dout_9_write_assign_reg_55_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((en_read_read_fu_34_p2 = ap_const_lv1_0)) then 
                    dout_9_write_assign_reg_55 <= regs_6_9;
                elsif ((en_read_read_fu_34_p2 = ap_const_lv1_1)) then 
                    dout_9_write_assign_reg_55 <= regs_6_8;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (en_read_read_fu_34_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                regs_6_0 <= din;
                regs_6_1 <= regs_6_0;
                regs_6_10 <= regs_6_9;
                regs_6_11 <= regs_6_10;
                regs_6_2 <= regs_6_1;
                regs_6_3 <= regs_6_2;
                regs_6_4 <= regs_6_3;
                regs_6_5 <= regs_6_4;
                regs_6_6 <= regs_6_5;
                regs_6_7 <= regs_6_6;
                regs_6_8 <= regs_6_7;
                regs_6_9 <= regs_6_8;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(dout_0_write_assign_reg_136, ap_CS_fsm_state2, ap_return_0_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_0 <= dout_0_write_assign_reg_136;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(dout_1_write_assign_reg_127, ap_CS_fsm_state2, ap_return_1_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_1 <= dout_1_write_assign_reg_127;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_10_assign_proc : process(dout_10_write_assig_reg_46, ap_CS_fsm_state2, ap_return_10_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_10 <= dout_10_write_assig_reg_46;
        else 
            ap_return_10 <= ap_return_10_preg;
        end if; 
    end process;


    ap_return_11_assign_proc : process(regs_6_11, ap_CS_fsm_state2, ap_return_11_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_11 <= regs_6_11;
        else 
            ap_return_11 <= ap_return_11_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(dout_2_write_assign_reg_118, ap_CS_fsm_state2, ap_return_2_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_2 <= dout_2_write_assign_reg_118;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(dout_3_write_assign_reg_109, ap_CS_fsm_state2, ap_return_3_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_3 <= dout_3_write_assign_reg_109;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(dout_4_write_assign_reg_100, ap_CS_fsm_state2, ap_return_4_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_4 <= dout_4_write_assign_reg_100;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(dout_5_write_assign_reg_91, ap_CS_fsm_state2, ap_return_5_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_5 <= dout_5_write_assign_reg_91;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(dout_6_write_assign_reg_82, ap_CS_fsm_state2, ap_return_6_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_6 <= dout_6_write_assign_reg_82;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(dout_7_write_assign_reg_73, ap_CS_fsm_state2, ap_return_7_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_7 <= dout_7_write_assign_reg_73;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(dout_8_write_assign_reg_64, ap_CS_fsm_state2, ap_return_8_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_8 <= dout_8_write_assign_reg_64;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(dout_9_write_assign_reg_55, ap_CS_fsm_state2, ap_return_9_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return_9 <= dout_9_write_assign_reg_55;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    en_read_read_fu_34_p2 <= (0=>en, others=>'-');
end behav;
