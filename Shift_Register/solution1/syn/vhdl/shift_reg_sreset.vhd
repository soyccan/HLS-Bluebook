-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shift_reg_sreset is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    din : IN STD_LOGIC_VECTOR (7 downto 0);
    srst : IN STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of shift_reg_sreset is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal regs_8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal regs_8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln12_1_fu_62_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_2_fu_80_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_3_fu_98_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_4_fu_116_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_5_fu_134_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_6_fu_152_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_7_fu_170_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_8_fu_188_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_9_fu_206_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_10_fu_224_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_11_fu_238_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_fu_50_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_1_fu_62_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_2_fu_80_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_3_fu_98_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_4_fu_116_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_5_fu_134_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_6_fu_152_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_7_fu_170_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_8_fu_188_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_9_fu_206_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_10_fu_224_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_11_fu_238_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_fu_50_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_0_preg <= select_ln12_11_fu_238_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_10_preg <= select_ln12_1_fu_62_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_11_preg <= select_ln12_fu_50_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_1_preg <= select_ln12_10_fu_224_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_2_preg <= select_ln12_9_fu_206_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_3_preg <= select_ln12_8_fu_188_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_4_preg <= select_ln12_7_fu_170_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_5_preg <= select_ln12_6_fu_152_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_6_preg <= select_ln12_5_fu_134_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_7_preg <= select_ln12_4_fu_116_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_8_preg <= select_ln12_3_fu_98_p3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv8_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_9_preg <= select_ln12_2_fu_80_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                regs_8_0 <= select_ln12_11_fu_238_p3;
                regs_8_1 <= select_ln12_10_fu_224_p3;
                regs_8_10 <= select_ln12_1_fu_62_p3;
                regs_8_2 <= select_ln12_9_fu_206_p3;
                regs_8_3 <= select_ln12_8_fu_188_p3;
                regs_8_4 <= select_ln12_7_fu_170_p3;
                regs_8_5 <= select_ln12_6_fu_152_p3;
                regs_8_6 <= select_ln12_5_fu_134_p3;
                regs_8_7 <= select_ln12_4_fu_116_p3;
                regs_8_8 <= select_ln12_3_fu_98_p3;
                regs_8_9 <= select_ln12_2_fu_80_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_start, ap_CS_fsm_state1, select_ln12_11_fu_238_p3, ap_return_0_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_0 <= select_ln12_11_fu_238_p3;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_start, ap_CS_fsm_state1, select_ln12_10_fu_224_p3, ap_return_1_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_1 <= select_ln12_10_fu_224_p3;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_10_assign_proc : process(ap_start, ap_CS_fsm_state1, select_ln12_1_fu_62_p3, ap_return_10_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_10 <= select_ln12_1_fu_62_p3;
        else 
            ap_return_10 <= ap_return_10_preg;
        end if; 
    end process;


    ap_return_11_assign_proc : process(ap_start, ap_CS_fsm_state1, select_ln12_fu_50_p3, ap_return_11_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_11 <= select_ln12_fu_50_p3;
        else 
            ap_return_11 <= ap_return_11_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(ap_start, ap_CS_fsm_state1, select_ln12_9_fu_206_p3, ap_return_2_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_2 <= select_ln12_9_fu_206_p3;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(ap_start, ap_CS_fsm_state1, select_ln12_8_fu_188_p3, ap_return_3_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_3 <= select_ln12_8_fu_188_p3;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(ap_start, ap_CS_fsm_state1, select_ln12_7_fu_170_p3, ap_return_4_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_4 <= select_ln12_7_fu_170_p3;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(ap_start, ap_CS_fsm_state1, select_ln12_6_fu_152_p3, ap_return_5_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_5 <= select_ln12_6_fu_152_p3;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(ap_start, ap_CS_fsm_state1, select_ln12_5_fu_134_p3, ap_return_6_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_6 <= select_ln12_5_fu_134_p3;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(ap_start, ap_CS_fsm_state1, select_ln12_4_fu_116_p3, ap_return_7_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_7 <= select_ln12_4_fu_116_p3;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(ap_start, ap_CS_fsm_state1, select_ln12_3_fu_98_p3, ap_return_8_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_8 <= select_ln12_3_fu_98_p3;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(ap_start, ap_CS_fsm_state1, select_ln12_2_fu_80_p3, ap_return_9_preg)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_9 <= select_ln12_2_fu_80_p3;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    select_ln12_10_fu_224_p0 <= (0=>srst, others=>'-');
    select_ln12_10_fu_224_p3 <= 
        ap_const_lv8_0 when (select_ln12_10_fu_224_p0(0) = '1') else 
        regs_8_0;
    select_ln12_11_fu_238_p0 <= (0=>srst, others=>'-');
    select_ln12_11_fu_238_p3 <= 
        ap_const_lv8_0 when (select_ln12_11_fu_238_p0(0) = '1') else 
        din;
    select_ln12_1_fu_62_p0 <= (0=>srst, others=>'-');
    select_ln12_1_fu_62_p3 <= 
        ap_const_lv8_0 when (select_ln12_1_fu_62_p0(0) = '1') else 
        regs_8_9;
    select_ln12_2_fu_80_p0 <= (0=>srst, others=>'-');
    select_ln12_2_fu_80_p3 <= 
        ap_const_lv8_0 when (select_ln12_2_fu_80_p0(0) = '1') else 
        regs_8_8;
    select_ln12_3_fu_98_p0 <= (0=>srst, others=>'-');
    select_ln12_3_fu_98_p3 <= 
        ap_const_lv8_0 when (select_ln12_3_fu_98_p0(0) = '1') else 
        regs_8_7;
    select_ln12_4_fu_116_p0 <= (0=>srst, others=>'-');
    select_ln12_4_fu_116_p3 <= 
        ap_const_lv8_0 when (select_ln12_4_fu_116_p0(0) = '1') else 
        regs_8_6;
    select_ln12_5_fu_134_p0 <= (0=>srst, others=>'-');
    select_ln12_5_fu_134_p3 <= 
        ap_const_lv8_0 when (select_ln12_5_fu_134_p0(0) = '1') else 
        regs_8_5;
    select_ln12_6_fu_152_p0 <= (0=>srst, others=>'-');
    select_ln12_6_fu_152_p3 <= 
        ap_const_lv8_0 when (select_ln12_6_fu_152_p0(0) = '1') else 
        regs_8_4;
    select_ln12_7_fu_170_p0 <= (0=>srst, others=>'-');
    select_ln12_7_fu_170_p3 <= 
        ap_const_lv8_0 when (select_ln12_7_fu_170_p0(0) = '1') else 
        regs_8_3;
    select_ln12_8_fu_188_p0 <= (0=>srst, others=>'-');
    select_ln12_8_fu_188_p3 <= 
        ap_const_lv8_0 when (select_ln12_8_fu_188_p0(0) = '1') else 
        regs_8_2;
    select_ln12_9_fu_206_p0 <= (0=>srst, others=>'-');
    select_ln12_9_fu_206_p3 <= 
        ap_const_lv8_0 when (select_ln12_9_fu_206_p0(0) = '1') else 
        regs_8_1;
    select_ln12_fu_50_p0 <= (0=>srst, others=>'-');
    select_ln12_fu_50_p3 <= 
        ap_const_lv8_0 when (select_ln12_fu_50_p0(0) = '1') else 
        regs_8_10;
end behav;
