// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shift_reg_class (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        din,
        load_data_0_read,
        load_data_1_read,
        load_data_2_read,
        load_data_3_read,
        load_data_4_read,
        load_data_5_read,
        load_data_6_read,
        load_data_7_read,
        srst,
        load,
        en,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] din;
input  [7:0] load_data_0_read;
input  [7:0] load_data_1_read;
input  [7:0] load_data_2_read;
input  [7:0] load_data_3_read;
input  [7:0] load_data_4_read;
input  [7:0] load_data_5_read;
input  [7:0] load_data_6_read;
input  [7:0] load_data_7_read;
input   srst;
input   load;
input   en;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] ap_return_0;
reg[7:0] ap_return_1;
reg[7:0] ap_return_2;
reg[7:0] ap_return_3;
reg[7:0] ap_return_4;
reg[7:0] ap_return_5;
reg[7:0] ap_return_6;
reg[7:0] ap_return_7;
reg[7:0] ap_return_8;
reg[7:0] ap_return_9;
reg[7:0] ap_return_10;
reg[7:0] ap_return_11;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] shift_reg0_regs_7;
reg   [7:0] shift_reg1_regs_2;
reg   [7:0] shift_reg1_regs_1;
reg   [7:0] shift_reg1_regs_0;
reg   [7:0] shift_reg0_regs_6;
reg   [7:0] shift_reg0_regs_5;
reg   [7:0] shift_reg0_regs_4;
reg   [7:0] shift_reg0_regs_3;
reg   [7:0] shift_reg0_regs_2;
reg   [7:0] shift_reg0_regs_1;
reg   [7:0] shift_reg0_regs_0;
reg   [7:0] shift_reg1_regs_3;
wire   [7:0] select_ln25_fu_305_p3;
wire   [0:0] en_read_read_fu_58_p2;
wire   [7:0] select_ln25_1_fu_327_p3;
wire   [7:0] select_ln25_2_fu_349_p3;
wire   [7:0] select_ln25_3_fu_371_p3;
wire   [7:0] select_ln25_4_fu_393_p3;
wire   [7:0] select_ln25_5_fu_415_p3;
wire   [7:0] select_ln25_6_fu_437_p3;
wire   [7:0] select_ln50_1_fu_471_p3;
reg   [7:0] dout0_7_write_assig_reg_130;
reg   [7:0] dout0_10_write_assi_reg_139;
reg   [7:0] dout0_9_write_assig_reg_148;
reg   [7:0] dout0_8_write_assig_reg_157;
reg   [7:0] dout0_6_write_assig_reg_166;
reg   [7:0] dout0_5_write_assig_reg_175;
reg   [7:0] dout0_4_write_assig_reg_184;
reg   [7:0] dout0_3_write_assig_reg_193;
reg   [7:0] dout0_2_write_assig_reg_202;
reg   [7:0] dout0_1_write_assig_reg_211;
reg   [7:0] dout0_0_write_assig_reg_220;
wire    ap_CS_fsm_state2;
wire   [0:0] select_ln52_fu_297_p0;
wire   [0:0] select_ln25_fu_305_p0;
wire   [7:0] select_ln52_fu_297_p3;
wire   [0:0] select_ln52_1_fu_319_p0;
wire   [0:0] select_ln25_1_fu_327_p0;
wire   [7:0] select_ln52_1_fu_319_p3;
wire   [0:0] select_ln52_2_fu_341_p0;
wire   [0:0] select_ln25_2_fu_349_p0;
wire   [7:0] select_ln52_2_fu_341_p3;
wire   [0:0] select_ln52_3_fu_363_p0;
wire   [0:0] select_ln25_3_fu_371_p0;
wire   [7:0] select_ln52_3_fu_363_p3;
wire   [0:0] select_ln52_4_fu_385_p0;
wire   [0:0] select_ln25_4_fu_393_p0;
wire   [7:0] select_ln52_4_fu_385_p3;
wire   [0:0] select_ln52_5_fu_407_p0;
wire   [0:0] select_ln25_5_fu_415_p0;
wire   [7:0] select_ln52_5_fu_407_p3;
wire   [0:0] select_ln52_6_fu_429_p0;
wire   [0:0] select_ln25_6_fu_437_p0;
wire   [7:0] select_ln52_6_fu_429_p3;
wire   [0:0] xor_ln50_fu_451_p0;
wire   [0:0] or_ln50_fu_457_p0;
wire   [0:0] xor_ln50_fu_451_p2;
wire   [0:0] select_ln50_fu_463_p0;
wire   [0:0] or_ln50_fu_457_p2;
wire   [7:0] select_ln50_fu_463_p3;
reg   [7:0] ap_return_0_preg;
reg   [7:0] ap_return_1_preg;
reg   [7:0] ap_return_2_preg;
reg   [7:0] ap_return_3_preg;
reg   [7:0] ap_return_4_preg;
reg   [7:0] ap_return_5_preg;
reg   [7:0] ap_return_6_preg;
reg   [7:0] ap_return_7_preg;
reg   [7:0] ap_return_8_preg;
reg   [7:0] ap_return_9_preg;
reg   [7:0] ap_return_10_preg;
reg   [7:0] ap_return_11_preg;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 shift_reg0_regs_7 = 8'd0;
#0 shift_reg1_regs_2 = 8'd0;
#0 shift_reg1_regs_1 = 8'd0;
#0 shift_reg1_regs_0 = 8'd0;
#0 shift_reg0_regs_6 = 8'd0;
#0 shift_reg0_regs_5 = 8'd0;
#0 shift_reg0_regs_4 = 8'd0;
#0 shift_reg0_regs_3 = 8'd0;
#0 shift_reg0_regs_2 = 8'd0;
#0 shift_reg0_regs_1 = 8'd0;
#0 shift_reg0_regs_0 = 8'd0;
#0 shift_reg1_regs_3 = 8'd0;
#0 ap_return_0_preg = 8'd0;
#0 ap_return_1_preg = 8'd0;
#0 ap_return_2_preg = 8'd0;
#0 ap_return_3_preg = 8'd0;
#0 ap_return_4_preg = 8'd0;
#0 ap_return_5_preg = 8'd0;
#0 ap_return_6_preg = 8'd0;
#0 ap_return_7_preg = 8'd0;
#0 ap_return_8_preg = 8'd0;
#0 ap_return_9_preg = 8'd0;
#0 ap_return_10_preg = 8'd0;
#0 ap_return_11_preg = 8'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_0_preg <= dout0_0_write_assig_reg_220;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_10_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_10_preg <= dout0_10_write_assi_reg_139;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_11_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_11_preg <= shift_reg1_regs_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_1_preg <= dout0_1_write_assig_reg_211;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_2_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_2_preg <= dout0_2_write_assig_reg_202;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_3_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_3_preg <= dout0_3_write_assig_reg_193;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_4_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_4_preg <= dout0_4_write_assig_reg_184;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_5_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_5_preg <= dout0_5_write_assig_reg_175;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_6_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_6_preg <= dout0_6_write_assig_reg_166;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_7_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_7_preg <= dout0_7_write_assig_reg_130;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_8_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_8_preg <= dout0_8_write_assig_reg_157;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_9_preg <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_9_preg <= dout0_9_write_assig_reg_148;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_58_p2 == 1'd0)) begin
            dout0_0_write_assig_reg_220 <= shift_reg0_regs_0;
        end else if ((en_read_read_fu_58_p2 == 1'd1)) begin
            dout0_0_write_assig_reg_220 <= select_ln50_1_fu_471_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_58_p2 == 1'd0)) begin
            dout0_10_write_assi_reg_139 <= shift_reg1_regs_2;
        end else if ((en_read_read_fu_58_p2 == 1'd1)) begin
            dout0_10_write_assi_reg_139 <= shift_reg1_regs_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_58_p2 == 1'd0)) begin
            dout0_1_write_assig_reg_211 <= shift_reg0_regs_1;
        end else if ((en_read_read_fu_58_p2 == 1'd1)) begin
            dout0_1_write_assig_reg_211 <= select_ln25_6_fu_437_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_58_p2 == 1'd0)) begin
            dout0_2_write_assig_reg_202 <= shift_reg0_regs_2;
        end else if ((en_read_read_fu_58_p2 == 1'd1)) begin
            dout0_2_write_assig_reg_202 <= select_ln25_5_fu_415_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_58_p2 == 1'd0)) begin
            dout0_3_write_assig_reg_193 <= shift_reg0_regs_3;
        end else if ((en_read_read_fu_58_p2 == 1'd1)) begin
            dout0_3_write_assig_reg_193 <= select_ln25_4_fu_393_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_58_p2 == 1'd0)) begin
            dout0_4_write_assig_reg_184 <= shift_reg0_regs_4;
        end else if ((en_read_read_fu_58_p2 == 1'd1)) begin
            dout0_4_write_assig_reg_184 <= select_ln25_3_fu_371_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_58_p2 == 1'd0)) begin
            dout0_5_write_assig_reg_175 <= shift_reg0_regs_5;
        end else if ((en_read_read_fu_58_p2 == 1'd1)) begin
            dout0_5_write_assig_reg_175 <= select_ln25_2_fu_349_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_58_p2 == 1'd0)) begin
            dout0_6_write_assig_reg_166 <= shift_reg0_regs_6;
        end else if ((en_read_read_fu_58_p2 == 1'd1)) begin
            dout0_6_write_assig_reg_166 <= select_ln25_1_fu_327_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_58_p2 == 1'd0)) begin
            dout0_7_write_assig_reg_130 <= shift_reg0_regs_7;
        end else if ((en_read_read_fu_58_p2 == 1'd1)) begin
            dout0_7_write_assig_reg_130 <= select_ln25_fu_305_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_58_p2 == 1'd0)) begin
            dout0_8_write_assig_reg_157 <= shift_reg1_regs_0;
        end else if ((en_read_read_fu_58_p2 == 1'd1)) begin
            dout0_8_write_assig_reg_157 <= shift_reg0_regs_7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((en_read_read_fu_58_p2 == 1'd0)) begin
            dout0_9_write_assig_reg_148 <= shift_reg1_regs_1;
        end else if ((en_read_read_fu_58_p2 == 1'd1)) begin
            dout0_9_write_assig_reg_148 <= shift_reg1_regs_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((en_read_read_fu_58_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        shift_reg0_regs_0 <= select_ln50_1_fu_471_p3;
        shift_reg0_regs_1 <= select_ln25_6_fu_437_p3;
        shift_reg0_regs_2 <= select_ln25_5_fu_415_p3;
        shift_reg0_regs_3 <= select_ln25_4_fu_393_p3;
        shift_reg0_regs_4 <= select_ln25_3_fu_371_p3;
        shift_reg0_regs_5 <= select_ln25_2_fu_349_p3;
        shift_reg0_regs_6 <= select_ln25_1_fu_327_p3;
        shift_reg0_regs_7 <= select_ln25_fu_305_p3;
        shift_reg1_regs_0 <= shift_reg0_regs_7;
        shift_reg1_regs_1 <= shift_reg1_regs_0;
        shift_reg1_regs_2 <= shift_reg1_regs_1;
        shift_reg1_regs_3 <= shift_reg1_regs_2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_0 = dout0_0_write_assig_reg_220;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_1 = dout0_1_write_assig_reg_211;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_10 = dout0_10_write_assi_reg_139;
    end else begin
        ap_return_10 = ap_return_10_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_11 = shift_reg1_regs_3;
    end else begin
        ap_return_11 = ap_return_11_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_2 = dout0_2_write_assig_reg_202;
    end else begin
        ap_return_2 = ap_return_2_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_3 = dout0_3_write_assig_reg_193;
    end else begin
        ap_return_3 = ap_return_3_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_4 = dout0_4_write_assig_reg_184;
    end else begin
        ap_return_4 = ap_return_4_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_5 = dout0_5_write_assig_reg_175;
    end else begin
        ap_return_5 = ap_return_5_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_6 = dout0_6_write_assig_reg_166;
    end else begin
        ap_return_6 = ap_return_6_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_7 = dout0_7_write_assig_reg_130;
    end else begin
        ap_return_7 = ap_return_7_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_8 = dout0_8_write_assig_reg_157;
    end else begin
        ap_return_8 = ap_return_8_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return_9 = dout0_9_write_assig_reg_148;
    end else begin
        ap_return_9 = ap_return_9_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign en_read_read_fu_58_p2 = en;

assign or_ln50_fu_457_p0 = srst;

assign or_ln50_fu_457_p2 = (xor_ln50_fu_451_p2 | or_ln50_fu_457_p0);

assign select_ln25_1_fu_327_p0 = srst;

assign select_ln25_1_fu_327_p3 = ((select_ln25_1_fu_327_p0[0:0] === 1'b1) ? 8'd0 : select_ln52_1_fu_319_p3);

assign select_ln25_2_fu_349_p0 = srst;

assign select_ln25_2_fu_349_p3 = ((select_ln25_2_fu_349_p0[0:0] === 1'b1) ? 8'd0 : select_ln52_2_fu_341_p3);

assign select_ln25_3_fu_371_p0 = srst;

assign select_ln25_3_fu_371_p3 = ((select_ln25_3_fu_371_p0[0:0] === 1'b1) ? 8'd0 : select_ln52_3_fu_363_p3);

assign select_ln25_4_fu_393_p0 = srst;

assign select_ln25_4_fu_393_p3 = ((select_ln25_4_fu_393_p0[0:0] === 1'b1) ? 8'd0 : select_ln52_4_fu_385_p3);

assign select_ln25_5_fu_415_p0 = srst;

assign select_ln25_5_fu_415_p3 = ((select_ln25_5_fu_415_p0[0:0] === 1'b1) ? 8'd0 : select_ln52_5_fu_407_p3);

assign select_ln25_6_fu_437_p0 = srst;

assign select_ln25_6_fu_437_p3 = ((select_ln25_6_fu_437_p0[0:0] === 1'b1) ? 8'd0 : select_ln52_6_fu_429_p3);

assign select_ln25_fu_305_p0 = srst;

assign select_ln25_fu_305_p3 = ((select_ln25_fu_305_p0[0:0] === 1'b1) ? 8'd0 : select_ln52_fu_297_p3);

assign select_ln50_1_fu_471_p3 = ((or_ln50_fu_457_p2[0:0] === 1'b1) ? select_ln50_fu_463_p3 : load_data_0_read);

assign select_ln50_fu_463_p0 = srst;

assign select_ln50_fu_463_p3 = ((select_ln50_fu_463_p0[0:0] === 1'b1) ? 8'd0 : din);

assign select_ln52_1_fu_319_p0 = load;

assign select_ln52_1_fu_319_p3 = ((select_ln52_1_fu_319_p0[0:0] === 1'b1) ? load_data_6_read : shift_reg0_regs_5);

assign select_ln52_2_fu_341_p0 = load;

assign select_ln52_2_fu_341_p3 = ((select_ln52_2_fu_341_p0[0:0] === 1'b1) ? load_data_5_read : shift_reg0_regs_4);

assign select_ln52_3_fu_363_p0 = load;

assign select_ln52_3_fu_363_p3 = ((select_ln52_3_fu_363_p0[0:0] === 1'b1) ? load_data_4_read : shift_reg0_regs_3);

assign select_ln52_4_fu_385_p0 = load;

assign select_ln52_4_fu_385_p3 = ((select_ln52_4_fu_385_p0[0:0] === 1'b1) ? load_data_3_read : shift_reg0_regs_2);

assign select_ln52_5_fu_407_p0 = load;

assign select_ln52_5_fu_407_p3 = ((select_ln52_5_fu_407_p0[0:0] === 1'b1) ? load_data_2_read : shift_reg0_regs_1);

assign select_ln52_6_fu_429_p0 = load;

assign select_ln52_6_fu_429_p3 = ((select_ln52_6_fu_429_p0[0:0] === 1'b1) ? load_data_1_read : shift_reg0_regs_0);

assign select_ln52_fu_297_p0 = load;

assign select_ln52_fu_297_p3 = ((select_ln52_fu_297_p0[0:0] === 1'b1) ? load_data_7_read : shift_reg0_regs_6);

assign xor_ln50_fu_451_p0 = load;

assign xor_ln50_fu_451_p2 = (xor_ln50_fu_451_p0 ^ 1'd1);

endmodule //shift_reg_class
